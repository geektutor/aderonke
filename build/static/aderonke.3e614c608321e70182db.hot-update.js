webpackHotUpdate("aderonke",{

/***/ "./node_modules/tinycolor2/tinycolor.js":
/*!**********************************************!*\
  !*** ./node_modules/tinycolor2/tinycolor.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"./node_modules/core-js/modules/es.regexp.constructor.js\");__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"./node_modules/core-js/modules/es.regexp.exec.js\");__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"./node_modules/core-js/modules/es.string.replace.js\");// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n(function(Math){var trimLeft=/^\\s+/,trimRight=/\\s+$/,tinyCounter=0,mathRound=Math.round,mathMin=Math.min,mathMax=Math.max,mathRandom=Math.random;function tinycolor(color,opts){color=color?color:'';opts=opts||{};// If input is already a tinycolor, return itself\nif(color instanceof tinycolor){return color;}// If we are called as a function, call using new instead\nif(!(this instanceof tinycolor)){return new tinycolor(color,opts);}var rgb=inputToRGB(color);this._originalInput=color,this._r=rgb.r,this._g=rgb.g,this._b=rgb.b,this._a=rgb.a,this._roundA=mathRound(100*this._a)/100,this._format=opts.format||rgb.format;this._gradientType=opts.gradientType;// Don't let the range of [0,255] come back in [0,1].\n// Potentially lose a little bit of precision here, but will fix issues where\n// .5 gets interpreted as half of the total, instead of half of 1\n// If it was supposed to be 128, this was already taken care of by `inputToRgb`\nif(this._r<1){this._r=mathRound(this._r);}if(this._g<1){this._g=mathRound(this._g);}if(this._b<1){this._b=mathRound(this._b);}this._ok=rgb.ok;this._tc_id=tinyCounter++;}tinycolor.prototype={isDark:function(){return this.getBrightness()<128;},isLight:function(){return!this.isDark();},isValid:function(){return this._ok;},getOriginalInput:function(){return this._originalInput;},getFormat:function(){return this._format;},getAlpha:function(){return this._a;},getBrightness:function(){//http://www.w3.org/TR/AERT#color-contrast\nvar rgb=this.toRgb();return(rgb.r*299+rgb.g*587+rgb.b*114)/1000;},getLuminance:function(){//http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\nvar rgb=this.toRgb();var RsRGB,GsRGB,BsRGB,R,G,B;RsRGB=rgb.r/255;GsRGB=rgb.g/255;BsRGB=rgb.b/255;if(RsRGB<=0.03928){R=RsRGB/12.92;}else{R=Math.pow((RsRGB+0.055)/1.055,2.4);}if(GsRGB<=0.03928){G=GsRGB/12.92;}else{G=Math.pow((GsRGB+0.055)/1.055,2.4);}if(BsRGB<=0.03928){B=BsRGB/12.92;}else{B=Math.pow((BsRGB+0.055)/1.055,2.4);}return 0.2126*R+0.7152*G+0.0722*B;},setAlpha:function(value){this._a=boundAlpha(value);this._roundA=mathRound(100*this._a)/100;return this;},toHsv:function(){var hsv=rgbToHsv(this._r,this._g,this._b);return{h:hsv.h*360,s:hsv.s,v:hsv.v,a:this._a};},toHsvString:function(){var hsv=rgbToHsv(this._r,this._g,this._b);var h=mathRound(hsv.h*360),s=mathRound(hsv.s*100),v=mathRound(hsv.v*100);return this._a==1?\"hsv(\"+h+\", \"+s+\"%, \"+v+\"%)\":\"hsva(\"+h+\", \"+s+\"%, \"+v+\"%, \"+this._roundA+\")\";},toHsl:function(){var hsl=rgbToHsl(this._r,this._g,this._b);return{h:hsl.h*360,s:hsl.s,l:hsl.l,a:this._a};},toHslString:function(){var hsl=rgbToHsl(this._r,this._g,this._b);var h=mathRound(hsl.h*360),s=mathRound(hsl.s*100),l=mathRound(hsl.l*100);return this._a==1?\"hsl(\"+h+\", \"+s+\"%, \"+l+\"%)\":\"hsla(\"+h+\", \"+s+\"%, \"+l+\"%, \"+this._roundA+\")\";},toHex:function(allow3Char){return rgbToHex(this._r,this._g,this._b,allow3Char);},toHexString:function(allow3Char){return'#'+this.toHex(allow3Char);},toHex8:function(allow4Char){return rgbaToHex(this._r,this._g,this._b,this._a,allow4Char);},toHex8String:function(allow4Char){return'#'+this.toHex8(allow4Char);},toRgb:function(){return{r:mathRound(this._r),g:mathRound(this._g),b:mathRound(this._b),a:this._a};},toRgbString:function(){return this._a==1?\"rgb(\"+mathRound(this._r)+\", \"+mathRound(this._g)+\", \"+mathRound(this._b)+\")\":\"rgba(\"+mathRound(this._r)+\", \"+mathRound(this._g)+\", \"+mathRound(this._b)+\", \"+this._roundA+\")\";},toPercentageRgb:function(){return{r:mathRound(bound01(this._r,255)*100)+\"%\",g:mathRound(bound01(this._g,255)*100)+\"%\",b:mathRound(bound01(this._b,255)*100)+\"%\",a:this._a};},toPercentageRgbString:function(){return this._a==1?\"rgb(\"+mathRound(bound01(this._r,255)*100)+\"%, \"+mathRound(bound01(this._g,255)*100)+\"%, \"+mathRound(bound01(this._b,255)*100)+\"%)\":\"rgba(\"+mathRound(bound01(this._r,255)*100)+\"%, \"+mathRound(bound01(this._g,255)*100)+\"%, \"+mathRound(bound01(this._b,255)*100)+\"%, \"+this._roundA+\")\";},toName:function(){if(this._a===0){return\"transparent\";}if(this._a<1){return false;}return hexNames[rgbToHex(this._r,this._g,this._b,true)]||false;},toFilter:function(secondColor){var hex8String='#'+rgbaToArgbHex(this._r,this._g,this._b,this._a);var secondHex8String=hex8String;var gradientType=this._gradientType?\"GradientType = 1, \":\"\";if(secondColor){var s=tinycolor(secondColor);secondHex8String='#'+rgbaToArgbHex(s._r,s._g,s._b,s._a);}return\"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";},toString:function(format){var formatSet=!!format;format=format||this._format;var formattedString=false;var hasAlpha=this._a<1&&this._a>=0;var needsAlphaFormat=!formatSet&&hasAlpha&&(format===\"hex\"||format===\"hex6\"||format===\"hex3\"||format===\"hex4\"||format===\"hex8\"||format===\"name\");if(needsAlphaFormat){// Special case for \"transparent\", all other non-alpha formats\n// will return rgba when there is transparency.\nif(format===\"name\"&&this._a===0){return this.toName();}return this.toRgbString();}if(format===\"rgb\"){formattedString=this.toRgbString();}if(format===\"prgb\"){formattedString=this.toPercentageRgbString();}if(format===\"hex\"||format===\"hex6\"){formattedString=this.toHexString();}if(format===\"hex3\"){formattedString=this.toHexString(true);}if(format===\"hex4\"){formattedString=this.toHex8String(true);}if(format===\"hex8\"){formattedString=this.toHex8String();}if(format===\"name\"){formattedString=this.toName();}if(format===\"hsl\"){formattedString=this.toHslString();}if(format===\"hsv\"){formattedString=this.toHsvString();}return formattedString||this.toHexString();},clone:function(){return tinycolor(this.toString());},_applyModification:function(fn,args){var color=fn.apply(null,[this].concat([].slice.call(args)));this._r=color._r;this._g=color._g;this._b=color._b;this.setAlpha(color._a);return this;},lighten:function(){return this._applyModification(lighten,arguments);},brighten:function(){return this._applyModification(brighten,arguments);},darken:function(){return this._applyModification(darken,arguments);},desaturate:function(){return this._applyModification(desaturate,arguments);},saturate:function(){return this._applyModification(saturate,arguments);},greyscale:function(){return this._applyModification(greyscale,arguments);},spin:function(){return this._applyModification(spin,arguments);},_applyCombination:function(fn,args){return fn.apply(null,[this].concat([].slice.call(args)));},analogous:function(){return this._applyCombination(analogous,arguments);},complement:function(){return this._applyCombination(complement,arguments);},monochromatic:function(){return this._applyCombination(monochromatic,arguments);},splitcomplement:function(){return this._applyCombination(splitcomplement,arguments);},triad:function(){return this._applyCombination(triad,arguments);},tetrad:function(){return this._applyCombination(tetrad,arguments);}};// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio=function(color,opts){if(typeof color==\"object\"){var newColor={};for(var i in color){if(color.hasOwnProperty(i)){if(i===\"a\"){newColor[i]=color[i];}else{newColor[i]=convertToPercentage(color[i]);}}}color=newColor;}return tinycolor(color,opts);};// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color){var rgb={r:0,g:0,b:0};var a=1;var s=null;var v=null;var l=null;var ok=false;var format=false;if(typeof color==\"string\"){color=stringInputToObject(color);}if(typeof color==\"object\"){if(isValidCSSUnit(color.r)&&isValidCSSUnit(color.g)&&isValidCSSUnit(color.b)){rgb=rgbToRgb(color.r,color.g,color.b);ok=true;format=String(color.r).substr(-1)===\"%\"?\"prgb\":\"rgb\";}else if(isValidCSSUnit(color.h)&&isValidCSSUnit(color.s)&&isValidCSSUnit(color.v)){s=convertToPercentage(color.s);v=convertToPercentage(color.v);rgb=hsvToRgb(color.h,s,v);ok=true;format=\"hsv\";}else if(isValidCSSUnit(color.h)&&isValidCSSUnit(color.s)&&isValidCSSUnit(color.l)){s=convertToPercentage(color.s);l=convertToPercentage(color.l);rgb=hslToRgb(color.h,s,l);ok=true;format=\"hsl\";}if(color.hasOwnProperty(\"a\")){a=color.a;}}a=boundAlpha(a);return{ok:ok,format:color.format||format,r:mathMin(255,mathMax(rgb.r,0)),g:mathMin(255,mathMax(rgb.g,0)),b:mathMin(255,mathMax(rgb.b,0)),a:a};}// Conversion Functions\n// --------------------\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r,g,b){return{r:bound01(r,255)*255,g:bound01(g,255)*255,b:bound01(b,255)*255};}// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r,g,b){r=bound01(r,255);g=bound01(g,255);b=bound01(b,255);var max=mathMax(r,g,b),min=mathMin(r,g,b);var h,s,l=(max+min)/2;if(max==min){h=s=0;// achromatic\n}else{var d=max-min;s=l>0.5?d/(2-max-min):d/(max+min);switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;}h/=6;}return{h:h,s:s,l:l};}// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h,s,l){var r,g,b;h=bound01(h,360);s=bound01(s,100);l=bound01(l,100);function hue2rgb(p,q,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return p+(q-p)*6*t;if(t<1/2)return q;if(t<2/3)return p+(q-p)*(2/3-t)*6;return p;}if(s===0){r=g=b=l;// achromatic\n}else{var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}return{r:r*255,g:g*255,b:b*255};}// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r,g,b){r=bound01(r,255);g=bound01(g,255);b=bound01(b,255);var max=mathMax(r,g,b),min=mathMin(r,g,b);var h,s,v=max;var d=max-min;s=max===0?0:d/max;if(max==min){h=0;// achromatic\n}else{switch(max){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;}h/=6;}return{h:h,s:s,v:v};}// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hsvToRgb(h,s,v){h=bound01(h,360)*6;s=bound01(s,100);v=bound01(v,100);var i=Math.floor(h),f=h-i,p=v*(1-s),q=v*(1-f*s),t=v*(1-(1-f)*s),mod=i%6,r=[v,q,p,p,t,v][mod],g=[t,v,v,q,p,p][mod],b=[p,p,t,v,v,q][mod];return{r:r*255,g:g*255,b:b*255};}// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r,g,b,allow3Char){var hex=[pad2(mathRound(r).toString(16)),pad2(mathRound(g).toString(16)),pad2(mathRound(b).toString(16))];// Return a 3 character hex if possible\nif(allow3Char&&hex[0].charAt(0)==hex[0].charAt(1)&&hex[1].charAt(0)==hex[1].charAt(1)&&hex[2].charAt(0)==hex[2].charAt(1)){return hex[0].charAt(0)+hex[1].charAt(0)+hex[2].charAt(0);}return hex.join(\"\");}// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r,g,b,a,allow4Char){var hex=[pad2(mathRound(r).toString(16)),pad2(mathRound(g).toString(16)),pad2(mathRound(b).toString(16)),pad2(convertDecimalToHex(a))];// Return a 4 character hex if possible\nif(allow4Char&&hex[0].charAt(0)==hex[0].charAt(1)&&hex[1].charAt(0)==hex[1].charAt(1)&&hex[2].charAt(0)==hex[2].charAt(1)&&hex[3].charAt(0)==hex[3].charAt(1)){return hex[0].charAt(0)+hex[1].charAt(0)+hex[2].charAt(0)+hex[3].charAt(0);}return hex.join(\"\");}// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r,g,b,a){var hex=[pad2(convertDecimalToHex(a)),pad2(mathRound(r).toString(16)),pad2(mathRound(g).toString(16)),pad2(mathRound(b).toString(16))];return hex.join(\"\");}// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals=function(color1,color2){if(!color1||!color2){return false;}return tinycolor(color1).toRgbString()==tinycolor(color2).toRgbString();};tinycolor.random=function(){return tinycolor.fromRatio({r:mathRandom(),g:mathRandom(),b:mathRandom()});};// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\nfunction desaturate(color,amount){amount=amount===0?0:amount||10;var hsl=tinycolor(color).toHsl();hsl.s-=amount/100;hsl.s=clamp01(hsl.s);return tinycolor(hsl);}function saturate(color,amount){amount=amount===0?0:amount||10;var hsl=tinycolor(color).toHsl();hsl.s+=amount/100;hsl.s=clamp01(hsl.s);return tinycolor(hsl);}function greyscale(color){return tinycolor(color).desaturate(100);}function lighten(color,amount){amount=amount===0?0:amount||10;var hsl=tinycolor(color).toHsl();hsl.l+=amount/100;hsl.l=clamp01(hsl.l);return tinycolor(hsl);}function brighten(color,amount){amount=amount===0?0:amount||10;var rgb=tinycolor(color).toRgb();rgb.r=mathMax(0,mathMin(255,rgb.r-mathRound(255*-(amount/100))));rgb.g=mathMax(0,mathMin(255,rgb.g-mathRound(255*-(amount/100))));rgb.b=mathMax(0,mathMin(255,rgb.b-mathRound(255*-(amount/100))));return tinycolor(rgb);}function darken(color,amount){amount=amount===0?0:amount||10;var hsl=tinycolor(color).toHsl();hsl.l-=amount/100;hsl.l=clamp01(hsl.l);return tinycolor(hsl);}// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color,amount){var hsl=tinycolor(color).toHsl();var hue=(hsl.h+amount)%360;hsl.h=hue<0?360+hue:hue;return tinycolor(hsl);}// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\nfunction complement(color){var hsl=tinycolor(color).toHsl();hsl.h=(hsl.h+180)%360;return tinycolor(hsl);}function triad(color){var hsl=tinycolor(color).toHsl();var h=hsl.h;return[tinycolor(color),tinycolor({h:(h+120)%360,s:hsl.s,l:hsl.l}),tinycolor({h:(h+240)%360,s:hsl.s,l:hsl.l})];}function tetrad(color){var hsl=tinycolor(color).toHsl();var h=hsl.h;return[tinycolor(color),tinycolor({h:(h+90)%360,s:hsl.s,l:hsl.l}),tinycolor({h:(h+180)%360,s:hsl.s,l:hsl.l}),tinycolor({h:(h+270)%360,s:hsl.s,l:hsl.l})];}function splitcomplement(color){var hsl=tinycolor(color).toHsl();var h=hsl.h;return[tinycolor(color),tinycolor({h:(h+72)%360,s:hsl.s,l:hsl.l}),tinycolor({h:(h+216)%360,s:hsl.s,l:hsl.l})];}function analogous(color,results,slices){results=results||6;slices=slices||30;var hsl=tinycolor(color).toHsl();var part=360/slices;var ret=[tinycolor(color)];for(hsl.h=(hsl.h-(part*results>>1)+720)%360;--results;){hsl.h=(hsl.h+part)%360;ret.push(tinycolor(hsl));}return ret;}function monochromatic(color,results){results=results||6;var hsv=tinycolor(color).toHsv();var h=hsv.h,s=hsv.s,v=hsv.v;var ret=[];var modification=1/results;while(results--){ret.push(tinycolor({h:h,s:s,v:v}));v=(v+modification)%1;}return ret;}// Utility Functions\n// ---------------------\ntinycolor.mix=function(color1,color2,amount){amount=amount===0?0:amount||50;var rgb1=tinycolor(color1).toRgb();var rgb2=tinycolor(color2).toRgb();var p=amount/100;var rgba={r:(rgb2.r-rgb1.r)*p+rgb1.r,g:(rgb2.g-rgb1.g)*p+rgb1.g,b:(rgb2.b-rgb1.b)*p+rgb1.b,a:(rgb2.a-rgb1.a)*p+rgb1.a};return tinycolor(rgba);};// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability=function(color1,color2){var c1=tinycolor(color1);var c2=tinycolor(color2);return(Math.max(c1.getLuminance(),c2.getLuminance())+0.05)/(Math.min(c1.getLuminance(),c2.getLuminance())+0.05);};// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable=function(color1,color2,wcag2){var readability=tinycolor.readability(color1,color2);var wcag2Parms,out;out=false;wcag2Parms=validateWCAG2Parms(wcag2);switch(wcag2Parms.level+wcag2Parms.size){case\"AAsmall\":case\"AAAlarge\":out=readability>=4.5;break;case\"AAlarge\":out=readability>=3;break;case\"AAAsmall\":out=readability>=7;break;}return out;};// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable=function(baseColor,colorList,args){var bestColor=null;var bestScore=0;var readability;var includeFallbackColors,level,size;args=args||{};includeFallbackColors=args.includeFallbackColors;level=args.level;size=args.size;for(var i=0;i<colorList.length;i++){readability=tinycolor.readability(baseColor,colorList[i]);if(readability>bestScore){bestScore=readability;bestColor=tinycolor(colorList[i]);}}if(tinycolor.isReadable(baseColor,bestColor,{\"level\":level,\"size\":size})||!includeFallbackColors){return bestColor;}else{args.includeFallbackColors=false;return tinycolor.mostReadable(baseColor,[\"#fff\",\"#000\"],args);}};// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names=tinycolor.names={aliceblue:\"f0f8ff\",antiquewhite:\"faebd7\",aqua:\"0ff\",aquamarine:\"7fffd4\",azure:\"f0ffff\",beige:\"f5f5dc\",bisque:\"ffe4c4\",black:\"000\",blanchedalmond:\"ffebcd\",blue:\"00f\",blueviolet:\"8a2be2\",brown:\"a52a2a\",burlywood:\"deb887\",burntsienna:\"ea7e5d\",cadetblue:\"5f9ea0\",chartreuse:\"7fff00\",chocolate:\"d2691e\",coral:\"ff7f50\",cornflowerblue:\"6495ed\",cornsilk:\"fff8dc\",crimson:\"dc143c\",cyan:\"0ff\",darkblue:\"00008b\",darkcyan:\"008b8b\",darkgoldenrod:\"b8860b\",darkgray:\"a9a9a9\",darkgreen:\"006400\",darkgrey:\"a9a9a9\",darkkhaki:\"bdb76b\",darkmagenta:\"8b008b\",darkolivegreen:\"556b2f\",darkorange:\"ff8c00\",darkorchid:\"9932cc\",darkred:\"8b0000\",darksalmon:\"e9967a\",darkseagreen:\"8fbc8f\",darkslateblue:\"483d8b\",darkslategray:\"2f4f4f\",darkslategrey:\"2f4f4f\",darkturquoise:\"00ced1\",darkviolet:\"9400d3\",deeppink:\"ff1493\",deepskyblue:\"00bfff\",dimgray:\"696969\",dimgrey:\"696969\",dodgerblue:\"1e90ff\",firebrick:\"b22222\",floralwhite:\"fffaf0\",forestgreen:\"228b22\",fuchsia:\"f0f\",gainsboro:\"dcdcdc\",ghostwhite:\"f8f8ff\",gold:\"ffd700\",goldenrod:\"daa520\",gray:\"808080\",green:\"008000\",greenyellow:\"adff2f\",grey:\"808080\",honeydew:\"f0fff0\",hotpink:\"ff69b4\",indianred:\"cd5c5c\",indigo:\"4b0082\",ivory:\"fffff0\",khaki:\"f0e68c\",lavender:\"e6e6fa\",lavenderblush:\"fff0f5\",lawngreen:\"7cfc00\",lemonchiffon:\"fffacd\",lightblue:\"add8e6\",lightcoral:\"f08080\",lightcyan:\"e0ffff\",lightgoldenrodyellow:\"fafad2\",lightgray:\"d3d3d3\",lightgreen:\"90ee90\",lightgrey:\"d3d3d3\",lightpink:\"ffb6c1\",lightsalmon:\"ffa07a\",lightseagreen:\"20b2aa\",lightskyblue:\"87cefa\",lightslategray:\"789\",lightslategrey:\"789\",lightsteelblue:\"b0c4de\",lightyellow:\"ffffe0\",lime:\"0f0\",limegreen:\"32cd32\",linen:\"faf0e6\",magenta:\"f0f\",maroon:\"800000\",mediumaquamarine:\"66cdaa\",mediumblue:\"0000cd\",mediumorchid:\"ba55d3\",mediumpurple:\"9370db\",mediumseagreen:\"3cb371\",mediumslateblue:\"7b68ee\",mediumspringgreen:\"00fa9a\",mediumturquoise:\"48d1cc\",mediumvioletred:\"c71585\",midnightblue:\"191970\",mintcream:\"f5fffa\",mistyrose:\"ffe4e1\",moccasin:\"ffe4b5\",navajowhite:\"ffdead\",navy:\"000080\",oldlace:\"fdf5e6\",olive:\"808000\",olivedrab:\"6b8e23\",orange:\"ffa500\",orangered:\"ff4500\",orchid:\"da70d6\",palegoldenrod:\"eee8aa\",palegreen:\"98fb98\",paleturquoise:\"afeeee\",palevioletred:\"db7093\",papayawhip:\"ffefd5\",peachpuff:\"ffdab9\",peru:\"cd853f\",pink:\"ffc0cb\",plum:\"dda0dd\",powderblue:\"b0e0e6\",purple:\"800080\",rebeccapurple:\"663399\",red:\"f00\",rosybrown:\"bc8f8f\",royalblue:\"4169e1\",saddlebrown:\"8b4513\",salmon:\"fa8072\",sandybrown:\"f4a460\",seagreen:\"2e8b57\",seashell:\"fff5ee\",sienna:\"a0522d\",silver:\"c0c0c0\",skyblue:\"87ceeb\",slateblue:\"6a5acd\",slategray:\"708090\",slategrey:\"708090\",snow:\"fffafa\",springgreen:\"00ff7f\",steelblue:\"4682b4\",tan:\"d2b48c\",teal:\"008080\",thistle:\"d8bfd8\",tomato:\"ff6347\",turquoise:\"40e0d0\",violet:\"ee82ee\",wheat:\"f5deb3\",white:\"fff\",whitesmoke:\"f5f5f5\",yellow:\"ff0\",yellowgreen:\"9acd32\"};// Make it easy to access colors via `hexNames[hex]`\nvar hexNames=tinycolor.hexNames=flip(names);// Utilities\n// ---------\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o){var flipped={};for(var i in o){if(o.hasOwnProperty(i)){flipped[o[i]]=i;}}return flipped;}// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a){a=parseFloat(a);if(isNaN(a)||a<0||a>1){a=1;}return a;}// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n,max){if(isOnePointZero(n)){n=\"100%\";}var processPercent=isPercentage(n);n=mathMin(max,mathMax(0,parseFloat(n)));// Automatically convert percentage into number\nif(processPercent){n=parseInt(n*max,10)/100;}// Handle floating point rounding errors\nif(Math.abs(n-max)<0.000001){return 1;}// Convert into [0, 1] range if it isn't already\nreturn n%max/parseFloat(max);}// Force a number between 0 and 1\nfunction clamp01(val){return mathMin(1,mathMax(0,val));}// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val){return parseInt(val,16);}// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n){return typeof n==\"string\"&&n.indexOf('.')!=-1&&parseFloat(n)===1;}// Check to see if string passed in is a percentage\nfunction isPercentage(n){return typeof n===\"string\"&&n.indexOf('%')!=-1;}// Force a hex value to have 2 characters\nfunction pad2(c){return c.length==1?'0'+c:''+c;}// Replace a decimal with it's percentage value\nfunction convertToPercentage(n){if(n<=1){n=n*100+\"%\";}return n;}// Converts a decimal to a hex value\nfunction convertDecimalToHex(d){return Math.round(parseFloat(d)*255).toString(16);}// Converts a hex value to a decimal\nfunction convertHexToDecimal(h){return parseIntFromHex(h)/255;}var matchers=function(){// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER=\"[-\\\\+]?\\\\d+%?\";// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER=\"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nvar CSS_UNIT=\"(?:\"+CSS_NUMBER+\")|(?:\"+CSS_INTEGER+\")\";// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3=\"[\\\\s|\\\\(]+(\"+CSS_UNIT+\")[,|\\\\s]+(\"+CSS_UNIT+\")[,|\\\\s]+(\"+CSS_UNIT+\")\\\\s*\\\\)?\";var PERMISSIVE_MATCH4=\"[\\\\s|\\\\(]+(\"+CSS_UNIT+\")[,|\\\\s]+(\"+CSS_UNIT+\")[,|\\\\s]+(\"+CSS_UNIT+\")[,|\\\\s]+(\"+CSS_UNIT+\")\\\\s*\\\\)?\";return{CSS_UNIT:new RegExp(CSS_UNIT),rgb:new RegExp(\"rgb\"+PERMISSIVE_MATCH3),rgba:new RegExp(\"rgba\"+PERMISSIVE_MATCH4),hsl:new RegExp(\"hsl\"+PERMISSIVE_MATCH3),hsla:new RegExp(\"hsla\"+PERMISSIVE_MATCH4),hsv:new RegExp(\"hsv\"+PERMISSIVE_MATCH3),hsva:new RegExp(\"hsva\"+PERMISSIVE_MATCH4),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};}();// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color){return!!matchers.CSS_UNIT.exec(color);}// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color){color=color.replace(trimLeft,'').replace(trimRight,'').toLowerCase();var named=false;if(names[color]){color=names[color];named=true;}else if(color=='transparent'){return{r:0,g:0,b:0,a:0,format:\"name\"};}// Try to match string input using regular expressions.\n// Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n// Just return an object and let the conversion functions handle that.\n// This way the result will be the same whether the tinycolor is initialized with string or object.\nvar match;if(match=matchers.rgb.exec(color)){return{r:match[1],g:match[2],b:match[3]};}if(match=matchers.rgba.exec(color)){return{r:match[1],g:match[2],b:match[3],a:match[4]};}if(match=matchers.hsl.exec(color)){return{h:match[1],s:match[2],l:match[3]};}if(match=matchers.hsla.exec(color)){return{h:match[1],s:match[2],l:match[3],a:match[4]};}if(match=matchers.hsv.exec(color)){return{h:match[1],s:match[2],v:match[3]};}if(match=matchers.hsva.exec(color)){return{h:match[1],s:match[2],v:match[3],a:match[4]};}if(match=matchers.hex8.exec(color)){return{r:parseIntFromHex(match[1]),g:parseIntFromHex(match[2]),b:parseIntFromHex(match[3]),a:convertHexToDecimal(match[4]),format:named?\"name\":\"hex8\"};}if(match=matchers.hex6.exec(color)){return{r:parseIntFromHex(match[1]),g:parseIntFromHex(match[2]),b:parseIntFromHex(match[3]),format:named?\"name\":\"hex\"};}if(match=matchers.hex4.exec(color)){return{r:parseIntFromHex(match[1]+''+match[1]),g:parseIntFromHex(match[2]+''+match[2]),b:parseIntFromHex(match[3]+''+match[3]),a:convertHexToDecimal(match[4]+''+match[4]),format:named?\"name\":\"hex8\"};}if(match=matchers.hex3.exec(color)){return{r:parseIntFromHex(match[1]+''+match[1]),g:parseIntFromHex(match[2]+''+match[2]),b:parseIntFromHex(match[3]+''+match[3]),format:named?\"name\":\"hex\"};}return false;}function validateWCAG2Parms(parms){// return valid WCAG2 parms for isReadable.\n// If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\nvar level,size;parms=parms||{\"level\":\"AA\",\"size\":\"small\"};level=(parms.level||\"AA\").toUpperCase();size=(parms.size||\"small\").toLowerCase();if(level!==\"AA\"&&level!==\"AAA\"){level=\"AA\";}if(size!==\"small\"&&size!==\"large\"){size=\"small\";}return{\"level\":level,\"size\":size};}// Node: Export function\nif( true&&module.exports){module.exports=tinycolor;}// AMD/requirejs: Define the module\nelse if(true){!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return tinycolor;}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}// Browser: Expose to window\nelse{}})(Math);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueWNvbG9yMi90aW55Y29sb3IuanM/NjZjYiJdLCJuYW1lcyI6WyJNYXRoIiwidHJpbUxlZnQiLCJ0cmltUmlnaHQiLCJ0aW55Q291bnRlciIsIm1hdGhSb3VuZCIsInJvdW5kIiwibWF0aE1pbiIsIm1pbiIsIm1hdGhNYXgiLCJtYXgiLCJtYXRoUmFuZG9tIiwicmFuZG9tIiwidGlueWNvbG9yIiwiY29sb3IiLCJvcHRzIiwicmdiIiwiaW5wdXRUb1JHQiIsIl9vcmlnaW5hbElucHV0IiwiX3IiLCJyIiwiX2ciLCJnIiwiX2IiLCJiIiwiX2EiLCJhIiwiX3JvdW5kQSIsIl9mb3JtYXQiLCJmb3JtYXQiLCJfZ3JhZGllbnRUeXBlIiwiZ3JhZGllbnRUeXBlIiwiX29rIiwib2siLCJfdGNfaWQiLCJwcm90b3R5cGUiLCJpc0RhcmsiLCJnZXRCcmlnaHRuZXNzIiwiaXNMaWdodCIsImlzVmFsaWQiLCJnZXRPcmlnaW5hbElucHV0IiwiZ2V0Rm9ybWF0IiwiZ2V0QWxwaGEiLCJ0b1JnYiIsImdldEx1bWluYW5jZSIsIlJzUkdCIiwiR3NSR0IiLCJCc1JHQiIsIlIiLCJHIiwiQiIsInBvdyIsInNldEFscGhhIiwidmFsdWUiLCJib3VuZEFscGhhIiwidG9Ic3YiLCJoc3YiLCJyZ2JUb0hzdiIsImgiLCJzIiwidiIsInRvSHN2U3RyaW5nIiwidG9Ic2wiLCJoc2wiLCJyZ2JUb0hzbCIsImwiLCJ0b0hzbFN0cmluZyIsInRvSGV4IiwiYWxsb3czQ2hhciIsInJnYlRvSGV4IiwidG9IZXhTdHJpbmciLCJ0b0hleDgiLCJhbGxvdzRDaGFyIiwicmdiYVRvSGV4IiwidG9IZXg4U3RyaW5nIiwidG9SZ2JTdHJpbmciLCJ0b1BlcmNlbnRhZ2VSZ2IiLCJib3VuZDAxIiwidG9QZXJjZW50YWdlUmdiU3RyaW5nIiwidG9OYW1lIiwiaGV4TmFtZXMiLCJ0b0ZpbHRlciIsInNlY29uZENvbG9yIiwiaGV4OFN0cmluZyIsInJnYmFUb0FyZ2JIZXgiLCJzZWNvbmRIZXg4U3RyaW5nIiwidG9TdHJpbmciLCJmb3JtYXRTZXQiLCJmb3JtYXR0ZWRTdHJpbmciLCJoYXNBbHBoYSIsIm5lZWRzQWxwaGFGb3JtYXQiLCJjbG9uZSIsIl9hcHBseU1vZGlmaWNhdGlvbiIsImZuIiwiYXJncyIsImFwcGx5IiwiY29uY2F0Iiwic2xpY2UiLCJjYWxsIiwibGlnaHRlbiIsImFyZ3VtZW50cyIsImJyaWdodGVuIiwiZGFya2VuIiwiZGVzYXR1cmF0ZSIsInNhdHVyYXRlIiwiZ3JleXNjYWxlIiwic3BpbiIsIl9hcHBseUNvbWJpbmF0aW9uIiwiYW5hbG9nb3VzIiwiY29tcGxlbWVudCIsIm1vbm9jaHJvbWF0aWMiLCJzcGxpdGNvbXBsZW1lbnQiLCJ0cmlhZCIsInRldHJhZCIsImZyb21SYXRpbyIsIm5ld0NvbG9yIiwiaSIsImhhc093blByb3BlcnR5IiwiY29udmVydFRvUGVyY2VudGFnZSIsInN0cmluZ0lucHV0VG9PYmplY3QiLCJpc1ZhbGlkQ1NTVW5pdCIsInJnYlRvUmdiIiwiU3RyaW5nIiwic3Vic3RyIiwiaHN2VG9SZ2IiLCJoc2xUb1JnYiIsImQiLCJodWUycmdiIiwicCIsInEiLCJ0IiwiZmxvb3IiLCJmIiwibW9kIiwiaGV4IiwicGFkMiIsImNoYXJBdCIsImpvaW4iLCJjb252ZXJ0RGVjaW1hbFRvSGV4IiwiZXF1YWxzIiwiY29sb3IxIiwiY29sb3IyIiwiYW1vdW50IiwiY2xhbXAwMSIsImh1ZSIsInJlc3VsdHMiLCJzbGljZXMiLCJwYXJ0IiwicmV0IiwicHVzaCIsIm1vZGlmaWNhdGlvbiIsIm1peCIsInJnYjEiLCJyZ2IyIiwicmdiYSIsInJlYWRhYmlsaXR5IiwiYzEiLCJjMiIsImlzUmVhZGFibGUiLCJ3Y2FnMiIsIndjYWcyUGFybXMiLCJvdXQiLCJ2YWxpZGF0ZVdDQUcyUGFybXMiLCJsZXZlbCIsInNpemUiLCJtb3N0UmVhZGFibGUiLCJiYXNlQ29sb3IiLCJjb2xvckxpc3QiLCJiZXN0Q29sb3IiLCJiZXN0U2NvcmUiLCJpbmNsdWRlRmFsbGJhY2tDb2xvcnMiLCJsZW5ndGgiLCJuYW1lcyIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiYnVybnRzaWVubmEiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJmbGlwIiwibyIsImZsaXBwZWQiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJuIiwiaXNPbmVQb2ludFplcm8iLCJwcm9jZXNzUGVyY2VudCIsImlzUGVyY2VudGFnZSIsInBhcnNlSW50IiwiYWJzIiwidmFsIiwicGFyc2VJbnRGcm9tSGV4IiwiaW5kZXhPZiIsImMiLCJjb252ZXJ0SGV4VG9EZWNpbWFsIiwibWF0Y2hlcnMiLCJDU1NfSU5URUdFUiIsIkNTU19OVU1CRVIiLCJDU1NfVU5JVCIsIlBFUk1JU1NJVkVfTUFUQ0gzIiwiUEVSTUlTU0lWRV9NQVRDSDQiLCJSZWdFeHAiLCJoc2xhIiwiaHN2YSIsImhleDMiLCJoZXg2IiwiaGV4NCIsImhleDgiLCJleGVjIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwibmFtZWQiLCJtYXRjaCIsInBhcm1zIiwidG9VcHBlckNhc2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmaW5lIl0sIm1hcHBpbmdzIjoib2dCQUFBO0FBQ0E7QUFDQTtBQUVBLENBQUMsU0FBU0EsSUFBVCxDQUFlLENBRWhCLEdBQUlDLFNBQVEsQ0FBRyxNQUFmLENBQ0lDLFNBQVMsQ0FBRyxNQURoQixDQUVJQyxXQUFXLENBQUcsQ0FGbEIsQ0FHSUMsU0FBUyxDQUFHSixJQUFJLENBQUNLLEtBSHJCLENBSUlDLE9BQU8sQ0FBR04sSUFBSSxDQUFDTyxHQUpuQixDQUtJQyxPQUFPLENBQUdSLElBQUksQ0FBQ1MsR0FMbkIsQ0FNSUMsVUFBVSxDQUFHVixJQUFJLENBQUNXLE1BTnRCLENBUUEsUUFBU0MsVUFBVCxDQUFvQkMsS0FBcEIsQ0FBMkJDLElBQTNCLENBQWlDLENBRTdCRCxLQUFLLENBQUlBLEtBQUQsQ0FBVUEsS0FBVixDQUFrQixFQUExQixDQUNBQyxJQUFJLENBQUdBLElBQUksRUFBSSxFQUFmLENBRUE7QUFDQSxHQUFJRCxLQUFLLFdBQVlELFVBQXJCLENBQWdDLENBQzdCLE1BQU9DLE1BQVAsQ0FDRixDQUNEO0FBQ0EsR0FBSSxFQUFFLGVBQWdCRCxVQUFsQixDQUFKLENBQWtDLENBQzlCLE1BQU8sSUFBSUEsVUFBSixDQUFjQyxLQUFkLENBQXFCQyxJQUFyQixDQUFQLENBQ0gsQ0FFRCxHQUFJQyxJQUFHLENBQUdDLFVBQVUsQ0FBQ0gsS0FBRCxDQUFwQixDQUNBLEtBQUtJLGNBQUwsQ0FBc0JKLEtBQXRCLENBQ0EsS0FBS0ssRUFBTCxDQUFVSCxHQUFHLENBQUNJLENBRGQsQ0FFQSxLQUFLQyxFQUFMLENBQVVMLEdBQUcsQ0FBQ00sQ0FGZCxDQUdBLEtBQUtDLEVBQUwsQ0FBVVAsR0FBRyxDQUFDUSxDQUhkLENBSUEsS0FBS0MsRUFBTCxDQUFVVCxHQUFHLENBQUNVLENBSmQsQ0FLQSxLQUFLQyxPQUFMLENBQWV0QixTQUFTLENBQUMsSUFBSSxLQUFLb0IsRUFBVixDQUFULENBQXlCLEdBTHhDLENBTUEsS0FBS0csT0FBTCxDQUFlYixJQUFJLENBQUNjLE1BQUwsRUFBZWIsR0FBRyxDQUFDYSxNQU5sQyxDQU9BLEtBQUtDLGFBQUwsQ0FBcUJmLElBQUksQ0FBQ2dCLFlBQTFCLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFJLEtBQUtaLEVBQUwsQ0FBVSxDQUFkLENBQWlCLENBQUUsS0FBS0EsRUFBTCxDQUFVZCxTQUFTLENBQUMsS0FBS2MsRUFBTixDQUFuQixDQUErQixDQUNsRCxHQUFJLEtBQUtFLEVBQUwsQ0FBVSxDQUFkLENBQWlCLENBQUUsS0FBS0EsRUFBTCxDQUFVaEIsU0FBUyxDQUFDLEtBQUtnQixFQUFOLENBQW5CLENBQStCLENBQ2xELEdBQUksS0FBS0UsRUFBTCxDQUFVLENBQWQsQ0FBaUIsQ0FBRSxLQUFLQSxFQUFMLENBQVVsQixTQUFTLENBQUMsS0FBS2tCLEVBQU4sQ0FBbkIsQ0FBK0IsQ0FFbEQsS0FBS1MsR0FBTCxDQUFXaEIsR0FBRyxDQUFDaUIsRUFBZixDQUNBLEtBQUtDLE1BQUwsQ0FBYzlCLFdBQVcsRUFBekIsQ0FDSCxDQUVEUyxTQUFTLENBQUNzQixTQUFWLENBQXNCLENBQ2xCQyxNQUFNLENBQUUsVUFBVyxDQUNmLE1BQU8sTUFBS0MsYUFBTCxHQUF1QixHQUE5QixDQUNILENBSGlCLENBSWxCQyxPQUFPLENBQUUsVUFBVyxDQUNoQixNQUFPLENBQUMsS0FBS0YsTUFBTCxFQUFSLENBQ0gsQ0FOaUIsQ0FPbEJHLE9BQU8sQ0FBRSxVQUFXLENBQ2hCLE1BQU8sTUFBS1AsR0FBWixDQUNILENBVGlCLENBVWxCUSxnQkFBZ0IsQ0FBRSxVQUFXLENBQzNCLE1BQU8sTUFBS3RCLGNBQVosQ0FDRCxDQVppQixDQWFsQnVCLFNBQVMsQ0FBRSxVQUFXLENBQ2xCLE1BQU8sTUFBS2IsT0FBWixDQUNILENBZmlCLENBZ0JsQmMsUUFBUSxDQUFFLFVBQVcsQ0FDakIsTUFBTyxNQUFLakIsRUFBWixDQUNILENBbEJpQixDQW1CbEJZLGFBQWEsQ0FBRSxVQUFXLENBQ3RCO0FBQ0EsR0FBSXJCLElBQUcsQ0FBRyxLQUFLMkIsS0FBTCxFQUFWLENBQ0EsTUFBTyxDQUFDM0IsR0FBRyxDQUFDSSxDQUFKLENBQVEsR0FBUixDQUFjSixHQUFHLENBQUNNLENBQUosQ0FBUSxHQUF0QixDQUE0Qk4sR0FBRyxDQUFDUSxDQUFKLENBQVEsR0FBckMsRUFBNEMsSUFBbkQsQ0FDSCxDQXZCaUIsQ0F3QmxCb0IsWUFBWSxDQUFFLFVBQVcsQ0FDckI7QUFDQSxHQUFJNUIsSUFBRyxDQUFHLEtBQUsyQixLQUFMLEVBQVYsQ0FDQSxHQUFJRSxNQUFKLENBQVdDLEtBQVgsQ0FBa0JDLEtBQWxCLENBQXlCQyxDQUF6QixDQUE0QkMsQ0FBNUIsQ0FBK0JDLENBQS9CLENBQ0FMLEtBQUssQ0FBRzdCLEdBQUcsQ0FBQ0ksQ0FBSixDQUFNLEdBQWQsQ0FDQTBCLEtBQUssQ0FBRzlCLEdBQUcsQ0FBQ00sQ0FBSixDQUFNLEdBQWQsQ0FDQXlCLEtBQUssQ0FBRy9CLEdBQUcsQ0FBQ1EsQ0FBSixDQUFNLEdBQWQsQ0FFQSxHQUFJcUIsS0FBSyxFQUFJLE9BQWIsQ0FBc0IsQ0FBQ0csQ0FBQyxDQUFHSCxLQUFLLENBQUcsS0FBWixDQUFtQixDQUExQyxJQUFnRCxDQUFDRyxDQUFDLENBQUcvQyxJQUFJLENBQUNrRCxHQUFMLENBQVUsQ0FBQ04sS0FBSyxDQUFHLEtBQVQsRUFBa0IsS0FBNUIsQ0FBb0MsR0FBcEMsQ0FBSixDQUE4QyxDQUMvRixHQUFJQyxLQUFLLEVBQUksT0FBYixDQUFzQixDQUFDRyxDQUFDLENBQUdILEtBQUssQ0FBRyxLQUFaLENBQW1CLENBQTFDLElBQWdELENBQUNHLENBQUMsQ0FBR2hELElBQUksQ0FBQ2tELEdBQUwsQ0FBVSxDQUFDTCxLQUFLLENBQUcsS0FBVCxFQUFrQixLQUE1QixDQUFvQyxHQUFwQyxDQUFKLENBQThDLENBQy9GLEdBQUlDLEtBQUssRUFBSSxPQUFiLENBQXNCLENBQUNHLENBQUMsQ0FBR0gsS0FBSyxDQUFHLEtBQVosQ0FBbUIsQ0FBMUMsSUFBZ0QsQ0FBQ0csQ0FBQyxDQUFHakQsSUFBSSxDQUFDa0QsR0FBTCxDQUFVLENBQUNKLEtBQUssQ0FBRyxLQUFULEVBQWtCLEtBQTVCLENBQW9DLEdBQXBDLENBQUosQ0FBOEMsQ0FDL0YsTUFBUSxRQUFTQyxDQUFWLENBQWdCLE9BQVNDLENBQXpCLENBQStCLE9BQVNDLENBQS9DLENBQ0gsQ0FwQ2lCLENBcUNsQkUsUUFBUSxDQUFFLFNBQVNDLEtBQVQsQ0FBZ0IsQ0FDdEIsS0FBSzVCLEVBQUwsQ0FBVTZCLFVBQVUsQ0FBQ0QsS0FBRCxDQUFwQixDQUNBLEtBQUsxQixPQUFMLENBQWV0QixTQUFTLENBQUMsSUFBSSxLQUFLb0IsRUFBVixDQUFULENBQXlCLEdBQXhDLENBQ0EsTUFBTyxLQUFQLENBQ0gsQ0F6Q2lCLENBMENsQjhCLEtBQUssQ0FBRSxVQUFXLENBQ2QsR0FBSUMsSUFBRyxDQUFHQyxRQUFRLENBQUMsS0FBS3RDLEVBQU4sQ0FBVSxLQUFLRSxFQUFmLENBQW1CLEtBQUtFLEVBQXhCLENBQWxCLENBQ0EsTUFBTyxDQUFFbUMsQ0FBQyxDQUFFRixHQUFHLENBQUNFLENBQUosQ0FBUSxHQUFiLENBQWtCQyxDQUFDLENBQUVILEdBQUcsQ0FBQ0csQ0FBekIsQ0FBNEJDLENBQUMsQ0FBRUosR0FBRyxDQUFDSSxDQUFuQyxDQUFzQ2xDLENBQUMsQ0FBRSxLQUFLRCxFQUE5QyxDQUFQLENBQ0gsQ0E3Q2lCLENBOENsQm9DLFdBQVcsQ0FBRSxVQUFXLENBQ3BCLEdBQUlMLElBQUcsQ0FBR0MsUUFBUSxDQUFDLEtBQUt0QyxFQUFOLENBQVUsS0FBS0UsRUFBZixDQUFtQixLQUFLRSxFQUF4QixDQUFsQixDQUNBLEdBQUltQyxFQUFDLENBQUdyRCxTQUFTLENBQUNtRCxHQUFHLENBQUNFLENBQUosQ0FBUSxHQUFULENBQWpCLENBQWdDQyxDQUFDLENBQUd0RCxTQUFTLENBQUNtRCxHQUFHLENBQUNHLENBQUosQ0FBUSxHQUFULENBQTdDLENBQTREQyxDQUFDLENBQUd2RCxTQUFTLENBQUNtRCxHQUFHLENBQUNJLENBQUosQ0FBUSxHQUFULENBQXpFLENBQ0EsTUFBUSxNQUFLbkMsRUFBTCxFQUFXLENBQVosQ0FDTCxPQUFVaUMsQ0FBVixDQUFjLElBQWQsQ0FBcUJDLENBQXJCLENBQXlCLEtBQXpCLENBQWlDQyxDQUFqQyxDQUFxQyxJQURoQyxDQUVMLFFBQVVGLENBQVYsQ0FBYyxJQUFkLENBQXFCQyxDQUFyQixDQUF5QixLQUF6QixDQUFpQ0MsQ0FBakMsQ0FBcUMsS0FBckMsQ0FBNEMsS0FBS2pDLE9BQWpELENBQTJELEdBRjdELENBR0gsQ0FwRGlCLENBcURsQm1DLEtBQUssQ0FBRSxVQUFXLENBQ2QsR0FBSUMsSUFBRyxDQUFHQyxRQUFRLENBQUMsS0FBSzdDLEVBQU4sQ0FBVSxLQUFLRSxFQUFmLENBQW1CLEtBQUtFLEVBQXhCLENBQWxCLENBQ0EsTUFBTyxDQUFFbUMsQ0FBQyxDQUFFSyxHQUFHLENBQUNMLENBQUosQ0FBUSxHQUFiLENBQWtCQyxDQUFDLENBQUVJLEdBQUcsQ0FBQ0osQ0FBekIsQ0FBNEJNLENBQUMsQ0FBRUYsR0FBRyxDQUFDRSxDQUFuQyxDQUFzQ3ZDLENBQUMsQ0FBRSxLQUFLRCxFQUE5QyxDQUFQLENBQ0gsQ0F4RGlCLENBeURsQnlDLFdBQVcsQ0FBRSxVQUFXLENBQ3BCLEdBQUlILElBQUcsQ0FBR0MsUUFBUSxDQUFDLEtBQUs3QyxFQUFOLENBQVUsS0FBS0UsRUFBZixDQUFtQixLQUFLRSxFQUF4QixDQUFsQixDQUNBLEdBQUltQyxFQUFDLENBQUdyRCxTQUFTLENBQUMwRCxHQUFHLENBQUNMLENBQUosQ0FBUSxHQUFULENBQWpCLENBQWdDQyxDQUFDLENBQUd0RCxTQUFTLENBQUMwRCxHQUFHLENBQUNKLENBQUosQ0FBUSxHQUFULENBQTdDLENBQTRETSxDQUFDLENBQUc1RCxTQUFTLENBQUMwRCxHQUFHLENBQUNFLENBQUosQ0FBUSxHQUFULENBQXpFLENBQ0EsTUFBUSxNQUFLeEMsRUFBTCxFQUFXLENBQVosQ0FDTCxPQUFVaUMsQ0FBVixDQUFjLElBQWQsQ0FBcUJDLENBQXJCLENBQXlCLEtBQXpCLENBQWlDTSxDQUFqQyxDQUFxQyxJQURoQyxDQUVMLFFBQVVQLENBQVYsQ0FBYyxJQUFkLENBQXFCQyxDQUFyQixDQUF5QixLQUF6QixDQUFpQ00sQ0FBakMsQ0FBcUMsS0FBckMsQ0FBNEMsS0FBS3RDLE9BQWpELENBQTJELEdBRjdELENBR0gsQ0EvRGlCLENBZ0VsQndDLEtBQUssQ0FBRSxTQUFTQyxVQUFULENBQXFCLENBQ3hCLE1BQU9DLFNBQVEsQ0FBQyxLQUFLbEQsRUFBTixDQUFVLEtBQUtFLEVBQWYsQ0FBbUIsS0FBS0UsRUFBeEIsQ0FBNEI2QyxVQUE1QixDQUFmLENBQ0gsQ0FsRWlCLENBbUVsQkUsV0FBVyxDQUFFLFNBQVNGLFVBQVQsQ0FBcUIsQ0FDOUIsTUFBTyxJQUFNLEtBQUtELEtBQUwsQ0FBV0MsVUFBWCxDQUFiLENBQ0gsQ0FyRWlCLENBc0VsQkcsTUFBTSxDQUFFLFNBQVNDLFVBQVQsQ0FBcUIsQ0FDekIsTUFBT0MsVUFBUyxDQUFDLEtBQUt0RCxFQUFOLENBQVUsS0FBS0UsRUFBZixDQUFtQixLQUFLRSxFQUF4QixDQUE0QixLQUFLRSxFQUFqQyxDQUFxQytDLFVBQXJDLENBQWhCLENBQ0gsQ0F4RWlCLENBeUVsQkUsWUFBWSxDQUFFLFNBQVNGLFVBQVQsQ0FBcUIsQ0FDL0IsTUFBTyxJQUFNLEtBQUtELE1BQUwsQ0FBWUMsVUFBWixDQUFiLENBQ0gsQ0EzRWlCLENBNEVsQjdCLEtBQUssQ0FBRSxVQUFXLENBQ2QsTUFBTyxDQUFFdkIsQ0FBQyxDQUFFZixTQUFTLENBQUMsS0FBS2MsRUFBTixDQUFkLENBQXlCRyxDQUFDLENBQUVqQixTQUFTLENBQUMsS0FBS2dCLEVBQU4sQ0FBckMsQ0FBZ0RHLENBQUMsQ0FBRW5CLFNBQVMsQ0FBQyxLQUFLa0IsRUFBTixDQUE1RCxDQUF1RUcsQ0FBQyxDQUFFLEtBQUtELEVBQS9FLENBQVAsQ0FDSCxDQTlFaUIsQ0ErRWxCa0QsV0FBVyxDQUFFLFVBQVcsQ0FDcEIsTUFBUSxNQUFLbEQsRUFBTCxFQUFXLENBQVosQ0FDTCxPQUFVcEIsU0FBUyxDQUFDLEtBQUtjLEVBQU4sQ0FBbkIsQ0FBK0IsSUFBL0IsQ0FBc0NkLFNBQVMsQ0FBQyxLQUFLZ0IsRUFBTixDQUEvQyxDQUEyRCxJQUEzRCxDQUFrRWhCLFNBQVMsQ0FBQyxLQUFLa0IsRUFBTixDQUEzRSxDQUF1RixHQURsRixDQUVMLFFBQVVsQixTQUFTLENBQUMsS0FBS2MsRUFBTixDQUFuQixDQUErQixJQUEvQixDQUFzQ2QsU0FBUyxDQUFDLEtBQUtnQixFQUFOLENBQS9DLENBQTJELElBQTNELENBQWtFaEIsU0FBUyxDQUFDLEtBQUtrQixFQUFOLENBQTNFLENBQXVGLElBQXZGLENBQThGLEtBQUtJLE9BQW5HLENBQTZHLEdBRi9HLENBR0gsQ0FuRmlCLENBb0ZsQmlELGVBQWUsQ0FBRSxVQUFXLENBQ3hCLE1BQU8sQ0FBRXhELENBQUMsQ0FBRWYsU0FBUyxDQUFDd0UsT0FBTyxDQUFDLEtBQUsxRCxFQUFOLENBQVUsR0FBVixDQUFQLENBQXdCLEdBQXpCLENBQVQsQ0FBeUMsR0FBOUMsQ0FBbURHLENBQUMsQ0FBRWpCLFNBQVMsQ0FBQ3dFLE9BQU8sQ0FBQyxLQUFLeEQsRUFBTixDQUFVLEdBQVYsQ0FBUCxDQUF3QixHQUF6QixDQUFULENBQXlDLEdBQS9GLENBQW9HRyxDQUFDLENBQUVuQixTQUFTLENBQUN3RSxPQUFPLENBQUMsS0FBS3RELEVBQU4sQ0FBVSxHQUFWLENBQVAsQ0FBd0IsR0FBekIsQ0FBVCxDQUF5QyxHQUFoSixDQUFxSkcsQ0FBQyxDQUFFLEtBQUtELEVBQTdKLENBQVAsQ0FDSCxDQXRGaUIsQ0F1RmxCcUQscUJBQXFCLENBQUUsVUFBVyxDQUM5QixNQUFRLE1BQUtyRCxFQUFMLEVBQVcsQ0FBWixDQUNMLE9BQVVwQixTQUFTLENBQUN3RSxPQUFPLENBQUMsS0FBSzFELEVBQU4sQ0FBVSxHQUFWLENBQVAsQ0FBd0IsR0FBekIsQ0FBbkIsQ0FBbUQsS0FBbkQsQ0FBMkRkLFNBQVMsQ0FBQ3dFLE9BQU8sQ0FBQyxLQUFLeEQsRUFBTixDQUFVLEdBQVYsQ0FBUCxDQUF3QixHQUF6QixDQUFwRSxDQUFvRyxLQUFwRyxDQUE0R2hCLFNBQVMsQ0FBQ3dFLE9BQU8sQ0FBQyxLQUFLdEQsRUFBTixDQUFVLEdBQVYsQ0FBUCxDQUF3QixHQUF6QixDQUFySCxDQUFxSixJQURoSixDQUVMLFFBQVVsQixTQUFTLENBQUN3RSxPQUFPLENBQUMsS0FBSzFELEVBQU4sQ0FBVSxHQUFWLENBQVAsQ0FBd0IsR0FBekIsQ0FBbkIsQ0FBbUQsS0FBbkQsQ0FBMkRkLFNBQVMsQ0FBQ3dFLE9BQU8sQ0FBQyxLQUFLeEQsRUFBTixDQUFVLEdBQVYsQ0FBUCxDQUF3QixHQUF6QixDQUFwRSxDQUFvRyxLQUFwRyxDQUE0R2hCLFNBQVMsQ0FBQ3dFLE9BQU8sQ0FBQyxLQUFLdEQsRUFBTixDQUFVLEdBQVYsQ0FBUCxDQUF3QixHQUF6QixDQUFySCxDQUFxSixLQUFySixDQUE2SixLQUFLSSxPQUFsSyxDQUE0SyxHQUY5SyxDQUdILENBM0ZpQixDQTRGbEJvRCxNQUFNLENBQUUsVUFBVyxDQUNmLEdBQUksS0FBS3RELEVBQUwsR0FBWSxDQUFoQixDQUFtQixDQUNmLE1BQU8sYUFBUCxDQUNILENBRUQsR0FBSSxLQUFLQSxFQUFMLENBQVUsQ0FBZCxDQUFpQixDQUNiLE1BQU8sTUFBUCxDQUNILENBRUQsTUFBT3VELFNBQVEsQ0FBQ1gsUUFBUSxDQUFDLEtBQUtsRCxFQUFOLENBQVUsS0FBS0UsRUFBZixDQUFtQixLQUFLRSxFQUF4QixDQUE0QixJQUE1QixDQUFULENBQVIsRUFBdUQsS0FBOUQsQ0FDSCxDQXRHaUIsQ0F1R2xCMEQsUUFBUSxDQUFFLFNBQVNDLFdBQVQsQ0FBc0IsQ0FDNUIsR0FBSUMsV0FBVSxDQUFHLElBQU1DLGFBQWEsQ0FBQyxLQUFLakUsRUFBTixDQUFVLEtBQUtFLEVBQWYsQ0FBbUIsS0FBS0UsRUFBeEIsQ0FBNEIsS0FBS0UsRUFBakMsQ0FBcEMsQ0FDQSxHQUFJNEQsaUJBQWdCLENBQUdGLFVBQXZCLENBQ0EsR0FBSXBELGFBQVksQ0FBRyxLQUFLRCxhQUFMLENBQXFCLG9CQUFyQixDQUE0QyxFQUEvRCxDQUVBLEdBQUlvRCxXQUFKLENBQWlCLENBQ2IsR0FBSXZCLEVBQUMsQ0FBRzlDLFNBQVMsQ0FBQ3FFLFdBQUQsQ0FBakIsQ0FDQUcsZ0JBQWdCLENBQUcsSUFBTUQsYUFBYSxDQUFDekIsQ0FBQyxDQUFDeEMsRUFBSCxDQUFPd0MsQ0FBQyxDQUFDdEMsRUFBVCxDQUFhc0MsQ0FBQyxDQUFDcEMsRUFBZixDQUFtQm9DLENBQUMsQ0FBQ2xDLEVBQXJCLENBQXRDLENBQ0gsQ0FFRCxNQUFPLDhDQUE4Q00sWUFBOUMsQ0FBMkQsZ0JBQTNELENBQTRFb0QsVUFBNUUsQ0FBdUYsZUFBdkYsQ0FBdUdFLGdCQUF2RyxDQUF3SCxHQUEvSCxDQUNILENBbEhpQixDQW1IbEJDLFFBQVEsQ0FBRSxTQUFTekQsTUFBVCxDQUFpQixDQUN2QixHQUFJMEQsVUFBUyxDQUFHLENBQUMsQ0FBQzFELE1BQWxCLENBQ0FBLE1BQU0sQ0FBR0EsTUFBTSxFQUFJLEtBQUtELE9BQXhCLENBRUEsR0FBSTRELGdCQUFlLENBQUcsS0FBdEIsQ0FDQSxHQUFJQyxTQUFRLENBQUcsS0FBS2hFLEVBQUwsQ0FBVSxDQUFWLEVBQWUsS0FBS0EsRUFBTCxFQUFXLENBQXpDLENBQ0EsR0FBSWlFLGlCQUFnQixDQUFHLENBQUNILFNBQUQsRUFBY0UsUUFBZCxHQUEyQjVELE1BQU0sR0FBSyxLQUFYLEVBQW9CQSxNQUFNLEdBQUssTUFBL0IsRUFBeUNBLE1BQU0sR0FBSyxNQUFwRCxFQUE4REEsTUFBTSxHQUFLLE1BQXpFLEVBQW1GQSxNQUFNLEdBQUssTUFBOUYsRUFBd0dBLE1BQU0sR0FBSyxNQUE5SSxDQUF2QixDQUVBLEdBQUk2RCxnQkFBSixDQUFzQixDQUNsQjtBQUNBO0FBQ0EsR0FBSTdELE1BQU0sR0FBSyxNQUFYLEVBQXFCLEtBQUtKLEVBQUwsR0FBWSxDQUFyQyxDQUF3QyxDQUNwQyxNQUFPLE1BQUtzRCxNQUFMLEVBQVAsQ0FDSCxDQUNELE1BQU8sTUFBS0osV0FBTCxFQUFQLENBQ0gsQ0FDRCxHQUFJOUMsTUFBTSxHQUFLLEtBQWYsQ0FBc0IsQ0FDbEIyRCxlQUFlLENBQUcsS0FBS2IsV0FBTCxFQUFsQixDQUNILENBQ0QsR0FBSTlDLE1BQU0sR0FBSyxNQUFmLENBQXVCLENBQ25CMkQsZUFBZSxDQUFHLEtBQUtWLHFCQUFMLEVBQWxCLENBQ0gsQ0FDRCxHQUFJakQsTUFBTSxHQUFLLEtBQVgsRUFBb0JBLE1BQU0sR0FBSyxNQUFuQyxDQUEyQyxDQUN2QzJELGVBQWUsQ0FBRyxLQUFLbEIsV0FBTCxFQUFsQixDQUNILENBQ0QsR0FBSXpDLE1BQU0sR0FBSyxNQUFmLENBQXVCLENBQ25CMkQsZUFBZSxDQUFHLEtBQUtsQixXQUFMLENBQWlCLElBQWpCLENBQWxCLENBQ0gsQ0FDRCxHQUFJekMsTUFBTSxHQUFLLE1BQWYsQ0FBdUIsQ0FDbkIyRCxlQUFlLENBQUcsS0FBS2QsWUFBTCxDQUFrQixJQUFsQixDQUFsQixDQUNILENBQ0QsR0FBSTdDLE1BQU0sR0FBSyxNQUFmLENBQXVCLENBQ25CMkQsZUFBZSxDQUFHLEtBQUtkLFlBQUwsRUFBbEIsQ0FDSCxDQUNELEdBQUk3QyxNQUFNLEdBQUssTUFBZixDQUF1QixDQUNuQjJELGVBQWUsQ0FBRyxLQUFLVCxNQUFMLEVBQWxCLENBQ0gsQ0FDRCxHQUFJbEQsTUFBTSxHQUFLLEtBQWYsQ0FBc0IsQ0FDbEIyRCxlQUFlLENBQUcsS0FBS3RCLFdBQUwsRUFBbEIsQ0FDSCxDQUNELEdBQUlyQyxNQUFNLEdBQUssS0FBZixDQUFzQixDQUNsQjJELGVBQWUsQ0FBRyxLQUFLM0IsV0FBTCxFQUFsQixDQUNILENBRUQsTUFBTzJCLGdCQUFlLEVBQUksS0FBS2xCLFdBQUwsRUFBMUIsQ0FDSCxDQWhLaUIsQ0FpS2xCcUIsS0FBSyxDQUFFLFVBQVcsQ0FDZCxNQUFPOUUsVUFBUyxDQUFDLEtBQUt5RSxRQUFMLEVBQUQsQ0FBaEIsQ0FDSCxDQW5LaUIsQ0FxS2xCTSxrQkFBa0IsQ0FBRSxTQUFTQyxFQUFULENBQWFDLElBQWIsQ0FBbUIsQ0FDbkMsR0FBSWhGLE1BQUssQ0FBRytFLEVBQUUsQ0FBQ0UsS0FBSCxDQUFTLElBQVQsQ0FBZSxDQUFDLElBQUQsRUFBT0MsTUFBUCxDQUFjLEdBQUdDLEtBQUgsQ0FBU0MsSUFBVCxDQUFjSixJQUFkLENBQWQsQ0FBZixDQUFaLENBQ0EsS0FBSzNFLEVBQUwsQ0FBVUwsS0FBSyxDQUFDSyxFQUFoQixDQUNBLEtBQUtFLEVBQUwsQ0FBVVAsS0FBSyxDQUFDTyxFQUFoQixDQUNBLEtBQUtFLEVBQUwsQ0FBVVQsS0FBSyxDQUFDUyxFQUFoQixDQUNBLEtBQUs2QixRQUFMLENBQWN0QyxLQUFLLENBQUNXLEVBQXBCLEVBQ0EsTUFBTyxLQUFQLENBQ0gsQ0E1S2lCLENBNktsQjBFLE9BQU8sQ0FBRSxVQUFXLENBQ2hCLE1BQU8sTUFBS1Asa0JBQUwsQ0FBd0JPLE9BQXhCLENBQWlDQyxTQUFqQyxDQUFQLENBQ0gsQ0EvS2lCLENBZ0xsQkMsUUFBUSxDQUFFLFVBQVcsQ0FDakIsTUFBTyxNQUFLVCxrQkFBTCxDQUF3QlMsUUFBeEIsQ0FBa0NELFNBQWxDLENBQVAsQ0FDSCxDQWxMaUIsQ0FtTGxCRSxNQUFNLENBQUUsVUFBVyxDQUNmLE1BQU8sTUFBS1Ysa0JBQUwsQ0FBd0JVLE1BQXhCLENBQWdDRixTQUFoQyxDQUFQLENBQ0gsQ0FyTGlCLENBc0xsQkcsVUFBVSxDQUFFLFVBQVcsQ0FDbkIsTUFBTyxNQUFLWCxrQkFBTCxDQUF3QlcsVUFBeEIsQ0FBb0NILFNBQXBDLENBQVAsQ0FDSCxDQXhMaUIsQ0F5TGxCSSxRQUFRLENBQUUsVUFBVyxDQUNqQixNQUFPLE1BQUtaLGtCQUFMLENBQXdCWSxRQUF4QixDQUFrQ0osU0FBbEMsQ0FBUCxDQUNILENBM0xpQixDQTRMbEJLLFNBQVMsQ0FBRSxVQUFXLENBQ2xCLE1BQU8sTUFBS2Isa0JBQUwsQ0FBd0JhLFNBQXhCLENBQW1DTCxTQUFuQyxDQUFQLENBQ0gsQ0E5TGlCLENBK0xsQk0sSUFBSSxDQUFFLFVBQVcsQ0FDYixNQUFPLE1BQUtkLGtCQUFMLENBQXdCYyxJQUF4QixDQUE4Qk4sU0FBOUIsQ0FBUCxDQUNILENBak1pQixDQW1NbEJPLGlCQUFpQixDQUFFLFNBQVNkLEVBQVQsQ0FBYUMsSUFBYixDQUFtQixDQUNsQyxNQUFPRCxHQUFFLENBQUNFLEtBQUgsQ0FBUyxJQUFULENBQWUsQ0FBQyxJQUFELEVBQU9DLE1BQVAsQ0FBYyxHQUFHQyxLQUFILENBQVNDLElBQVQsQ0FBY0osSUFBZCxDQUFkLENBQWYsQ0FBUCxDQUNILENBck1pQixDQXNNbEJjLFNBQVMsQ0FBRSxVQUFXLENBQ2xCLE1BQU8sTUFBS0QsaUJBQUwsQ0FBdUJDLFNBQXZCLENBQWtDUixTQUFsQyxDQUFQLENBQ0gsQ0F4TWlCLENBeU1sQlMsVUFBVSxDQUFFLFVBQVcsQ0FDbkIsTUFBTyxNQUFLRixpQkFBTCxDQUF1QkUsVUFBdkIsQ0FBbUNULFNBQW5DLENBQVAsQ0FDSCxDQTNNaUIsQ0E0TWxCVSxhQUFhLENBQUUsVUFBVyxDQUN0QixNQUFPLE1BQUtILGlCQUFMLENBQXVCRyxhQUF2QixDQUFzQ1YsU0FBdEMsQ0FBUCxDQUNILENBOU1pQixDQStNbEJXLGVBQWUsQ0FBRSxVQUFXLENBQ3hCLE1BQU8sTUFBS0osaUJBQUwsQ0FBdUJJLGVBQXZCLENBQXdDWCxTQUF4QyxDQUFQLENBQ0gsQ0FqTmlCLENBa05sQlksS0FBSyxDQUFFLFVBQVcsQ0FDZCxNQUFPLE1BQUtMLGlCQUFMLENBQXVCSyxLQUF2QixDQUE4QlosU0FBOUIsQ0FBUCxDQUNILENBcE5pQixDQXFObEJhLE1BQU0sQ0FBRSxVQUFXLENBQ2YsTUFBTyxNQUFLTixpQkFBTCxDQUF1Qk0sTUFBdkIsQ0FBK0JiLFNBQS9CLENBQVAsQ0FDSCxDQXZOaUIsQ0FBdEIsQ0EwTkE7QUFDQTtBQUNBdkYsU0FBUyxDQUFDcUcsU0FBVixDQUFzQixTQUFTcEcsS0FBVCxDQUFnQkMsSUFBaEIsQ0FBc0IsQ0FDeEMsR0FBSSxNQUFPRCxNQUFQLEVBQWdCLFFBQXBCLENBQThCLENBQzFCLEdBQUlxRyxTQUFRLENBQUcsRUFBZixDQUNBLElBQUssR0FBSUMsRUFBVCxHQUFjdEcsTUFBZCxDQUFxQixDQUNqQixHQUFJQSxLQUFLLENBQUN1RyxjQUFOLENBQXFCRCxDQUFyQixDQUFKLENBQTZCLENBQ3pCLEdBQUlBLENBQUMsR0FBSyxHQUFWLENBQWUsQ0FDWEQsUUFBUSxDQUFDQyxDQUFELENBQVIsQ0FBY3RHLEtBQUssQ0FBQ3NHLENBQUQsQ0FBbkIsQ0FDSCxDQUZELElBR0ssQ0FDREQsUUFBUSxDQUFDQyxDQUFELENBQVIsQ0FBY0UsbUJBQW1CLENBQUN4RyxLQUFLLENBQUNzRyxDQUFELENBQU4sQ0FBakMsQ0FDSCxDQUNKLENBQ0osQ0FDRHRHLEtBQUssQ0FBR3FHLFFBQVIsQ0FDSCxDQUVELE1BQU90RyxVQUFTLENBQUNDLEtBQUQsQ0FBUUMsSUFBUixDQUFoQixDQUNILENBakJELENBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVNFLFdBQVQsQ0FBb0JILEtBQXBCLENBQTJCLENBRXZCLEdBQUlFLElBQUcsQ0FBRyxDQUFFSSxDQUFDLENBQUUsQ0FBTCxDQUFRRSxDQUFDLENBQUUsQ0FBWCxDQUFjRSxDQUFDLENBQUUsQ0FBakIsQ0FBVixDQUNBLEdBQUlFLEVBQUMsQ0FBRyxDQUFSLENBQ0EsR0FBSWlDLEVBQUMsQ0FBRyxJQUFSLENBQ0EsR0FBSUMsRUFBQyxDQUFHLElBQVIsQ0FDQSxHQUFJSyxFQUFDLENBQUcsSUFBUixDQUNBLEdBQUloQyxHQUFFLENBQUcsS0FBVCxDQUNBLEdBQUlKLE9BQU0sQ0FBRyxLQUFiLENBRUEsR0FBSSxNQUFPZixNQUFQLEVBQWdCLFFBQXBCLENBQThCLENBQzFCQSxLQUFLLENBQUd5RyxtQkFBbUIsQ0FBQ3pHLEtBQUQsQ0FBM0IsQ0FDSCxDQUVELEdBQUksTUFBT0EsTUFBUCxFQUFnQixRQUFwQixDQUE4QixDQUMxQixHQUFJMEcsY0FBYyxDQUFDMUcsS0FBSyxDQUFDTSxDQUFQLENBQWQsRUFBMkJvRyxjQUFjLENBQUMxRyxLQUFLLENBQUNRLENBQVAsQ0FBekMsRUFBc0RrRyxjQUFjLENBQUMxRyxLQUFLLENBQUNVLENBQVAsQ0FBeEUsQ0FBbUYsQ0FDL0VSLEdBQUcsQ0FBR3lHLFFBQVEsQ0FBQzNHLEtBQUssQ0FBQ00sQ0FBUCxDQUFVTixLQUFLLENBQUNRLENBQWhCLENBQW1CUixLQUFLLENBQUNVLENBQXpCLENBQWQsQ0FDQVMsRUFBRSxDQUFHLElBQUwsQ0FDQUosTUFBTSxDQUFHNkYsTUFBTSxDQUFDNUcsS0FBSyxDQUFDTSxDQUFQLENBQU4sQ0FBZ0J1RyxNQUFoQixDQUF1QixDQUFDLENBQXhCLElBQStCLEdBQS9CLENBQXFDLE1BQXJDLENBQThDLEtBQXZELENBQ0gsQ0FKRCxJQUtLLElBQUlILGNBQWMsQ0FBQzFHLEtBQUssQ0FBQzRDLENBQVAsQ0FBZCxFQUEyQjhELGNBQWMsQ0FBQzFHLEtBQUssQ0FBQzZDLENBQVAsQ0FBekMsRUFBc0Q2RCxjQUFjLENBQUMxRyxLQUFLLENBQUM4QyxDQUFQLENBQXhFLENBQW1GLENBQ3BGRCxDQUFDLENBQUcyRCxtQkFBbUIsQ0FBQ3hHLEtBQUssQ0FBQzZDLENBQVAsQ0FBdkIsQ0FDQUMsQ0FBQyxDQUFHMEQsbUJBQW1CLENBQUN4RyxLQUFLLENBQUM4QyxDQUFQLENBQXZCLENBQ0E1QyxHQUFHLENBQUc0RyxRQUFRLENBQUM5RyxLQUFLLENBQUM0QyxDQUFQLENBQVVDLENBQVYsQ0FBYUMsQ0FBYixDQUFkLENBQ0EzQixFQUFFLENBQUcsSUFBTCxDQUNBSixNQUFNLENBQUcsS0FBVCxDQUNILENBTkksSUFPQSxJQUFJMkYsY0FBYyxDQUFDMUcsS0FBSyxDQUFDNEMsQ0FBUCxDQUFkLEVBQTJCOEQsY0FBYyxDQUFDMUcsS0FBSyxDQUFDNkMsQ0FBUCxDQUF6QyxFQUFzRDZELGNBQWMsQ0FBQzFHLEtBQUssQ0FBQ21ELENBQVAsQ0FBeEUsQ0FBbUYsQ0FDcEZOLENBQUMsQ0FBRzJELG1CQUFtQixDQUFDeEcsS0FBSyxDQUFDNkMsQ0FBUCxDQUF2QixDQUNBTSxDQUFDLENBQUdxRCxtQkFBbUIsQ0FBQ3hHLEtBQUssQ0FBQ21ELENBQVAsQ0FBdkIsQ0FDQWpELEdBQUcsQ0FBRzZHLFFBQVEsQ0FBQy9HLEtBQUssQ0FBQzRDLENBQVAsQ0FBVUMsQ0FBVixDQUFhTSxDQUFiLENBQWQsQ0FDQWhDLEVBQUUsQ0FBRyxJQUFMLENBQ0FKLE1BQU0sQ0FBRyxLQUFULENBQ0gsQ0FFRCxHQUFJZixLQUFLLENBQUN1RyxjQUFOLENBQXFCLEdBQXJCLENBQUosQ0FBK0IsQ0FDM0IzRixDQUFDLENBQUdaLEtBQUssQ0FBQ1ksQ0FBVixDQUNILENBQ0osQ0FFREEsQ0FBQyxDQUFHNEIsVUFBVSxDQUFDNUIsQ0FBRCxDQUFkLENBRUEsTUFBTyxDQUNITyxFQUFFLENBQUVBLEVBREQsQ0FFSEosTUFBTSxDQUFFZixLQUFLLENBQUNlLE1BQU4sRUFBZ0JBLE1BRnJCLENBR0hULENBQUMsQ0FBRWIsT0FBTyxDQUFDLEdBQUQsQ0FBTUUsT0FBTyxDQUFDTyxHQUFHLENBQUNJLENBQUwsQ0FBUSxDQUFSLENBQWIsQ0FIUCxDQUlIRSxDQUFDLENBQUVmLE9BQU8sQ0FBQyxHQUFELENBQU1FLE9BQU8sQ0FBQ08sR0FBRyxDQUFDTSxDQUFMLENBQVEsQ0FBUixDQUFiLENBSlAsQ0FLSEUsQ0FBQyxDQUFFakIsT0FBTyxDQUFDLEdBQUQsQ0FBTUUsT0FBTyxDQUFDTyxHQUFHLENBQUNRLENBQUwsQ0FBUSxDQUFSLENBQWIsQ0FMUCxDQU1IRSxDQUFDLENBQUVBLENBTkEsQ0FBUCxDQVFILENBR0Q7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUytGLFNBQVQsQ0FBa0JyRyxDQUFsQixDQUFxQkUsQ0FBckIsQ0FBd0JFLENBQXhCLENBQTBCLENBQ3RCLE1BQU8sQ0FDSEosQ0FBQyxDQUFFeUQsT0FBTyxDQUFDekQsQ0FBRCxDQUFJLEdBQUosQ0FBUCxDQUFrQixHQURsQixDQUVIRSxDQUFDLENBQUV1RCxPQUFPLENBQUN2RCxDQUFELENBQUksR0FBSixDQUFQLENBQWtCLEdBRmxCLENBR0hFLENBQUMsQ0FBRXFELE9BQU8sQ0FBQ3JELENBQUQsQ0FBSSxHQUFKLENBQVAsQ0FBa0IsR0FIbEIsQ0FBUCxDQUtILENBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFTd0MsU0FBVCxDQUFrQjVDLENBQWxCLENBQXFCRSxDQUFyQixDQUF3QkUsQ0FBeEIsQ0FBMkIsQ0FFdkJKLENBQUMsQ0FBR3lELE9BQU8sQ0FBQ3pELENBQUQsQ0FBSSxHQUFKLENBQVgsQ0FDQUUsQ0FBQyxDQUFHdUQsT0FBTyxDQUFDdkQsQ0FBRCxDQUFJLEdBQUosQ0FBWCxDQUNBRSxDQUFDLENBQUdxRCxPQUFPLENBQUNyRCxDQUFELENBQUksR0FBSixDQUFYLENBRUEsR0FBSWQsSUFBRyxDQUFHRCxPQUFPLENBQUNXLENBQUQsQ0FBSUUsQ0FBSixDQUFPRSxDQUFQLENBQWpCLENBQTRCaEIsR0FBRyxDQUFHRCxPQUFPLENBQUNhLENBQUQsQ0FBSUUsQ0FBSixDQUFPRSxDQUFQLENBQXpDLENBQ0EsR0FBSWtDLEVBQUosQ0FBT0MsQ0FBUCxDQUFVTSxDQUFDLENBQUcsQ0FBQ3ZELEdBQUcsQ0FBR0YsR0FBUCxFQUFjLENBQTVCLENBRUEsR0FBR0UsR0FBRyxFQUFJRixHQUFWLENBQWUsQ0FDWGtELENBQUMsQ0FBR0MsQ0FBQyxDQUFHLENBQVIsQ0FBVztBQUNkLENBRkQsSUFHSyxDQUNELEdBQUltRSxFQUFDLENBQUdwSCxHQUFHLENBQUdGLEdBQWQsQ0FDQW1ELENBQUMsQ0FBR00sQ0FBQyxDQUFHLEdBQUosQ0FBVTZELENBQUMsRUFBSSxFQUFJcEgsR0FBSixDQUFVRixHQUFkLENBQVgsQ0FBZ0NzSCxDQUFDLEVBQUlwSCxHQUFHLENBQUdGLEdBQVYsQ0FBckMsQ0FDQSxPQUFPRSxHQUFQLEVBQ0ksSUFBS1UsRUFBTCxDQUFRc0MsQ0FBQyxDQUFHLENBQUNwQyxDQUFDLENBQUdFLENBQUwsRUFBVXNHLENBQVYsRUFBZXhHLENBQUMsQ0FBR0UsQ0FBSixDQUFRLENBQVIsQ0FBWSxDQUEzQixDQUFKLENBQW1DLE1BQzNDLElBQUtGLEVBQUwsQ0FBUW9DLENBQUMsQ0FBRyxDQUFDbEMsQ0FBQyxDQUFHSixDQUFMLEVBQVUwRyxDQUFWLENBQWMsQ0FBbEIsQ0FBcUIsTUFDN0IsSUFBS3RHLEVBQUwsQ0FBUWtDLENBQUMsQ0FBRyxDQUFDdEMsQ0FBQyxDQUFHRSxDQUFMLEVBQVV3RyxDQUFWLENBQWMsQ0FBbEIsQ0FBcUIsTUFIakMsQ0FNQXBFLENBQUMsRUFBSSxDQUFMLENBQ0gsQ0FFRCxNQUFPLENBQUVBLENBQUMsQ0FBRUEsQ0FBTCxDQUFRQyxDQUFDLENBQUVBLENBQVgsQ0FBY00sQ0FBQyxDQUFFQSxDQUFqQixDQUFQLENBQ0gsQ0FFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVM0RCxTQUFULENBQWtCbkUsQ0FBbEIsQ0FBcUJDLENBQXJCLENBQXdCTSxDQUF4QixDQUEyQixDQUN2QixHQUFJN0MsRUFBSixDQUFPRSxDQUFQLENBQVVFLENBQVYsQ0FFQWtDLENBQUMsQ0FBR21CLE9BQU8sQ0FBQ25CLENBQUQsQ0FBSSxHQUFKLENBQVgsQ0FDQUMsQ0FBQyxDQUFHa0IsT0FBTyxDQUFDbEIsQ0FBRCxDQUFJLEdBQUosQ0FBWCxDQUNBTSxDQUFDLENBQUdZLE9BQU8sQ0FBQ1osQ0FBRCxDQUFJLEdBQUosQ0FBWCxDQUVBLFFBQVM4RCxRQUFULENBQWlCQyxDQUFqQixDQUFvQkMsQ0FBcEIsQ0FBdUJDLENBQXZCLENBQTBCLENBQ3RCLEdBQUdBLENBQUMsQ0FBRyxDQUFQLENBQVVBLENBQUMsRUFBSSxDQUFMLENBQ1YsR0FBR0EsQ0FBQyxDQUFHLENBQVAsQ0FBVUEsQ0FBQyxFQUFJLENBQUwsQ0FDVixHQUFHQSxDQUFDLENBQUcsRUFBRSxDQUFULENBQVksTUFBT0YsRUFBQyxDQUFHLENBQUNDLENBQUMsQ0FBR0QsQ0FBTCxFQUFVLENBQVYsQ0FBY0UsQ0FBekIsQ0FDWixHQUFHQSxDQUFDLENBQUcsRUFBRSxDQUFULENBQVksTUFBT0QsRUFBUCxDQUNaLEdBQUdDLENBQUMsQ0FBRyxFQUFFLENBQVQsQ0FBWSxNQUFPRixFQUFDLENBQUcsQ0FBQ0MsQ0FBQyxDQUFHRCxDQUFMLEdBQVcsRUFBRSxDQUFGLENBQU1FLENBQWpCLEVBQXNCLENBQWpDLENBQ1osTUFBT0YsRUFBUCxDQUNILENBRUQsR0FBR3JFLENBQUMsR0FBSyxDQUFULENBQVksQ0FDUnZDLENBQUMsQ0FBR0UsQ0FBQyxDQUFHRSxDQUFDLENBQUd5QyxDQUFaLENBQWU7QUFDbEIsQ0FGRCxJQUdLLENBQ0QsR0FBSWdFLEVBQUMsQ0FBR2hFLENBQUMsQ0FBRyxHQUFKLENBQVVBLENBQUMsRUFBSSxFQUFJTixDQUFSLENBQVgsQ0FBd0JNLENBQUMsQ0FBR04sQ0FBSixDQUFRTSxDQUFDLENBQUdOLENBQTVDLENBQ0EsR0FBSXFFLEVBQUMsQ0FBRyxFQUFJL0QsQ0FBSixDQUFRZ0UsQ0FBaEIsQ0FDQTdHLENBQUMsQ0FBRzJHLE9BQU8sQ0FBQ0MsQ0FBRCxDQUFJQyxDQUFKLENBQU92RSxDQUFDLENBQUcsRUFBRSxDQUFiLENBQVgsQ0FDQXBDLENBQUMsQ0FBR3lHLE9BQU8sQ0FBQ0MsQ0FBRCxDQUFJQyxDQUFKLENBQU92RSxDQUFQLENBQVgsQ0FDQWxDLENBQUMsQ0FBR3VHLE9BQU8sQ0FBQ0MsQ0FBRCxDQUFJQyxDQUFKLENBQU92RSxDQUFDLENBQUcsRUFBRSxDQUFiLENBQVgsQ0FDSCxDQUVELE1BQU8sQ0FBRXRDLENBQUMsQ0FBRUEsQ0FBQyxDQUFHLEdBQVQsQ0FBY0UsQ0FBQyxDQUFFQSxDQUFDLENBQUcsR0FBckIsQ0FBMEJFLENBQUMsQ0FBRUEsQ0FBQyxDQUFHLEdBQWpDLENBQVAsQ0FDSCxDQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBU2lDLFNBQVQsQ0FBa0JyQyxDQUFsQixDQUFxQkUsQ0FBckIsQ0FBd0JFLENBQXhCLENBQTJCLENBRXZCSixDQUFDLENBQUd5RCxPQUFPLENBQUN6RCxDQUFELENBQUksR0FBSixDQUFYLENBQ0FFLENBQUMsQ0FBR3VELE9BQU8sQ0FBQ3ZELENBQUQsQ0FBSSxHQUFKLENBQVgsQ0FDQUUsQ0FBQyxDQUFHcUQsT0FBTyxDQUFDckQsQ0FBRCxDQUFJLEdBQUosQ0FBWCxDQUVBLEdBQUlkLElBQUcsQ0FBR0QsT0FBTyxDQUFDVyxDQUFELENBQUlFLENBQUosQ0FBT0UsQ0FBUCxDQUFqQixDQUE0QmhCLEdBQUcsQ0FBR0QsT0FBTyxDQUFDYSxDQUFELENBQUlFLENBQUosQ0FBT0UsQ0FBUCxDQUF6QyxDQUNBLEdBQUlrQyxFQUFKLENBQU9DLENBQVAsQ0FBVUMsQ0FBQyxDQUFHbEQsR0FBZCxDQUVBLEdBQUlvSCxFQUFDLENBQUdwSCxHQUFHLENBQUdGLEdBQWQsQ0FDQW1ELENBQUMsQ0FBR2pELEdBQUcsR0FBSyxDQUFSLENBQVksQ0FBWixDQUFnQm9ILENBQUMsQ0FBR3BILEdBQXhCLENBRUEsR0FBR0EsR0FBRyxFQUFJRixHQUFWLENBQWUsQ0FDWGtELENBQUMsQ0FBRyxDQUFKLENBQU87QUFDVixDQUZELElBR0ssQ0FDRCxPQUFPaEQsR0FBUCxFQUNJLElBQUtVLEVBQUwsQ0FBUXNDLENBQUMsQ0FBRyxDQUFDcEMsQ0FBQyxDQUFHRSxDQUFMLEVBQVVzRyxDQUFWLEVBQWV4RyxDQUFDLENBQUdFLENBQUosQ0FBUSxDQUFSLENBQVksQ0FBM0IsQ0FBSixDQUFtQyxNQUMzQyxJQUFLRixFQUFMLENBQVFvQyxDQUFDLENBQUcsQ0FBQ2xDLENBQUMsQ0FBR0osQ0FBTCxFQUFVMEcsQ0FBVixDQUFjLENBQWxCLENBQXFCLE1BQzdCLElBQUt0RyxFQUFMLENBQVFrQyxDQUFDLENBQUcsQ0FBQ3RDLENBQUMsQ0FBR0UsQ0FBTCxFQUFVd0csQ0FBVixDQUFjLENBQWxCLENBQXFCLE1BSGpDLENBS0FwRSxDQUFDLEVBQUksQ0FBTCxDQUNILENBQ0QsTUFBTyxDQUFFQSxDQUFDLENBQUVBLENBQUwsQ0FBUUMsQ0FBQyxDQUFFQSxDQUFYLENBQWNDLENBQUMsQ0FBRUEsQ0FBakIsQ0FBUCxDQUNILENBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQyxRQUFTZ0UsU0FBVCxDQUFrQmxFLENBQWxCLENBQXFCQyxDQUFyQixDQUF3QkMsQ0FBeEIsQ0FBMkIsQ0FFeEJGLENBQUMsQ0FBR21CLE9BQU8sQ0FBQ25CLENBQUQsQ0FBSSxHQUFKLENBQVAsQ0FBa0IsQ0FBdEIsQ0FDQUMsQ0FBQyxDQUFHa0IsT0FBTyxDQUFDbEIsQ0FBRCxDQUFJLEdBQUosQ0FBWCxDQUNBQyxDQUFDLENBQUdpQixPQUFPLENBQUNqQixDQUFELENBQUksR0FBSixDQUFYLENBRUEsR0FBSXdELEVBQUMsQ0FBR25ILElBQUksQ0FBQ2tJLEtBQUwsQ0FBV3pFLENBQVgsQ0FBUixDQUNJMEUsQ0FBQyxDQUFHMUUsQ0FBQyxDQUFHMEQsQ0FEWixDQUVJWSxDQUFDLENBQUdwRSxDQUFDLEVBQUksRUFBSUQsQ0FBUixDQUZULENBR0lzRSxDQUFDLENBQUdyRSxDQUFDLEVBQUksRUFBSXdFLENBQUMsQ0FBR3pFLENBQVosQ0FIVCxDQUlJdUUsQ0FBQyxDQUFHdEUsQ0FBQyxFQUFJLEVBQUksQ0FBQyxFQUFJd0UsQ0FBTCxFQUFVekUsQ0FBbEIsQ0FKVCxDQUtJMEUsR0FBRyxDQUFHakIsQ0FBQyxDQUFHLENBTGQsQ0FNSWhHLENBQUMsQ0FBRyxDQUFDd0MsQ0FBRCxDQUFJcUUsQ0FBSixDQUFPRCxDQUFQLENBQVVBLENBQVYsQ0FBYUUsQ0FBYixDQUFnQnRFLENBQWhCLEVBQW1CeUUsR0FBbkIsQ0FOUixDQU9JL0csQ0FBQyxDQUFHLENBQUM0RyxDQUFELENBQUl0RSxDQUFKLENBQU9BLENBQVAsQ0FBVXFFLENBQVYsQ0FBYUQsQ0FBYixDQUFnQkEsQ0FBaEIsRUFBbUJLLEdBQW5CLENBUFIsQ0FRSTdHLENBQUMsQ0FBRyxDQUFDd0csQ0FBRCxDQUFJQSxDQUFKLENBQU9FLENBQVAsQ0FBVXRFLENBQVYsQ0FBYUEsQ0FBYixDQUFnQnFFLENBQWhCLEVBQW1CSSxHQUFuQixDQVJSLENBVUEsTUFBTyxDQUFFakgsQ0FBQyxDQUFFQSxDQUFDLENBQUcsR0FBVCxDQUFjRSxDQUFDLENBQUVBLENBQUMsQ0FBRyxHQUFyQixDQUEwQkUsQ0FBQyxDQUFFQSxDQUFDLENBQUcsR0FBakMsQ0FBUCxDQUNILENBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFTNkMsU0FBVCxDQUFrQmpELENBQWxCLENBQXFCRSxDQUFyQixDQUF3QkUsQ0FBeEIsQ0FBMkI0QyxVQUEzQixDQUF1QyxDQUVuQyxHQUFJa0UsSUFBRyxDQUFHLENBQ05DLElBQUksQ0FBQ2xJLFNBQVMsQ0FBQ2UsQ0FBRCxDQUFULENBQWFrRSxRQUFiLENBQXNCLEVBQXRCLENBQUQsQ0FERSxDQUVOaUQsSUFBSSxDQUFDbEksU0FBUyxDQUFDaUIsQ0FBRCxDQUFULENBQWFnRSxRQUFiLENBQXNCLEVBQXRCLENBQUQsQ0FGRSxDQUdOaUQsSUFBSSxDQUFDbEksU0FBUyxDQUFDbUIsQ0FBRCxDQUFULENBQWE4RCxRQUFiLENBQXNCLEVBQXRCLENBQUQsQ0FIRSxDQUFWLENBTUE7QUFDQSxHQUFJbEIsVUFBVSxFQUFJa0UsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPRSxNQUFQLENBQWMsQ0FBZCxHQUFvQkYsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPRSxNQUFQLENBQWMsQ0FBZCxDQUFsQyxFQUFzREYsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPRSxNQUFQLENBQWMsQ0FBZCxHQUFvQkYsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPRSxNQUFQLENBQWMsQ0FBZCxDQUExRSxFQUE4RkYsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPRSxNQUFQLENBQWMsQ0FBZCxHQUFvQkYsR0FBRyxDQUFDLENBQUQsQ0FBSCxDQUFPRSxNQUFQLENBQWMsQ0FBZCxDQUF0SCxDQUF3SSxDQUNwSSxNQUFPRixJQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLEVBQW1CRixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLENBQW5CLENBQXNDRixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLENBQTdDLENBQ0gsQ0FFRCxNQUFPRixJQUFHLENBQUNHLElBQUosQ0FBUyxFQUFULENBQVAsQ0FDSCxDQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBU2hFLFVBQVQsQ0FBbUJyRCxDQUFuQixDQUFzQkUsQ0FBdEIsQ0FBeUJFLENBQXpCLENBQTRCRSxDQUE1QixDQUErQjhDLFVBQS9CLENBQTJDLENBRXZDLEdBQUk4RCxJQUFHLENBQUcsQ0FDTkMsSUFBSSxDQUFDbEksU0FBUyxDQUFDZSxDQUFELENBQVQsQ0FBYWtFLFFBQWIsQ0FBc0IsRUFBdEIsQ0FBRCxDQURFLENBRU5pRCxJQUFJLENBQUNsSSxTQUFTLENBQUNpQixDQUFELENBQVQsQ0FBYWdFLFFBQWIsQ0FBc0IsRUFBdEIsQ0FBRCxDQUZFLENBR05pRCxJQUFJLENBQUNsSSxTQUFTLENBQUNtQixDQUFELENBQVQsQ0FBYThELFFBQWIsQ0FBc0IsRUFBdEIsQ0FBRCxDQUhFLENBSU5pRCxJQUFJLENBQUNHLG1CQUFtQixDQUFDaEgsQ0FBRCxDQUFwQixDQUpFLENBQVYsQ0FPQTtBQUNBLEdBQUk4QyxVQUFVLEVBQUk4RCxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLEdBQW9CRixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLENBQWxDLEVBQXNERixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLEdBQW9CRixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLENBQTFFLEVBQThGRixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLEdBQW9CRixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLENBQWxILEVBQXNJRixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLEdBQW9CRixHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9FLE1BQVAsQ0FBYyxDQUFkLENBQTlKLENBQWdMLENBQzVLLE1BQU9GLElBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT0UsTUFBUCxDQUFjLENBQWQsRUFBbUJGLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT0UsTUFBUCxDQUFjLENBQWQsQ0FBbkIsQ0FBc0NGLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT0UsTUFBUCxDQUFjLENBQWQsQ0FBdEMsQ0FBeURGLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT0UsTUFBUCxDQUFjLENBQWQsQ0FBaEUsQ0FDSCxDQUVELE1BQU9GLElBQUcsQ0FBQ0csSUFBSixDQUFTLEVBQVQsQ0FBUCxDQUNILENBRUQ7QUFDQTtBQUNBO0FBQ0EsUUFBU3JELGNBQVQsQ0FBdUJoRSxDQUF2QixDQUEwQkUsQ0FBMUIsQ0FBNkJFLENBQTdCLENBQWdDRSxDQUFoQyxDQUFtQyxDQUUvQixHQUFJNEcsSUFBRyxDQUFHLENBQ05DLElBQUksQ0FBQ0csbUJBQW1CLENBQUNoSCxDQUFELENBQXBCLENBREUsQ0FFTjZHLElBQUksQ0FBQ2xJLFNBQVMsQ0FBQ2UsQ0FBRCxDQUFULENBQWFrRSxRQUFiLENBQXNCLEVBQXRCLENBQUQsQ0FGRSxDQUdOaUQsSUFBSSxDQUFDbEksU0FBUyxDQUFDaUIsQ0FBRCxDQUFULENBQWFnRSxRQUFiLENBQXNCLEVBQXRCLENBQUQsQ0FIRSxDQUlOaUQsSUFBSSxDQUFDbEksU0FBUyxDQUFDbUIsQ0FBRCxDQUFULENBQWE4RCxRQUFiLENBQXNCLEVBQXRCLENBQUQsQ0FKRSxDQUFWLENBT0EsTUFBT2dELElBQUcsQ0FBQ0csSUFBSixDQUFTLEVBQVQsQ0FBUCxDQUNILENBRUQ7QUFDQTtBQUNBNUgsU0FBUyxDQUFDOEgsTUFBVixDQUFtQixTQUFVQyxNQUFWLENBQWtCQyxNQUFsQixDQUEwQixDQUN6QyxHQUFJLENBQUNELE1BQUQsRUFBVyxDQUFDQyxNQUFoQixDQUF3QixDQUFFLE1BQU8sTUFBUCxDQUFlLENBQ3pDLE1BQU9oSSxVQUFTLENBQUMrSCxNQUFELENBQVQsQ0FBa0JqRSxXQUFsQixJQUFtQzlELFNBQVMsQ0FBQ2dJLE1BQUQsQ0FBVCxDQUFrQmxFLFdBQWxCLEVBQTFDLENBQ0gsQ0FIRCxDQUtBOUQsU0FBUyxDQUFDRCxNQUFWLENBQW1CLFVBQVcsQ0FDMUIsTUFBT0MsVUFBUyxDQUFDcUcsU0FBVixDQUFvQixDQUN2QjlGLENBQUMsQ0FBRVQsVUFBVSxFQURVLENBRXZCVyxDQUFDLENBQUVYLFVBQVUsRUFGVSxDQUd2QmEsQ0FBQyxDQUFFYixVQUFVLEVBSFUsQ0FBcEIsQ0FBUCxDQUtILENBTkQsQ0FTQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLFFBQVM0RixXQUFULENBQW9CekYsS0FBcEIsQ0FBMkJnSSxNQUEzQixDQUFtQyxDQUMvQkEsTUFBTSxDQUFJQSxNQUFNLEdBQUssQ0FBWixDQUFpQixDQUFqQixDQUFzQkEsTUFBTSxFQUFJLEVBQXpDLENBQ0EsR0FBSS9FLElBQUcsQ0FBR2xELFNBQVMsQ0FBQ0MsS0FBRCxDQUFULENBQWlCZ0QsS0FBakIsRUFBVixDQUNBQyxHQUFHLENBQUNKLENBQUosRUFBU21GLE1BQU0sQ0FBRyxHQUFsQixDQUNBL0UsR0FBRyxDQUFDSixDQUFKLENBQVFvRixPQUFPLENBQUNoRixHQUFHLENBQUNKLENBQUwsQ0FBZixDQUNBLE1BQU85QyxVQUFTLENBQUNrRCxHQUFELENBQWhCLENBQ0gsQ0FFRCxRQUFTeUMsU0FBVCxDQUFrQjFGLEtBQWxCLENBQXlCZ0ksTUFBekIsQ0FBaUMsQ0FDN0JBLE1BQU0sQ0FBSUEsTUFBTSxHQUFLLENBQVosQ0FBaUIsQ0FBakIsQ0FBc0JBLE1BQU0sRUFBSSxFQUF6QyxDQUNBLEdBQUkvRSxJQUFHLENBQUdsRCxTQUFTLENBQUNDLEtBQUQsQ0FBVCxDQUFpQmdELEtBQWpCLEVBQVYsQ0FDQUMsR0FBRyxDQUFDSixDQUFKLEVBQVNtRixNQUFNLENBQUcsR0FBbEIsQ0FDQS9FLEdBQUcsQ0FBQ0osQ0FBSixDQUFRb0YsT0FBTyxDQUFDaEYsR0FBRyxDQUFDSixDQUFMLENBQWYsQ0FDQSxNQUFPOUMsVUFBUyxDQUFDa0QsR0FBRCxDQUFoQixDQUNILENBRUQsUUFBUzBDLFVBQVQsQ0FBbUIzRixLQUFuQixDQUEwQixDQUN0QixNQUFPRCxVQUFTLENBQUNDLEtBQUQsQ0FBVCxDQUFpQnlGLFVBQWpCLENBQTRCLEdBQTVCLENBQVAsQ0FDSCxDQUVELFFBQVNKLFFBQVQsQ0FBa0JyRixLQUFsQixDQUF5QmdJLE1BQXpCLENBQWlDLENBQzdCQSxNQUFNLENBQUlBLE1BQU0sR0FBSyxDQUFaLENBQWlCLENBQWpCLENBQXNCQSxNQUFNLEVBQUksRUFBekMsQ0FDQSxHQUFJL0UsSUFBRyxDQUFHbEQsU0FBUyxDQUFDQyxLQUFELENBQVQsQ0FBaUJnRCxLQUFqQixFQUFWLENBQ0FDLEdBQUcsQ0FBQ0UsQ0FBSixFQUFTNkUsTUFBTSxDQUFHLEdBQWxCLENBQ0EvRSxHQUFHLENBQUNFLENBQUosQ0FBUThFLE9BQU8sQ0FBQ2hGLEdBQUcsQ0FBQ0UsQ0FBTCxDQUFmLENBQ0EsTUFBT3BELFVBQVMsQ0FBQ2tELEdBQUQsQ0FBaEIsQ0FDSCxDQUVELFFBQVNzQyxTQUFULENBQWtCdkYsS0FBbEIsQ0FBeUJnSSxNQUF6QixDQUFpQyxDQUM3QkEsTUFBTSxDQUFJQSxNQUFNLEdBQUssQ0FBWixDQUFpQixDQUFqQixDQUFzQkEsTUFBTSxFQUFJLEVBQXpDLENBQ0EsR0FBSTlILElBQUcsQ0FBR0gsU0FBUyxDQUFDQyxLQUFELENBQVQsQ0FBaUI2QixLQUFqQixFQUFWLENBQ0EzQixHQUFHLENBQUNJLENBQUosQ0FBUVgsT0FBTyxDQUFDLENBQUQsQ0FBSUYsT0FBTyxDQUFDLEdBQUQsQ0FBTVMsR0FBRyxDQUFDSSxDQUFKLENBQVFmLFNBQVMsQ0FBQyxJQUFNLEVBQUd5SSxNQUFNLENBQUcsR0FBWixDQUFQLENBQXZCLENBQVgsQ0FBZixDQUNBOUgsR0FBRyxDQUFDTSxDQUFKLENBQVFiLE9BQU8sQ0FBQyxDQUFELENBQUlGLE9BQU8sQ0FBQyxHQUFELENBQU1TLEdBQUcsQ0FBQ00sQ0FBSixDQUFRakIsU0FBUyxDQUFDLElBQU0sRUFBR3lJLE1BQU0sQ0FBRyxHQUFaLENBQVAsQ0FBdkIsQ0FBWCxDQUFmLENBQ0E5SCxHQUFHLENBQUNRLENBQUosQ0FBUWYsT0FBTyxDQUFDLENBQUQsQ0FBSUYsT0FBTyxDQUFDLEdBQUQsQ0FBTVMsR0FBRyxDQUFDUSxDQUFKLENBQVFuQixTQUFTLENBQUMsSUFBTSxFQUFHeUksTUFBTSxDQUFHLEdBQVosQ0FBUCxDQUF2QixDQUFYLENBQWYsQ0FDQSxNQUFPakksVUFBUyxDQUFDRyxHQUFELENBQWhCLENBQ0gsQ0FFRCxRQUFTc0YsT0FBVCxDQUFpQnhGLEtBQWpCLENBQXdCZ0ksTUFBeEIsQ0FBZ0MsQ0FDNUJBLE1BQU0sQ0FBSUEsTUFBTSxHQUFLLENBQVosQ0FBaUIsQ0FBakIsQ0FBc0JBLE1BQU0sRUFBSSxFQUF6QyxDQUNBLEdBQUkvRSxJQUFHLENBQUdsRCxTQUFTLENBQUNDLEtBQUQsQ0FBVCxDQUFpQmdELEtBQWpCLEVBQVYsQ0FDQUMsR0FBRyxDQUFDRSxDQUFKLEVBQVM2RSxNQUFNLENBQUcsR0FBbEIsQ0FDQS9FLEdBQUcsQ0FBQ0UsQ0FBSixDQUFROEUsT0FBTyxDQUFDaEYsR0FBRyxDQUFDRSxDQUFMLENBQWYsQ0FDQSxNQUFPcEQsVUFBUyxDQUFDa0QsR0FBRCxDQUFoQixDQUNILENBRUQ7QUFDQTtBQUNBLFFBQVMyQyxLQUFULENBQWM1RixLQUFkLENBQXFCZ0ksTUFBckIsQ0FBNkIsQ0FDekIsR0FBSS9FLElBQUcsQ0FBR2xELFNBQVMsQ0FBQ0MsS0FBRCxDQUFULENBQWlCZ0QsS0FBakIsRUFBVixDQUNBLEdBQUlrRixJQUFHLENBQUcsQ0FBQ2pGLEdBQUcsQ0FBQ0wsQ0FBSixDQUFRb0YsTUFBVCxFQUFtQixHQUE3QixDQUNBL0UsR0FBRyxDQUFDTCxDQUFKLENBQVFzRixHQUFHLENBQUcsQ0FBTixDQUFVLElBQU1BLEdBQWhCLENBQXNCQSxHQUE5QixDQUNBLE1BQU9uSSxVQUFTLENBQUNrRCxHQUFELENBQWhCLENBQ0gsQ0FFRDtBQUNBO0FBQ0E7QUFDQTtBQUVBLFFBQVM4QyxXQUFULENBQW9CL0YsS0FBcEIsQ0FBMkIsQ0FDdkIsR0FBSWlELElBQUcsQ0FBR2xELFNBQVMsQ0FBQ0MsS0FBRCxDQUFULENBQWlCZ0QsS0FBakIsRUFBVixDQUNBQyxHQUFHLENBQUNMLENBQUosQ0FBUSxDQUFDSyxHQUFHLENBQUNMLENBQUosQ0FBUSxHQUFULEVBQWdCLEdBQXhCLENBQ0EsTUFBTzdDLFVBQVMsQ0FBQ2tELEdBQUQsQ0FBaEIsQ0FDSCxDQUVELFFBQVNpRCxNQUFULENBQWVsRyxLQUFmLENBQXNCLENBQ2xCLEdBQUlpRCxJQUFHLENBQUdsRCxTQUFTLENBQUNDLEtBQUQsQ0FBVCxDQUFpQmdELEtBQWpCLEVBQVYsQ0FDQSxHQUFJSixFQUFDLENBQUdLLEdBQUcsQ0FBQ0wsQ0FBWixDQUNBLE1BQU8sQ0FDSDdDLFNBQVMsQ0FBQ0MsS0FBRCxDQUROLENBRUhELFNBQVMsQ0FBQyxDQUFFNkMsQ0FBQyxDQUFFLENBQUNBLENBQUMsQ0FBRyxHQUFMLEVBQVksR0FBakIsQ0FBc0JDLENBQUMsQ0FBRUksR0FBRyxDQUFDSixDQUE3QixDQUFnQ00sQ0FBQyxDQUFFRixHQUFHLENBQUNFLENBQXZDLENBQUQsQ0FGTixDQUdIcEQsU0FBUyxDQUFDLENBQUU2QyxDQUFDLENBQUUsQ0FBQ0EsQ0FBQyxDQUFHLEdBQUwsRUFBWSxHQUFqQixDQUFzQkMsQ0FBQyxDQUFFSSxHQUFHLENBQUNKLENBQTdCLENBQWdDTSxDQUFDLENBQUVGLEdBQUcsQ0FBQ0UsQ0FBdkMsQ0FBRCxDQUhOLENBQVAsQ0FLSCxDQUVELFFBQVNnRCxPQUFULENBQWdCbkcsS0FBaEIsQ0FBdUIsQ0FDbkIsR0FBSWlELElBQUcsQ0FBR2xELFNBQVMsQ0FBQ0MsS0FBRCxDQUFULENBQWlCZ0QsS0FBakIsRUFBVixDQUNBLEdBQUlKLEVBQUMsQ0FBR0ssR0FBRyxDQUFDTCxDQUFaLENBQ0EsTUFBTyxDQUNIN0MsU0FBUyxDQUFDQyxLQUFELENBRE4sQ0FFSEQsU0FBUyxDQUFDLENBQUU2QyxDQUFDLENBQUUsQ0FBQ0EsQ0FBQyxDQUFHLEVBQUwsRUFBVyxHQUFoQixDQUFxQkMsQ0FBQyxDQUFFSSxHQUFHLENBQUNKLENBQTVCLENBQStCTSxDQUFDLENBQUVGLEdBQUcsQ0FBQ0UsQ0FBdEMsQ0FBRCxDQUZOLENBR0hwRCxTQUFTLENBQUMsQ0FBRTZDLENBQUMsQ0FBRSxDQUFDQSxDQUFDLENBQUcsR0FBTCxFQUFZLEdBQWpCLENBQXNCQyxDQUFDLENBQUVJLEdBQUcsQ0FBQ0osQ0FBN0IsQ0FBZ0NNLENBQUMsQ0FBRUYsR0FBRyxDQUFDRSxDQUF2QyxDQUFELENBSE4sQ0FJSHBELFNBQVMsQ0FBQyxDQUFFNkMsQ0FBQyxDQUFFLENBQUNBLENBQUMsQ0FBRyxHQUFMLEVBQVksR0FBakIsQ0FBc0JDLENBQUMsQ0FBRUksR0FBRyxDQUFDSixDQUE3QixDQUFnQ00sQ0FBQyxDQUFFRixHQUFHLENBQUNFLENBQXZDLENBQUQsQ0FKTixDQUFQLENBTUgsQ0FFRCxRQUFTOEMsZ0JBQVQsQ0FBeUJqRyxLQUF6QixDQUFnQyxDQUM1QixHQUFJaUQsSUFBRyxDQUFHbEQsU0FBUyxDQUFDQyxLQUFELENBQVQsQ0FBaUJnRCxLQUFqQixFQUFWLENBQ0EsR0FBSUosRUFBQyxDQUFHSyxHQUFHLENBQUNMLENBQVosQ0FDQSxNQUFPLENBQ0g3QyxTQUFTLENBQUNDLEtBQUQsQ0FETixDQUVIRCxTQUFTLENBQUMsQ0FBRTZDLENBQUMsQ0FBRSxDQUFDQSxDQUFDLENBQUcsRUFBTCxFQUFXLEdBQWhCLENBQXFCQyxDQUFDLENBQUVJLEdBQUcsQ0FBQ0osQ0FBNUIsQ0FBK0JNLENBQUMsQ0FBRUYsR0FBRyxDQUFDRSxDQUF0QyxDQUFELENBRk4sQ0FHSHBELFNBQVMsQ0FBQyxDQUFFNkMsQ0FBQyxDQUFFLENBQUNBLENBQUMsQ0FBRyxHQUFMLEVBQVksR0FBakIsQ0FBc0JDLENBQUMsQ0FBRUksR0FBRyxDQUFDSixDQUE3QixDQUFnQ00sQ0FBQyxDQUFFRixHQUFHLENBQUNFLENBQXZDLENBQUQsQ0FITixDQUFQLENBS0gsQ0FFRCxRQUFTMkMsVUFBVCxDQUFtQjlGLEtBQW5CLENBQTBCbUksT0FBMUIsQ0FBbUNDLE1BQW5DLENBQTJDLENBQ3ZDRCxPQUFPLENBQUdBLE9BQU8sRUFBSSxDQUFyQixDQUNBQyxNQUFNLENBQUdBLE1BQU0sRUFBSSxFQUFuQixDQUVBLEdBQUluRixJQUFHLENBQUdsRCxTQUFTLENBQUNDLEtBQUQsQ0FBVCxDQUFpQmdELEtBQWpCLEVBQVYsQ0FDQSxHQUFJcUYsS0FBSSxDQUFHLElBQU1ELE1BQWpCLENBQ0EsR0FBSUUsSUFBRyxDQUFHLENBQUN2SSxTQUFTLENBQUNDLEtBQUQsQ0FBVixDQUFWLENBRUEsSUFBS2lELEdBQUcsQ0FBQ0wsQ0FBSixDQUFRLENBQUVLLEdBQUcsQ0FBQ0wsQ0FBSixFQUFTeUYsSUFBSSxDQUFHRixPQUFQLEVBQWtCLENBQTNCLENBQUQsQ0FBa0MsR0FBbkMsRUFBMEMsR0FBdkQsQ0FBNEQsRUFBRUEsT0FBOUQsRUFBeUUsQ0FDckVsRixHQUFHLENBQUNMLENBQUosQ0FBUSxDQUFDSyxHQUFHLENBQUNMLENBQUosQ0FBUXlGLElBQVQsRUFBaUIsR0FBekIsQ0FDQUMsR0FBRyxDQUFDQyxJQUFKLENBQVN4SSxTQUFTLENBQUNrRCxHQUFELENBQWxCLEVBQ0gsQ0FDRCxNQUFPcUYsSUFBUCxDQUNILENBRUQsUUFBU3RDLGNBQVQsQ0FBdUJoRyxLQUF2QixDQUE4Qm1JLE9BQTlCLENBQXVDLENBQ25DQSxPQUFPLENBQUdBLE9BQU8sRUFBSSxDQUFyQixDQUNBLEdBQUl6RixJQUFHLENBQUczQyxTQUFTLENBQUNDLEtBQUQsQ0FBVCxDQUFpQnlDLEtBQWpCLEVBQVYsQ0FDQSxHQUFJRyxFQUFDLENBQUdGLEdBQUcsQ0FBQ0UsQ0FBWixDQUFlQyxDQUFDLENBQUdILEdBQUcsQ0FBQ0csQ0FBdkIsQ0FBMEJDLENBQUMsQ0FBR0osR0FBRyxDQUFDSSxDQUFsQyxDQUNBLEdBQUl3RixJQUFHLENBQUcsRUFBVixDQUNBLEdBQUlFLGFBQVksQ0FBRyxFQUFJTCxPQUF2QixDQUVBLE1BQU9BLE9BQU8sRUFBZCxDQUFrQixDQUNkRyxHQUFHLENBQUNDLElBQUosQ0FBU3hJLFNBQVMsQ0FBQyxDQUFFNkMsQ0FBQyxDQUFFQSxDQUFMLENBQVFDLENBQUMsQ0FBRUEsQ0FBWCxDQUFjQyxDQUFDLENBQUVBLENBQWpCLENBQUQsQ0FBbEIsRUFDQUEsQ0FBQyxDQUFHLENBQUNBLENBQUMsQ0FBRzBGLFlBQUwsRUFBcUIsQ0FBekIsQ0FDSCxDQUVELE1BQU9GLElBQVAsQ0FDSCxDQUVEO0FBQ0E7QUFFQXZJLFNBQVMsQ0FBQzBJLEdBQVYsQ0FBZ0IsU0FBU1gsTUFBVCxDQUFpQkMsTUFBakIsQ0FBeUJDLE1BQXpCLENBQWlDLENBQzdDQSxNQUFNLENBQUlBLE1BQU0sR0FBSyxDQUFaLENBQWlCLENBQWpCLENBQXNCQSxNQUFNLEVBQUksRUFBekMsQ0FFQSxHQUFJVSxLQUFJLENBQUczSSxTQUFTLENBQUMrSCxNQUFELENBQVQsQ0FBa0JqRyxLQUFsQixFQUFYLENBQ0EsR0FBSThHLEtBQUksQ0FBRzVJLFNBQVMsQ0FBQ2dJLE1BQUQsQ0FBVCxDQUFrQmxHLEtBQWxCLEVBQVgsQ0FFQSxHQUFJcUYsRUFBQyxDQUFHYyxNQUFNLENBQUcsR0FBakIsQ0FFQSxHQUFJWSxLQUFJLENBQUcsQ0FDUHRJLENBQUMsQ0FBRyxDQUFDcUksSUFBSSxDQUFDckksQ0FBTCxDQUFTb0ksSUFBSSxDQUFDcEksQ0FBZixFQUFvQjRHLENBQXJCLENBQTBCd0IsSUFBSSxDQUFDcEksQ0FEM0IsQ0FFUEUsQ0FBQyxDQUFHLENBQUNtSSxJQUFJLENBQUNuSSxDQUFMLENBQVNrSSxJQUFJLENBQUNsSSxDQUFmLEVBQW9CMEcsQ0FBckIsQ0FBMEJ3QixJQUFJLENBQUNsSSxDQUYzQixDQUdQRSxDQUFDLENBQUcsQ0FBQ2lJLElBQUksQ0FBQ2pJLENBQUwsQ0FBU2dJLElBQUksQ0FBQ2hJLENBQWYsRUFBb0J3RyxDQUFyQixDQUEwQndCLElBQUksQ0FBQ2hJLENBSDNCLENBSVBFLENBQUMsQ0FBRyxDQUFDK0gsSUFBSSxDQUFDL0gsQ0FBTCxDQUFTOEgsSUFBSSxDQUFDOUgsQ0FBZixFQUFvQnNHLENBQXJCLENBQTBCd0IsSUFBSSxDQUFDOUgsQ0FKM0IsQ0FBWCxDQU9BLE1BQU9iLFVBQVMsQ0FBQzZJLElBQUQsQ0FBaEIsQ0FDSCxDQWhCRCxDQW1CQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E3SSxTQUFTLENBQUM4SSxXQUFWLENBQXdCLFNBQVNmLE1BQVQsQ0FBaUJDLE1BQWpCLENBQXlCLENBQzdDLEdBQUllLEdBQUUsQ0FBRy9JLFNBQVMsQ0FBQytILE1BQUQsQ0FBbEIsQ0FDQSxHQUFJaUIsR0FBRSxDQUFHaEosU0FBUyxDQUFDZ0ksTUFBRCxDQUFsQixDQUNBLE1BQU8sQ0FBQzVJLElBQUksQ0FBQ1MsR0FBTCxDQUFTa0osRUFBRSxDQUFDaEgsWUFBSCxFQUFULENBQTJCaUgsRUFBRSxDQUFDakgsWUFBSCxFQUEzQixFQUE4QyxJQUEvQyxHQUF3RDNDLElBQUksQ0FBQ08sR0FBTCxDQUFTb0osRUFBRSxDQUFDaEgsWUFBSCxFQUFULENBQTJCaUgsRUFBRSxDQUFDakgsWUFBSCxFQUEzQixFQUE4QyxJQUF0RyxDQUFQLENBQ0gsQ0FKRCxDQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBL0IsU0FBUyxDQUFDaUosVUFBVixDQUF1QixTQUFTbEIsTUFBVCxDQUFpQkMsTUFBakIsQ0FBeUJrQixLQUF6QixDQUFnQyxDQUNuRCxHQUFJSixZQUFXLENBQUc5SSxTQUFTLENBQUM4SSxXQUFWLENBQXNCZixNQUF0QixDQUE4QkMsTUFBOUIsQ0FBbEIsQ0FDQSxHQUFJbUIsV0FBSixDQUFnQkMsR0FBaEIsQ0FFQUEsR0FBRyxDQUFHLEtBQU4sQ0FFQUQsVUFBVSxDQUFHRSxrQkFBa0IsQ0FBQ0gsS0FBRCxDQUEvQixDQUNBLE9BQVFDLFVBQVUsQ0FBQ0csS0FBWCxDQUFtQkgsVUFBVSxDQUFDSSxJQUF0QyxFQUNJLElBQUssU0FBTCxDQUNBLElBQUssVUFBTCxDQUNJSCxHQUFHLENBQUdOLFdBQVcsRUFBSSxHQUFyQixDQUNBLE1BQ0osSUFBSyxTQUFMLENBQ0lNLEdBQUcsQ0FBR04sV0FBVyxFQUFJLENBQXJCLENBQ0EsTUFDSixJQUFLLFVBQUwsQ0FDSU0sR0FBRyxDQUFHTixXQUFXLEVBQUksQ0FBckIsQ0FDQSxNQVZSLENBWUEsTUFBT00sSUFBUCxDQUVILENBckJELENBdUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBcEosU0FBUyxDQUFDd0osWUFBVixDQUF5QixTQUFTQyxTQUFULENBQW9CQyxTQUFwQixDQUErQnpFLElBQS9CLENBQXFDLENBQzFELEdBQUkwRSxVQUFTLENBQUcsSUFBaEIsQ0FDQSxHQUFJQyxVQUFTLENBQUcsQ0FBaEIsQ0FDQSxHQUFJZCxZQUFKLENBQ0EsR0FBSWUsc0JBQUosQ0FBMkJQLEtBQTNCLENBQWtDQyxJQUFsQyxDQUNBdEUsSUFBSSxDQUFHQSxJQUFJLEVBQUksRUFBZixDQUNBNEUscUJBQXFCLENBQUc1RSxJQUFJLENBQUM0RSxxQkFBN0IsQ0FDQVAsS0FBSyxDQUFHckUsSUFBSSxDQUFDcUUsS0FBYixDQUNBQyxJQUFJLENBQUd0RSxJQUFJLENBQUNzRSxJQUFaLENBRUEsSUFBSyxHQUFJaEQsRUFBQyxDQUFFLENBQVosQ0FBZUEsQ0FBQyxDQUFHbUQsU0FBUyxDQUFDSSxNQUE3QixDQUFzQ3ZELENBQUMsRUFBdkMsQ0FBMkMsQ0FDdkN1QyxXQUFXLENBQUc5SSxTQUFTLENBQUM4SSxXQUFWLENBQXNCVyxTQUF0QixDQUFpQ0MsU0FBUyxDQUFDbkQsQ0FBRCxDQUExQyxDQUFkLENBQ0EsR0FBSXVDLFdBQVcsQ0FBR2MsU0FBbEIsQ0FBNkIsQ0FDekJBLFNBQVMsQ0FBR2QsV0FBWixDQUNBYSxTQUFTLENBQUczSixTQUFTLENBQUMwSixTQUFTLENBQUNuRCxDQUFELENBQVYsQ0FBckIsQ0FDSCxDQUNKLENBRUQsR0FBSXZHLFNBQVMsQ0FBQ2lKLFVBQVYsQ0FBcUJRLFNBQXJCLENBQWdDRSxTQUFoQyxDQUEyQyxDQUFDLFFBQVFMLEtBQVQsQ0FBZSxPQUFPQyxJQUF0QixDQUEzQyxHQUEyRSxDQUFDTSxxQkFBaEYsQ0FBdUcsQ0FDbkcsTUFBT0YsVUFBUCxDQUNILENBRkQsSUFHSyxDQUNEMUUsSUFBSSxDQUFDNEUscUJBQUwsQ0FBMkIsS0FBM0IsQ0FDQSxNQUFPN0osVUFBUyxDQUFDd0osWUFBVixDQUF1QkMsU0FBdkIsQ0FBaUMsQ0FBQyxNQUFELENBQVMsTUFBVCxDQUFqQyxDQUFrRHhFLElBQWxELENBQVAsQ0FDSCxDQUNKLENBekJELENBNEJBO0FBQ0E7QUFDQTtBQUNBLEdBQUk4RSxNQUFLLENBQUcvSixTQUFTLENBQUMrSixLQUFWLENBQWtCLENBQzFCQyxTQUFTLENBQUUsUUFEZSxDQUUxQkMsWUFBWSxDQUFFLFFBRlksQ0FHMUJDLElBQUksQ0FBRSxLQUhvQixDQUkxQkMsVUFBVSxDQUFFLFFBSmMsQ0FLMUJDLEtBQUssQ0FBRSxRQUxtQixDQU0xQkMsS0FBSyxDQUFFLFFBTm1CLENBTzFCQyxNQUFNLENBQUUsUUFQa0IsQ0FRMUJDLEtBQUssQ0FBRSxLQVJtQixDQVMxQkMsY0FBYyxDQUFFLFFBVFUsQ0FVMUJDLElBQUksQ0FBRSxLQVZvQixDQVcxQkMsVUFBVSxDQUFFLFFBWGMsQ0FZMUJDLEtBQUssQ0FBRSxRQVptQixDQWExQkMsU0FBUyxDQUFFLFFBYmUsQ0FjMUJDLFdBQVcsQ0FBRSxRQWRhLENBZTFCQyxTQUFTLENBQUUsUUFmZSxDQWdCMUJDLFVBQVUsQ0FBRSxRQWhCYyxDQWlCMUJDLFNBQVMsQ0FBRSxRQWpCZSxDQWtCMUJDLEtBQUssQ0FBRSxRQWxCbUIsQ0FtQjFCQyxjQUFjLENBQUUsUUFuQlUsQ0FvQjFCQyxRQUFRLENBQUUsUUFwQmdCLENBcUIxQkMsT0FBTyxDQUFFLFFBckJpQixDQXNCMUJDLElBQUksQ0FBRSxLQXRCb0IsQ0F1QjFCQyxRQUFRLENBQUUsUUF2QmdCLENBd0IxQkMsUUFBUSxDQUFFLFFBeEJnQixDQXlCMUJDLGFBQWEsQ0FBRSxRQXpCVyxDQTBCMUJDLFFBQVEsQ0FBRSxRQTFCZ0IsQ0EyQjFCQyxTQUFTLENBQUUsUUEzQmUsQ0E0QjFCQyxRQUFRLENBQUUsUUE1QmdCLENBNkIxQkMsU0FBUyxDQUFFLFFBN0JlLENBOEIxQkMsV0FBVyxDQUFFLFFBOUJhLENBK0IxQkMsY0FBYyxDQUFFLFFBL0JVLENBZ0MxQkMsVUFBVSxDQUFFLFFBaENjLENBaUMxQkMsVUFBVSxDQUFFLFFBakNjLENBa0MxQkMsT0FBTyxDQUFFLFFBbENpQixDQW1DMUJDLFVBQVUsQ0FBRSxRQW5DYyxDQW9DMUJDLFlBQVksQ0FBRSxRQXBDWSxDQXFDMUJDLGFBQWEsQ0FBRSxRQXJDVyxDQXNDMUJDLGFBQWEsQ0FBRSxRQXRDVyxDQXVDMUJDLGFBQWEsQ0FBRSxRQXZDVyxDQXdDMUJDLGFBQWEsQ0FBRSxRQXhDVyxDQXlDMUJDLFVBQVUsQ0FBRSxRQXpDYyxDQTBDMUJDLFFBQVEsQ0FBRSxRQTFDZ0IsQ0EyQzFCQyxXQUFXLENBQUUsUUEzQ2EsQ0E0QzFCQyxPQUFPLENBQUUsUUE1Q2lCLENBNkMxQkMsT0FBTyxDQUFFLFFBN0NpQixDQThDMUJDLFVBQVUsQ0FBRSxRQTlDYyxDQStDMUJDLFNBQVMsQ0FBRSxRQS9DZSxDQWdEMUJDLFdBQVcsQ0FBRSxRQWhEYSxDQWlEMUJDLFdBQVcsQ0FBRSxRQWpEYSxDQWtEMUJDLE9BQU8sQ0FBRSxLQWxEaUIsQ0FtRDFCQyxTQUFTLENBQUUsUUFuRGUsQ0FvRDFCQyxVQUFVLENBQUUsUUFwRGMsQ0FxRDFCQyxJQUFJLENBQUUsUUFyRG9CLENBc0QxQkMsU0FBUyxDQUFFLFFBdERlLENBdUQxQkMsSUFBSSxDQUFFLFFBdkRvQixDQXdEMUJDLEtBQUssQ0FBRSxRQXhEbUIsQ0F5RDFCQyxXQUFXLENBQUUsUUF6RGEsQ0EwRDFCQyxJQUFJLENBQUUsUUExRG9CLENBMkQxQkMsUUFBUSxDQUFFLFFBM0RnQixDQTREMUJDLE9BQU8sQ0FBRSxRQTVEaUIsQ0E2RDFCQyxTQUFTLENBQUUsUUE3RGUsQ0E4RDFCQyxNQUFNLENBQUUsUUE5RGtCLENBK0QxQkMsS0FBSyxDQUFFLFFBL0RtQixDQWdFMUJDLEtBQUssQ0FBRSxRQWhFbUIsQ0FpRTFCQyxRQUFRLENBQUUsUUFqRWdCLENBa0UxQkMsYUFBYSxDQUFFLFFBbEVXLENBbUUxQkMsU0FBUyxDQUFFLFFBbkVlLENBb0UxQkMsWUFBWSxDQUFFLFFBcEVZLENBcUUxQkMsU0FBUyxDQUFFLFFBckVlLENBc0UxQkMsVUFBVSxDQUFFLFFBdEVjLENBdUUxQkMsU0FBUyxDQUFFLFFBdkVlLENBd0UxQkMsb0JBQW9CLENBQUUsUUF4RUksQ0F5RTFCQyxTQUFTLENBQUUsUUF6RWUsQ0EwRTFCQyxVQUFVLENBQUUsUUExRWMsQ0EyRTFCQyxTQUFTLENBQUUsUUEzRWUsQ0E0RTFCQyxTQUFTLENBQUUsUUE1RWUsQ0E2RTFCQyxXQUFXLENBQUUsUUE3RWEsQ0E4RTFCQyxhQUFhLENBQUUsUUE5RVcsQ0ErRTFCQyxZQUFZLENBQUUsUUEvRVksQ0FnRjFCQyxjQUFjLENBQUUsS0FoRlUsQ0FpRjFCQyxjQUFjLENBQUUsS0FqRlUsQ0FrRjFCQyxjQUFjLENBQUUsUUFsRlUsQ0FtRjFCQyxXQUFXLENBQUUsUUFuRmEsQ0FvRjFCQyxJQUFJLENBQUUsS0FwRm9CLENBcUYxQkMsU0FBUyxDQUFFLFFBckZlLENBc0YxQkMsS0FBSyxDQUFFLFFBdEZtQixDQXVGMUJDLE9BQU8sQ0FBRSxLQXZGaUIsQ0F3RjFCQyxNQUFNLENBQUUsUUF4RmtCLENBeUYxQkMsZ0JBQWdCLENBQUUsUUF6RlEsQ0EwRjFCQyxVQUFVLENBQUUsUUExRmMsQ0EyRjFCQyxZQUFZLENBQUUsUUEzRlksQ0E0RjFCQyxZQUFZLENBQUUsUUE1RlksQ0E2RjFCQyxjQUFjLENBQUUsUUE3RlUsQ0E4RjFCQyxlQUFlLENBQUUsUUE5RlMsQ0ErRjFCQyxpQkFBaUIsQ0FBRSxRQS9GTyxDQWdHMUJDLGVBQWUsQ0FBRSxRQWhHUyxDQWlHMUJDLGVBQWUsQ0FBRSxRQWpHUyxDQWtHMUJDLFlBQVksQ0FBRSxRQWxHWSxDQW1HMUJDLFNBQVMsQ0FBRSxRQW5HZSxDQW9HMUJDLFNBQVMsQ0FBRSxRQXBHZSxDQXFHMUJDLFFBQVEsQ0FBRSxRQXJHZ0IsQ0FzRzFCQyxXQUFXLENBQUUsUUF0R2EsQ0F1RzFCQyxJQUFJLENBQUUsUUF2R29CLENBd0cxQkMsT0FBTyxDQUFFLFFBeEdpQixDQXlHMUJDLEtBQUssQ0FBRSxRQXpHbUIsQ0EwRzFCQyxTQUFTLENBQUUsUUExR2UsQ0EyRzFCQyxNQUFNLENBQUUsUUEzR2tCLENBNEcxQkMsU0FBUyxDQUFFLFFBNUdlLENBNkcxQkMsTUFBTSxDQUFFLFFBN0drQixDQThHMUJDLGFBQWEsQ0FBRSxRQTlHVyxDQStHMUJDLFNBQVMsQ0FBRSxRQS9HZSxDQWdIMUJDLGFBQWEsQ0FBRSxRQWhIVyxDQWlIMUJDLGFBQWEsQ0FBRSxRQWpIVyxDQWtIMUJDLFVBQVUsQ0FBRSxRQWxIYyxDQW1IMUJDLFNBQVMsQ0FBRSxRQW5IZSxDQW9IMUJDLElBQUksQ0FBRSxRQXBIb0IsQ0FxSDFCQyxJQUFJLENBQUUsUUFySG9CLENBc0gxQkMsSUFBSSxDQUFFLFFBdEhvQixDQXVIMUJDLFVBQVUsQ0FBRSxRQXZIYyxDQXdIMUJDLE1BQU0sQ0FBRSxRQXhIa0IsQ0F5SDFCQyxhQUFhLENBQUUsUUF6SFcsQ0EwSDFCQyxHQUFHLENBQUUsS0ExSHFCLENBMkgxQkMsU0FBUyxDQUFFLFFBM0hlLENBNEgxQkMsU0FBUyxDQUFFLFFBNUhlLENBNkgxQkMsV0FBVyxDQUFFLFFBN0hhLENBOEgxQkMsTUFBTSxDQUFFLFFBOUhrQixDQStIMUJDLFVBQVUsQ0FBRSxRQS9IYyxDQWdJMUJDLFFBQVEsQ0FBRSxRQWhJZ0IsQ0FpSTFCQyxRQUFRLENBQUUsUUFqSWdCLENBa0kxQkMsTUFBTSxDQUFFLFFBbElrQixDQW1JMUJDLE1BQU0sQ0FBRSxRQW5Ja0IsQ0FvSTFCQyxPQUFPLENBQUUsUUFwSWlCLENBcUkxQkMsU0FBUyxDQUFFLFFBckllLENBc0kxQkMsU0FBUyxDQUFFLFFBdEllLENBdUkxQkMsU0FBUyxDQUFFLFFBdkllLENBd0kxQkMsSUFBSSxDQUFFLFFBeElvQixDQXlJMUJDLFdBQVcsQ0FBRSxRQXpJYSxDQTBJMUJDLFNBQVMsQ0FBRSxRQTFJZSxDQTJJMUJDLEdBQUcsQ0FBRSxRQTNJcUIsQ0E0STFCQyxJQUFJLENBQUUsUUE1SW9CLENBNkkxQkMsT0FBTyxDQUFFLFFBN0lpQixDQThJMUJDLE1BQU0sQ0FBRSxRQTlJa0IsQ0ErSTFCQyxTQUFTLENBQUUsUUEvSWUsQ0FnSjFCQyxNQUFNLENBQUUsUUFoSmtCLENBaUoxQkMsS0FBSyxDQUFFLFFBakptQixDQWtKMUJDLEtBQUssQ0FBRSxLQWxKbUIsQ0FtSjFCQyxVQUFVLENBQUUsUUFuSmMsQ0FvSjFCQyxNQUFNLENBQUUsS0FwSmtCLENBcUoxQkMsV0FBVyxDQUFFLFFBckphLENBQTlCLENBd0pBO0FBQ0EsR0FBSWpQLFNBQVEsQ0FBR25FLFNBQVMsQ0FBQ21FLFFBQVYsQ0FBcUJrUCxJQUFJLENBQUN0SixLQUFELENBQXhDLENBR0E7QUFDQTtBQUVBO0FBQ0EsUUFBU3NKLEtBQVQsQ0FBY0MsQ0FBZCxDQUFpQixDQUNiLEdBQUlDLFFBQU8sQ0FBRyxFQUFkLENBQ0EsSUFBSyxHQUFJaE4sRUFBVCxHQUFjK00sRUFBZCxDQUFpQixDQUNiLEdBQUlBLENBQUMsQ0FBQzlNLGNBQUYsQ0FBaUJELENBQWpCLENBQUosQ0FBeUIsQ0FDckJnTixPQUFPLENBQUNELENBQUMsQ0FBQy9NLENBQUQsQ0FBRixDQUFQLENBQWdCQSxDQUFoQixDQUNILENBQ0osQ0FDRCxNQUFPZ04sUUFBUCxDQUNILENBRUQ7QUFDQSxRQUFTOVEsV0FBVCxDQUFvQjVCLENBQXBCLENBQXVCLENBQ25CQSxDQUFDLENBQUcyUyxVQUFVLENBQUMzUyxDQUFELENBQWQsQ0FFQSxHQUFJNFMsS0FBSyxDQUFDNVMsQ0FBRCxDQUFMLEVBQVlBLENBQUMsQ0FBRyxDQUFoQixFQUFxQkEsQ0FBQyxDQUFHLENBQTdCLENBQWdDLENBQzVCQSxDQUFDLENBQUcsQ0FBSixDQUNILENBRUQsTUFBT0EsRUFBUCxDQUNILENBRUQ7QUFDQSxRQUFTbUQsUUFBVCxDQUFpQjBQLENBQWpCLENBQW9CN1QsR0FBcEIsQ0FBeUIsQ0FDckIsR0FBSThULGNBQWMsQ0FBQ0QsQ0FBRCxDQUFsQixDQUF1QixDQUFFQSxDQUFDLENBQUcsTUFBSixDQUFhLENBRXRDLEdBQUlFLGVBQWMsQ0FBR0MsWUFBWSxDQUFDSCxDQUFELENBQWpDLENBQ0FBLENBQUMsQ0FBR2hVLE9BQU8sQ0FBQ0csR0FBRCxDQUFNRCxPQUFPLENBQUMsQ0FBRCxDQUFJNFQsVUFBVSxDQUFDRSxDQUFELENBQWQsQ0FBYixDQUFYLENBRUE7QUFDQSxHQUFJRSxjQUFKLENBQW9CLENBQ2hCRixDQUFDLENBQUdJLFFBQVEsQ0FBQ0osQ0FBQyxDQUFHN1QsR0FBTCxDQUFVLEVBQVYsQ0FBUixDQUF3QixHQUE1QixDQUNILENBRUQ7QUFDQSxHQUFLVCxJQUFJLENBQUMyVSxHQUFMLENBQVNMLENBQUMsQ0FBRzdULEdBQWIsRUFBb0IsUUFBekIsQ0FBb0MsQ0FDaEMsTUFBTyxFQUFQLENBQ0gsQ0FFRDtBQUNBLE1BQVE2VCxFQUFDLENBQUc3VCxHQUFMLENBQVkyVCxVQUFVLENBQUMzVCxHQUFELENBQTdCLENBQ0gsQ0FFRDtBQUNBLFFBQVNxSSxRQUFULENBQWlCOEwsR0FBakIsQ0FBc0IsQ0FDbEIsTUFBT3RVLFFBQU8sQ0FBQyxDQUFELENBQUlFLE9BQU8sQ0FBQyxDQUFELENBQUlvVSxHQUFKLENBQVgsQ0FBZCxDQUNILENBRUQ7QUFDQSxRQUFTQyxnQkFBVCxDQUF5QkQsR0FBekIsQ0FBOEIsQ0FDMUIsTUFBT0YsU0FBUSxDQUFDRSxHQUFELENBQU0sRUFBTixDQUFmLENBQ0gsQ0FFRDtBQUNBO0FBQ0EsUUFBU0wsZUFBVCxDQUF3QkQsQ0FBeEIsQ0FBMkIsQ0FDdkIsTUFBTyxPQUFPQSxFQUFQLEVBQVksUUFBWixFQUF3QkEsQ0FBQyxDQUFDUSxPQUFGLENBQVUsR0FBVixHQUFrQixDQUFDLENBQTNDLEVBQWdEVixVQUFVLENBQUNFLENBQUQsQ0FBVixHQUFrQixDQUF6RSxDQUNILENBRUQ7QUFDQSxRQUFTRyxhQUFULENBQXNCSCxDQUF0QixDQUF5QixDQUNyQixNQUFPLE9BQU9BLEVBQVAsR0FBYSxRQUFiLEVBQXlCQSxDQUFDLENBQUNRLE9BQUYsQ0FBVSxHQUFWLEdBQWtCLENBQUMsQ0FBbkQsQ0FDSCxDQUVEO0FBQ0EsUUFBU3hNLEtBQVQsQ0FBY3lNLENBQWQsQ0FBaUIsQ0FDYixNQUFPQSxFQUFDLENBQUNySyxNQUFGLEVBQVksQ0FBWixDQUFnQixJQUFNcUssQ0FBdEIsQ0FBMEIsR0FBS0EsQ0FBdEMsQ0FDSCxDQUVEO0FBQ0EsUUFBUzFOLG9CQUFULENBQTZCaU4sQ0FBN0IsQ0FBZ0MsQ0FDNUIsR0FBSUEsQ0FBQyxFQUFJLENBQVQsQ0FBWSxDQUNSQSxDQUFDLENBQUlBLENBQUMsQ0FBRyxHQUFMLENBQVksR0FBaEIsQ0FDSCxDQUVELE1BQU9BLEVBQVAsQ0FDSCxDQUVEO0FBQ0EsUUFBUzdMLG9CQUFULENBQTZCWixDQUE3QixDQUFnQyxDQUM1QixNQUFPN0gsS0FBSSxDQUFDSyxLQUFMLENBQVcrVCxVQUFVLENBQUN2TSxDQUFELENBQVYsQ0FBZ0IsR0FBM0IsRUFBZ0N4QyxRQUFoQyxDQUF5QyxFQUF6QyxDQUFQLENBQ0gsQ0FDRDtBQUNBLFFBQVMyUCxvQkFBVCxDQUE2QnZSLENBQTdCLENBQWdDLENBQzVCLE1BQVFvUixnQkFBZSxDQUFDcFIsQ0FBRCxDQUFmLENBQXFCLEdBQTdCLENBQ0gsQ0FFRCxHQUFJd1IsU0FBUSxDQUFJLFVBQVcsQ0FFdkI7QUFDQSxHQUFJQyxZQUFXLENBQUcsZUFBbEIsQ0FFQTtBQUNBLEdBQUlDLFdBQVUsQ0FBRyxzQkFBakIsQ0FFQTtBQUNBLEdBQUlDLFNBQVEsQ0FBRyxNQUFRRCxVQUFSLENBQXFCLE9BQXJCLENBQStCRCxXQUEvQixDQUE2QyxHQUE1RCxDQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUlHLGtCQUFpQixDQUFHLGNBQWdCRCxRQUFoQixDQUEyQixZQUEzQixDQUEwQ0EsUUFBMUMsQ0FBcUQsWUFBckQsQ0FBb0VBLFFBQXBFLENBQStFLFdBQXZHLENBQ0EsR0FBSUUsa0JBQWlCLENBQUcsY0FBZ0JGLFFBQWhCLENBQTJCLFlBQTNCLENBQTBDQSxRQUExQyxDQUFxRCxZQUFyRCxDQUFvRUEsUUFBcEUsQ0FBK0UsWUFBL0UsQ0FBOEZBLFFBQTlGLENBQXlHLFdBQWpJLENBRUEsTUFBTyxDQUNIQSxRQUFRLENBQUUsR0FBSUcsT0FBSixDQUFXSCxRQUFYLENBRFAsQ0FFSHJVLEdBQUcsQ0FBRSxHQUFJd1UsT0FBSixDQUFXLE1BQVFGLGlCQUFuQixDQUZGLENBR0g1TCxJQUFJLENBQUUsR0FBSThMLE9BQUosQ0FBVyxPQUFTRCxpQkFBcEIsQ0FISCxDQUlIeFIsR0FBRyxDQUFFLEdBQUl5UixPQUFKLENBQVcsTUFBUUYsaUJBQW5CLENBSkYsQ0FLSEcsSUFBSSxDQUFFLEdBQUlELE9BQUosQ0FBVyxPQUFTRCxpQkFBcEIsQ0FMSCxDQU1IL1IsR0FBRyxDQUFFLEdBQUlnUyxPQUFKLENBQVcsTUFBUUYsaUJBQW5CLENBTkYsQ0FPSEksSUFBSSxDQUFFLEdBQUlGLE9BQUosQ0FBVyxPQUFTRCxpQkFBcEIsQ0FQSCxDQVFISSxJQUFJLENBQUUsc0RBUkgsQ0FTSEMsSUFBSSxDQUFFLHNEQVRILENBVUhDLElBQUksQ0FBRSxzRUFWSCxDQVdIQyxJQUFJLENBQUUsc0VBWEgsQ0FBUCxDQWFILENBOUJjLEVBQWYsQ0FnQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBU3RPLGVBQVQsQ0FBd0IxRyxLQUF4QixDQUErQixDQUMzQixNQUFPLENBQUMsQ0FBQ29VLFFBQVEsQ0FBQ0csUUFBVCxDQUFrQlUsSUFBbEIsQ0FBdUJqVixLQUF2QixDQUFULENBQ0gsQ0FFRDtBQUNBO0FBQ0E7QUFDQSxRQUFTeUcsb0JBQVQsQ0FBNkJ6RyxLQUE3QixDQUFvQyxDQUVoQ0EsS0FBSyxDQUFHQSxLQUFLLENBQUNrVixPQUFOLENBQWM5VixRQUFkLENBQXVCLEVBQXZCLEVBQTJCOFYsT0FBM0IsQ0FBbUM3VixTQUFuQyxDQUE4QyxFQUE5QyxFQUFrRDhWLFdBQWxELEVBQVIsQ0FDQSxHQUFJQyxNQUFLLENBQUcsS0FBWixDQUNBLEdBQUl0TCxLQUFLLENBQUM5SixLQUFELENBQVQsQ0FBa0IsQ0FDZEEsS0FBSyxDQUFHOEosS0FBSyxDQUFDOUosS0FBRCxDQUFiLENBQ0FvVixLQUFLLENBQUcsSUFBUixDQUNILENBSEQsSUFJSyxJQUFJcFYsS0FBSyxFQUFJLGFBQWIsQ0FBNEIsQ0FDN0IsTUFBTyxDQUFFTSxDQUFDLENBQUUsQ0FBTCxDQUFRRSxDQUFDLENBQUUsQ0FBWCxDQUFjRSxDQUFDLENBQUUsQ0FBakIsQ0FBb0JFLENBQUMsQ0FBRSxDQUF2QixDQUEwQkcsTUFBTSxDQUFFLE1BQWxDLENBQVAsQ0FDSCxDQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBSXNVLE1BQUosQ0FDQSxHQUFLQSxLQUFLLENBQUdqQixRQUFRLENBQUNsVSxHQUFULENBQWErVSxJQUFiLENBQWtCalYsS0FBbEIsQ0FBYixDQUF3QyxDQUNwQyxNQUFPLENBQUVNLENBQUMsQ0FBRStVLEtBQUssQ0FBQyxDQUFELENBQVYsQ0FBZTdVLENBQUMsQ0FBRTZVLEtBQUssQ0FBQyxDQUFELENBQXZCLENBQTRCM1UsQ0FBQyxDQUFFMlUsS0FBSyxDQUFDLENBQUQsQ0FBcEMsQ0FBUCxDQUNILENBQ0QsR0FBS0EsS0FBSyxDQUFHakIsUUFBUSxDQUFDeEwsSUFBVCxDQUFjcU0sSUFBZCxDQUFtQmpWLEtBQW5CLENBQWIsQ0FBeUMsQ0FDckMsTUFBTyxDQUFFTSxDQUFDLENBQUUrVSxLQUFLLENBQUMsQ0FBRCxDQUFWLENBQWU3VSxDQUFDLENBQUU2VSxLQUFLLENBQUMsQ0FBRCxDQUF2QixDQUE0QjNVLENBQUMsQ0FBRTJVLEtBQUssQ0FBQyxDQUFELENBQXBDLENBQXlDelUsQ0FBQyxDQUFFeVUsS0FBSyxDQUFDLENBQUQsQ0FBakQsQ0FBUCxDQUNILENBQ0QsR0FBS0EsS0FBSyxDQUFHakIsUUFBUSxDQUFDblIsR0FBVCxDQUFhZ1MsSUFBYixDQUFrQmpWLEtBQWxCLENBQWIsQ0FBd0MsQ0FDcEMsTUFBTyxDQUFFNEMsQ0FBQyxDQUFFeVMsS0FBSyxDQUFDLENBQUQsQ0FBVixDQUFleFMsQ0FBQyxDQUFFd1MsS0FBSyxDQUFDLENBQUQsQ0FBdkIsQ0FBNEJsUyxDQUFDLENBQUVrUyxLQUFLLENBQUMsQ0FBRCxDQUFwQyxDQUFQLENBQ0gsQ0FDRCxHQUFLQSxLQUFLLENBQUdqQixRQUFRLENBQUNPLElBQVQsQ0FBY00sSUFBZCxDQUFtQmpWLEtBQW5CLENBQWIsQ0FBeUMsQ0FDckMsTUFBTyxDQUFFNEMsQ0FBQyxDQUFFeVMsS0FBSyxDQUFDLENBQUQsQ0FBVixDQUFleFMsQ0FBQyxDQUFFd1MsS0FBSyxDQUFDLENBQUQsQ0FBdkIsQ0FBNEJsUyxDQUFDLENBQUVrUyxLQUFLLENBQUMsQ0FBRCxDQUFwQyxDQUF5Q3pVLENBQUMsQ0FBRXlVLEtBQUssQ0FBQyxDQUFELENBQWpELENBQVAsQ0FDSCxDQUNELEdBQUtBLEtBQUssQ0FBR2pCLFFBQVEsQ0FBQzFSLEdBQVQsQ0FBYXVTLElBQWIsQ0FBa0JqVixLQUFsQixDQUFiLENBQXdDLENBQ3BDLE1BQU8sQ0FBRTRDLENBQUMsQ0FBRXlTLEtBQUssQ0FBQyxDQUFELENBQVYsQ0FBZXhTLENBQUMsQ0FBRXdTLEtBQUssQ0FBQyxDQUFELENBQXZCLENBQTRCdlMsQ0FBQyxDQUFFdVMsS0FBSyxDQUFDLENBQUQsQ0FBcEMsQ0FBUCxDQUNILENBQ0QsR0FBS0EsS0FBSyxDQUFHakIsUUFBUSxDQUFDUSxJQUFULENBQWNLLElBQWQsQ0FBbUJqVixLQUFuQixDQUFiLENBQXlDLENBQ3JDLE1BQU8sQ0FBRTRDLENBQUMsQ0FBRXlTLEtBQUssQ0FBQyxDQUFELENBQVYsQ0FBZXhTLENBQUMsQ0FBRXdTLEtBQUssQ0FBQyxDQUFELENBQXZCLENBQTRCdlMsQ0FBQyxDQUFFdVMsS0FBSyxDQUFDLENBQUQsQ0FBcEMsQ0FBeUN6VSxDQUFDLENBQUV5VSxLQUFLLENBQUMsQ0FBRCxDQUFqRCxDQUFQLENBQ0gsQ0FDRCxHQUFLQSxLQUFLLENBQUdqQixRQUFRLENBQUNZLElBQVQsQ0FBY0MsSUFBZCxDQUFtQmpWLEtBQW5CLENBQWIsQ0FBeUMsQ0FDckMsTUFBTyxDQUNITSxDQUFDLENBQUUwVCxlQUFlLENBQUNxQixLQUFLLENBQUMsQ0FBRCxDQUFOLENBRGYsQ0FFSDdVLENBQUMsQ0FBRXdULGVBQWUsQ0FBQ3FCLEtBQUssQ0FBQyxDQUFELENBQU4sQ0FGZixDQUdIM1UsQ0FBQyxDQUFFc1QsZUFBZSxDQUFDcUIsS0FBSyxDQUFDLENBQUQsQ0FBTixDQUhmLENBSUh6VSxDQUFDLENBQUV1VCxtQkFBbUIsQ0FBQ2tCLEtBQUssQ0FBQyxDQUFELENBQU4sQ0FKbkIsQ0FLSHRVLE1BQU0sQ0FBRXFVLEtBQUssQ0FBRyxNQUFILENBQVksTUFMdEIsQ0FBUCxDQU9ILENBQ0QsR0FBS0MsS0FBSyxDQUFHakIsUUFBUSxDQUFDVSxJQUFULENBQWNHLElBQWQsQ0FBbUJqVixLQUFuQixDQUFiLENBQXlDLENBQ3JDLE1BQU8sQ0FDSE0sQ0FBQyxDQUFFMFQsZUFBZSxDQUFDcUIsS0FBSyxDQUFDLENBQUQsQ0FBTixDQURmLENBRUg3VSxDQUFDLENBQUV3VCxlQUFlLENBQUNxQixLQUFLLENBQUMsQ0FBRCxDQUFOLENBRmYsQ0FHSDNVLENBQUMsQ0FBRXNULGVBQWUsQ0FBQ3FCLEtBQUssQ0FBQyxDQUFELENBQU4sQ0FIZixDQUlIdFUsTUFBTSxDQUFFcVUsS0FBSyxDQUFHLE1BQUgsQ0FBWSxLQUp0QixDQUFQLENBTUgsQ0FDRCxHQUFLQyxLQUFLLENBQUdqQixRQUFRLENBQUNXLElBQVQsQ0FBY0UsSUFBZCxDQUFtQmpWLEtBQW5CLENBQWIsQ0FBeUMsQ0FDckMsTUFBTyxDQUNITSxDQUFDLENBQUUwVCxlQUFlLENBQUNxQixLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVcsRUFBWCxDQUFnQkEsS0FBSyxDQUFDLENBQUQsQ0FBdEIsQ0FEZixDQUVIN1UsQ0FBQyxDQUFFd1QsZUFBZSxDQUFDcUIsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFXLEVBQVgsQ0FBZ0JBLEtBQUssQ0FBQyxDQUFELENBQXRCLENBRmYsQ0FHSDNVLENBQUMsQ0FBRXNULGVBQWUsQ0FBQ3FCLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBVyxFQUFYLENBQWdCQSxLQUFLLENBQUMsQ0FBRCxDQUF0QixDQUhmLENBSUh6VSxDQUFDLENBQUV1VCxtQkFBbUIsQ0FBQ2tCLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBVyxFQUFYLENBQWdCQSxLQUFLLENBQUMsQ0FBRCxDQUF0QixDQUpuQixDQUtIdFUsTUFBTSxDQUFFcVUsS0FBSyxDQUFHLE1BQUgsQ0FBWSxNQUx0QixDQUFQLENBT0gsQ0FDRCxHQUFLQyxLQUFLLENBQUdqQixRQUFRLENBQUNTLElBQVQsQ0FBY0ksSUFBZCxDQUFtQmpWLEtBQW5CLENBQWIsQ0FBeUMsQ0FDckMsTUFBTyxDQUNITSxDQUFDLENBQUUwVCxlQUFlLENBQUNxQixLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVcsRUFBWCxDQUFnQkEsS0FBSyxDQUFDLENBQUQsQ0FBdEIsQ0FEZixDQUVIN1UsQ0FBQyxDQUFFd1QsZUFBZSxDQUFDcUIsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFXLEVBQVgsQ0FBZ0JBLEtBQUssQ0FBQyxDQUFELENBQXRCLENBRmYsQ0FHSDNVLENBQUMsQ0FBRXNULGVBQWUsQ0FBQ3FCLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBVyxFQUFYLENBQWdCQSxLQUFLLENBQUMsQ0FBRCxDQUF0QixDQUhmLENBSUh0VSxNQUFNLENBQUVxVSxLQUFLLENBQUcsTUFBSCxDQUFZLEtBSnRCLENBQVAsQ0FNSCxDQUVELE1BQU8sTUFBUCxDQUNILENBRUQsUUFBU2hNLG1CQUFULENBQTRCa00sS0FBNUIsQ0FBbUMsQ0FDL0I7QUFDQTtBQUNBLEdBQUlqTSxNQUFKLENBQVdDLElBQVgsQ0FDQWdNLEtBQUssQ0FBR0EsS0FBSyxFQUFJLENBQUMsUUFBUSxJQUFULENBQWUsT0FBTyxPQUF0QixDQUFqQixDQUNBak0sS0FBSyxDQUFHLENBQUNpTSxLQUFLLENBQUNqTSxLQUFOLEVBQWUsSUFBaEIsRUFBc0JrTSxXQUF0QixFQUFSLENBQ0FqTSxJQUFJLENBQUcsQ0FBQ2dNLEtBQUssQ0FBQ2hNLElBQU4sRUFBYyxPQUFmLEVBQXdCNkwsV0FBeEIsRUFBUCxDQUNBLEdBQUk5TCxLQUFLLEdBQUssSUFBVixFQUFrQkEsS0FBSyxHQUFLLEtBQWhDLENBQXVDLENBQ25DQSxLQUFLLENBQUcsSUFBUixDQUNILENBQ0QsR0FBSUMsSUFBSSxHQUFLLE9BQVQsRUFBb0JBLElBQUksR0FBSyxPQUFqQyxDQUEwQyxDQUN0Q0EsSUFBSSxDQUFHLE9BQVAsQ0FDSCxDQUNELE1BQU8sQ0FBQyxRQUFRRCxLQUFULENBQWdCLE9BQU9DLElBQXZCLENBQVAsQ0FDSCxDQUVEO0FBQ0EsR0FBSSxPQUFpQ2tNLE1BQU0sQ0FBQ0MsT0FBNUMsQ0FBcUQsQ0FDakRELE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQjFWLFNBQWpCLENBQ0gsQ0FDRDtBQUhBLElBSUssSUFBSSxJQUFKLENBQWdELENBQ2pEMlYsbUNBQU8sVUFBWSxDQUFDLE1BQU8zVixVQUFQLENBQWtCLENBQWhDO0FBQUEsb0dBQU4sQ0FDSCxDQUNEO0FBSEssSUFJQSxFQUlKLENBdHFDRCxFQXNxQ0daLElBdHFDSCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90aW55Y29sb3IyL3Rpbnljb2xvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRpbnlDb2xvciB2MS40LjJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZ3JpbnMvVGlueUNvbG9yXG4vLyBCcmlhbiBHcmluc3RlYWQsIE1JVCBMaWNlbnNlXG5cbihmdW5jdGlvbihNYXRoKSB7XG5cbnZhciB0cmltTGVmdCA9IC9eXFxzKy8sXG4gICAgdHJpbVJpZ2h0ID0gL1xccyskLyxcbiAgICB0aW55Q291bnRlciA9IDAsXG4gICAgbWF0aFJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICBtYXRoTWluID0gTWF0aC5taW4sXG4gICAgbWF0aE1heCA9IE1hdGgubWF4LFxuICAgIG1hdGhSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuZnVuY3Rpb24gdGlueWNvbG9yIChjb2xvciwgb3B0cykge1xuXG4gICAgY29sb3IgPSAoY29sb3IpID8gY29sb3IgOiAnJztcbiAgICBvcHRzID0gb3B0cyB8fCB7IH07XG5cbiAgICAvLyBJZiBpbnB1dCBpcyBhbHJlYWR5IGEgdGlueWNvbG9yLCByZXR1cm4gaXRzZWxmXG4gICAgaWYgKGNvbG9yIGluc3RhbmNlb2YgdGlueWNvbG9yKSB7XG4gICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBhcmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGNhbGwgdXNpbmcgbmV3IGluc3RlYWRcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgdGlueWNvbG9yKSkge1xuICAgICAgICByZXR1cm4gbmV3IHRpbnljb2xvcihjb2xvciwgb3B0cyk7XG4gICAgfVxuXG4gICAgdmFyIHJnYiA9IGlucHV0VG9SR0IoY29sb3IpO1xuICAgIHRoaXMuX29yaWdpbmFsSW5wdXQgPSBjb2xvcixcbiAgICB0aGlzLl9yID0gcmdiLnIsXG4gICAgdGhpcy5fZyA9IHJnYi5nLFxuICAgIHRoaXMuX2IgPSByZ2IuYixcbiAgICB0aGlzLl9hID0gcmdiLmEsXG4gICAgdGhpcy5fcm91bmRBID0gbWF0aFJvdW5kKDEwMCp0aGlzLl9hKSAvIDEwMCxcbiAgICB0aGlzLl9mb3JtYXQgPSBvcHRzLmZvcm1hdCB8fCByZ2IuZm9ybWF0O1xuICAgIHRoaXMuX2dyYWRpZW50VHlwZSA9IG9wdHMuZ3JhZGllbnRUeXBlO1xuXG4gICAgLy8gRG9uJ3QgbGV0IHRoZSByYW5nZSBvZiBbMCwyNTVdIGNvbWUgYmFjayBpbiBbMCwxXS5cbiAgICAvLyBQb3RlbnRpYWxseSBsb3NlIGEgbGl0dGxlIGJpdCBvZiBwcmVjaXNpb24gaGVyZSwgYnV0IHdpbGwgZml4IGlzc3VlcyB3aGVyZVxuICAgIC8vIC41IGdldHMgaW50ZXJwcmV0ZWQgYXMgaGFsZiBvZiB0aGUgdG90YWwsIGluc3RlYWQgb2YgaGFsZiBvZiAxXG4gICAgLy8gSWYgaXQgd2FzIHN1cHBvc2VkIHRvIGJlIDEyOCwgdGhpcyB3YXMgYWxyZWFkeSB0YWtlbiBjYXJlIG9mIGJ5IGBpbnB1dFRvUmdiYFxuICAgIGlmICh0aGlzLl9yIDwgMSkgeyB0aGlzLl9yID0gbWF0aFJvdW5kKHRoaXMuX3IpOyB9XG4gICAgaWYgKHRoaXMuX2cgPCAxKSB7IHRoaXMuX2cgPSBtYXRoUm91bmQodGhpcy5fZyk7IH1cbiAgICBpZiAodGhpcy5fYiA8IDEpIHsgdGhpcy5fYiA9IG1hdGhSb3VuZCh0aGlzLl9iKTsgfVxuXG4gICAgdGhpcy5fb2sgPSByZ2Iub2s7XG4gICAgdGhpcy5fdGNfaWQgPSB0aW55Q291bnRlcisrO1xufVxuXG50aW55Y29sb3IucHJvdG90eXBlID0ge1xuICAgIGlzRGFyazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJyaWdodG5lc3MoKSA8IDEyODtcbiAgICB9LFxuICAgIGlzTGlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNEYXJrKCk7XG4gICAgfSxcbiAgICBpc1ZhbGlkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29rO1xuICAgIH0sXG4gICAgZ2V0T3JpZ2luYWxJbnB1dDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fb3JpZ2luYWxJbnB1dDtcbiAgICB9LFxuICAgIGdldEZvcm1hdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXQ7XG4gICAgfSxcbiAgICBnZXRBbHBoYTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hO1xuICAgIH0sXG4gICAgZ2V0QnJpZ2h0bmVzczogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vaHR0cDovL3d3dy53My5vcmcvVFIvQUVSVCNjb2xvci1jb250cmFzdFxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICByZXR1cm4gKHJnYi5yICogMjk5ICsgcmdiLmcgKiA1ODcgKyByZ2IuYiAqIDExNCkgLyAxMDAwO1xuICAgIH0sXG4gICAgZ2V0THVtaW5hbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9odHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHZhciBSc1JHQiwgR3NSR0IsIEJzUkdCLCBSLCBHLCBCO1xuICAgICAgICBSc1JHQiA9IHJnYi5yLzI1NTtcbiAgICAgICAgR3NSR0IgPSByZ2IuZy8yNTU7XG4gICAgICAgIEJzUkdCID0gcmdiLmIvMjU1O1xuXG4gICAgICAgIGlmIChSc1JHQiA8PSAwLjAzOTI4KSB7UiA9IFJzUkdCIC8gMTIuOTI7fSBlbHNlIHtSID0gTWF0aC5wb3coKChSc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIGlmIChHc1JHQiA8PSAwLjAzOTI4KSB7RyA9IEdzUkdCIC8gMTIuOTI7fSBlbHNlIHtHID0gTWF0aC5wb3coKChHc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIGlmIChCc1JHQiA8PSAwLjAzOTI4KSB7QiA9IEJzUkdCIC8gMTIuOTI7fSBlbHNlIHtCID0gTWF0aC5wb3coKChCc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIHJldHVybiAoMC4yMTI2ICogUikgKyAoMC43MTUyICogRykgKyAoMC4wNzIyICogQik7XG4gICAgfSxcbiAgICBzZXRBbHBoYTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYSA9IGJvdW5kQWxwaGEodmFsdWUpO1xuICAgICAgICB0aGlzLl9yb3VuZEEgPSBtYXRoUm91bmQoMTAwKnRoaXMuX2EpIC8gMTAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHRvSHN2OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzdiA9IHJnYlRvSHN2KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICByZXR1cm4geyBoOiBoc3YuaCAqIDM2MCwgczogaHN2LnMsIHY6IGhzdi52LCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b0hzdlN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc3YgPSByZ2JUb0hzdih0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgdmFyIGggPSBtYXRoUm91bmQoaHN2LmggKiAzNjApLCBzID0gbWF0aFJvdW5kKGhzdi5zICogMTAwKSwgdiA9IG1hdGhSb3VuZChoc3YudiAqIDEwMCk7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJoc3YoXCIgICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgdiArIFwiJSlcIiA6XG4gICAgICAgICAgXCJoc3ZhKFwiICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgdiArIFwiJSwgXCIrIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9Ic2w6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2wodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHJldHVybiB7IGg6IGhzbC5oICogMzYwLCBzOiBoc2wucywgbDogaHNsLmwsIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvSHNsU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzbCA9IHJnYlRvSHNsKHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICB2YXIgaCA9IG1hdGhSb3VuZChoc2wuaCAqIDM2MCksIHMgPSBtYXRoUm91bmQoaHNsLnMgKiAxMDApLCBsID0gbWF0aFJvdW5kKGhzbC5sICogMTAwKTtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcImhzbChcIiAgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyBsICsgXCIlKVwiIDpcbiAgICAgICAgICBcImhzbGEoXCIgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyBsICsgXCIlLCBcIisgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b0hleDogZnVuY3Rpb24oYWxsb3czQ2hhcikge1xuICAgICAgICByZXR1cm4gcmdiVG9IZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgYWxsb3czQ2hhcik7XG4gICAgfSxcbiAgICB0b0hleFN0cmluZzogZnVuY3Rpb24oYWxsb3czQ2hhcikge1xuICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hleChhbGxvdzNDaGFyKTtcbiAgICB9LFxuICAgIHRvSGV4ODogZnVuY3Rpb24oYWxsb3c0Q2hhcikge1xuICAgICAgICByZXR1cm4gcmdiYVRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EsIGFsbG93NENoYXIpO1xuICAgIH0sXG4gICAgdG9IZXg4U3RyaW5nOiBmdW5jdGlvbihhbGxvdzRDaGFyKSB7XG4gICAgICAgIHJldHVybiAnIycgKyB0aGlzLnRvSGV4OChhbGxvdzRDaGFyKTtcbiAgICB9LFxuICAgIHRvUmdiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0aFJvdW5kKHRoaXMuX3IpLCBnOiBtYXRoUm91bmQodGhpcy5fZyksIGI6IG1hdGhSb3VuZCh0aGlzLl9iKSwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9SZ2JTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwicmdiKFwiICArIG1hdGhSb3VuZCh0aGlzLl9yKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9nKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9iKSArIFwiKVwiIDpcbiAgICAgICAgICBcInJnYmEoXCIgKyBtYXRoUm91bmQodGhpcy5fcikgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fZykgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fYikgKyBcIiwgXCIgKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvUGVyY2VudGFnZVJnYjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgXCIlXCIsIGc6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2csIDI1NSkgKiAxMDApICsgXCIlXCIsIGI6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgXCIlXCIsIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvUGVyY2VudGFnZVJnYlN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJyZ2IoXCIgICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fciwgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fYiwgMjU1KSAqIDEwMCkgKyBcIiUpXCIgOlxuICAgICAgICAgIFwicmdiYShcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2csIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9OYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2EgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYSA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZXhOYW1lc1tyZ2JUb0hleCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iLCB0cnVlKV0gfHwgZmFsc2U7XG4gICAgfSxcbiAgICB0b0ZpbHRlcjogZnVuY3Rpb24oc2Vjb25kQ29sb3IpIHtcbiAgICAgICAgdmFyIGhleDhTdHJpbmcgPSAnIycgKyByZ2JhVG9BcmdiSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EpO1xuICAgICAgICB2YXIgc2Vjb25kSGV4OFN0cmluZyA9IGhleDhTdHJpbmc7XG4gICAgICAgIHZhciBncmFkaWVudFR5cGUgPSB0aGlzLl9ncmFkaWVudFR5cGUgPyBcIkdyYWRpZW50VHlwZSA9IDEsIFwiIDogXCJcIjtcblxuICAgICAgICBpZiAoc2Vjb25kQ29sb3IpIHtcbiAgICAgICAgICAgIHZhciBzID0gdGlueWNvbG9yKHNlY29uZENvbG9yKTtcbiAgICAgICAgICAgIHNlY29uZEhleDhTdHJpbmcgPSAnIycgKyByZ2JhVG9BcmdiSGV4KHMuX3IsIHMuX2csIHMuX2IsIHMuX2EpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KFwiK2dyYWRpZW50VHlwZStcInN0YXJ0Q29sb3JzdHI9XCIraGV4OFN0cmluZytcIixlbmRDb2xvcnN0cj1cIitzZWNvbmRIZXg4U3RyaW5nK1wiKVwiO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgZm9ybWF0U2V0ID0gISFmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCB0aGlzLl9mb3JtYXQ7XG5cbiAgICAgICAgdmFyIGZvcm1hdHRlZFN0cmluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzQWxwaGEgPSB0aGlzLl9hIDwgMSAmJiB0aGlzLl9hID49IDA7XG4gICAgICAgIHZhciBuZWVkc0FscGhhRm9ybWF0ID0gIWZvcm1hdFNldCAmJiBoYXNBbHBoYSAmJiAoZm9ybWF0ID09PSBcImhleFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg2XCIgfHwgZm9ybWF0ID09PSBcImhleDNcIiB8fCBmb3JtYXQgPT09IFwiaGV4NFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg4XCIgfHwgZm9ybWF0ID09PSBcIm5hbWVcIik7XG5cbiAgICAgICAgaWYgKG5lZWRzQWxwaGFGb3JtYXQpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgXCJ0cmFuc3BhcmVudFwiLCBhbGwgb3RoZXIgbm9uLWFscGhhIGZvcm1hdHNcbiAgICAgICAgICAgIC8vIHdpbGwgcmV0dXJuIHJnYmEgd2hlbiB0aGVyZSBpcyB0cmFuc3BhcmVuY3kuXG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSBcIm5hbWVcIiAmJiB0aGlzLl9hID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9OYW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwicmdiXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9SZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcInByZ2JcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b1BlcmNlbnRhZ2VSZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg2XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleDNcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleFN0cmluZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleDRcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleDhTdHJpbmcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoZXg4XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXg4U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJuYW1lXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9OYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoc2xcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hzbFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaHN2XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9Ic3ZTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRTdHJpbmcgfHwgdGhpcy50b0hleFN0cmluZygpO1xuICAgIH0sXG4gICAgY2xvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGlueWNvbG9yKHRoaXMudG9TdHJpbmcoKSk7XG4gICAgfSxcblxuICAgIF9hcHBseU1vZGlmaWNhdGlvbjogZnVuY3Rpb24oZm4sIGFyZ3MpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gZm4uYXBwbHkobnVsbCwgW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3MpKSk7XG4gICAgICAgIHRoaXMuX3IgPSBjb2xvci5fcjtcbiAgICAgICAgdGhpcy5fZyA9IGNvbG9yLl9nO1xuICAgICAgICB0aGlzLl9iID0gY29sb3IuX2I7XG4gICAgICAgIHRoaXMuc2V0QWxwaGEoY29sb3IuX2EpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGxpZ2h0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24obGlnaHRlbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGJyaWdodGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGJyaWdodGVuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZGFya2VuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGRhcmtlbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGRlc2F0dXJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZGVzYXR1cmF0ZSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNhdHVyYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKHNhdHVyYXRlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZ3JleXNjYWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGdyZXlzY2FsZSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNwaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oc3BpbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgX2FwcGx5Q29tYmluYXRpb246IGZ1bmN0aW9uKGZuLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbdGhpc10uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJncykpKTtcbiAgICB9LFxuICAgIGFuYWxvZ291czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKGFuYWxvZ291cywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGNvbXBsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihjb21wbGVtZW50LCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbW9ub2Nocm9tYXRpYzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKG1vbm9jaHJvbWF0aWMsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzcGxpdGNvbXBsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihzcGxpdGNvbXBsZW1lbnQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICB0cmlhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHRyaWFkLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgdGV0cmFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24odGV0cmFkLCBhcmd1bWVudHMpO1xuICAgIH1cbn07XG5cbi8vIElmIGlucHV0IGlzIGFuIG9iamVjdCwgZm9yY2UgMSBpbnRvIFwiMS4wXCIgdG8gaGFuZGxlIHJhdGlvcyBwcm9wZXJseVxuLy8gU3RyaW5nIGlucHV0IHJlcXVpcmVzIFwiMS4wXCIgYXMgaW5wdXQsIHNvIDEgd2lsbCBiZSB0cmVhdGVkIGFzIDFcbnRpbnljb2xvci5mcm9tUmF0aW8gPSBmdW5jdGlvbihjb2xvciwgb3B0cykge1xuICAgIGlmICh0eXBlb2YgY29sb3IgPT0gXCJvYmplY3RcIikge1xuICAgICAgICB2YXIgbmV3Q29sb3IgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBjb2xvcikge1xuICAgICAgICAgICAgaWYgKGNvbG9yLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IFwiYVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbG9yW2ldID0gY29sb3JbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdDb2xvcltpXSA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3JbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb2xvciA9IG5ld0NvbG9yO1xuICAgIH1cblxuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IsIG9wdHMpO1xufTtcblxuLy8gR2l2ZW4gYSBzdHJpbmcgb3Igb2JqZWN0LCBjb252ZXJ0IHRoYXQgaW5wdXQgdG8gUkdCXG4vLyBQb3NzaWJsZSBzdHJpbmcgaW5wdXRzOlxuLy9cbi8vICAgICBcInJlZFwiXG4vLyAgICAgXCIjZjAwXCIgb3IgXCJmMDBcIlxuLy8gICAgIFwiI2ZmMDAwMFwiIG9yIFwiZmYwMDAwXCJcbi8vICAgICBcIiNmZjAwMDAwMFwiIG9yIFwiZmYwMDAwMDBcIlxuLy8gICAgIFwicmdiIDI1NSAwIDBcIiBvciBcInJnYiAoMjU1LCAwLCAwKVwiXG4vLyAgICAgXCJyZ2IgMS4wIDAgMFwiIG9yIFwicmdiICgxLCAwLCAwKVwiXG4vLyAgICAgXCJyZ2JhICgyNTUsIDAsIDAsIDEpXCIgb3IgXCJyZ2JhIDI1NSwgMCwgMCwgMVwiXG4vLyAgICAgXCJyZ2JhICgxLjAsIDAsIDAsIDEpXCIgb3IgXCJyZ2JhIDEuMCwgMCwgMCwgMVwiXG4vLyAgICAgXCJoc2woMCwgMTAwJSwgNTAlKVwiIG9yIFwiaHNsIDAgMTAwJSA1MCVcIlxuLy8gICAgIFwiaHNsYSgwLCAxMDAlLCA1MCUsIDEpXCIgb3IgXCJoc2xhIDAgMTAwJSA1MCUsIDFcIlxuLy8gICAgIFwiaHN2KDAsIDEwMCUsIDEwMCUpXCIgb3IgXCJoc3YgMCAxMDAlIDEwMCVcIlxuLy9cbmZ1bmN0aW9uIGlucHV0VG9SR0IoY29sb3IpIHtcblxuICAgIHZhciByZ2IgPSB7IHI6IDAsIGc6IDAsIGI6IDAgfTtcbiAgICB2YXIgYSA9IDE7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciB2ID0gbnVsbDtcbiAgICB2YXIgbCA9IG51bGw7XG4gICAgdmFyIG9rID0gZmFsc2U7XG4gICAgdmFyIGZvcm1hdCA9IGZhbHNlO1xuXG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbG9yID0gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5yKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5nKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5iKSkge1xuICAgICAgICAgICAgcmdiID0gcmdiVG9SZ2IoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSBTdHJpbmcoY29sb3Iucikuc3Vic3RyKC0xKSA9PT0gXCIlXCIgPyBcInByZ2JcIiA6IFwicmdiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IudikpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgdiA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iudik7XG4gICAgICAgICAgICByZ2IgPSBoc3ZUb1JnYihjb2xvci5oLCBzLCB2KTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwiaHN2XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IubCkpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgbCA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3IubCk7XG4gICAgICAgICAgICByZ2IgPSBoc2xUb1JnYihjb2xvci5oLCBzLCBsKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwiaHNsXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sb3IuaGFzT3duUHJvcGVydHkoXCJhXCIpKSB7XG4gICAgICAgICAgICBhID0gY29sb3IuYTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGEgPSBib3VuZEFscGhhKGEpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgb2s6IG9rLFxuICAgICAgICBmb3JtYXQ6IGNvbG9yLmZvcm1hdCB8fCBmb3JtYXQsXG4gICAgICAgIHI6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5yLCAwKSksXG4gICAgICAgIGc6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5nLCAwKSksXG4gICAgICAgIGI6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5iLCAwKSksXG4gICAgICAgIGE6IGFcbiAgICB9O1xufVxuXG5cbi8vIENvbnZlcnNpb24gRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBgcmdiVG9Ic2xgLCBgcmdiVG9Ic3ZgLCBgaHNsVG9SZ2JgLCBgaHN2VG9SZ2JgIG1vZGlmaWVkIGZyb206XG4vLyA8aHR0cDovL21qaWphY2tzb24uY29tLzIwMDgvMDIvcmdiLXRvLWhzbC1hbmQtcmdiLXRvLWhzdi1jb2xvci1tb2RlbC1jb252ZXJzaW9uLWFsZ29yaXRobXMtaW4tamF2YXNjcmlwdD5cblxuLy8gYHJnYlRvUmdiYFxuLy8gSGFuZGxlIGJvdW5kcyAvIHBlcmNlbnRhZ2UgY2hlY2tpbmcgdG8gY29uZm9ybSB0byBDU1MgY29sb3Igc3BlY1xuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtY29sb3IvPlxuLy8gKkFzc3VtZXM6KiByLCBnLCBiIGluIFswLCAyNTVdIG9yIFswLCAxXVxuLy8gKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiBbMCwgMjU1XVxuZnVuY3Rpb24gcmdiVG9SZ2IociwgZywgYil7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogYm91bmQwMShyLCAyNTUpICogMjU1LFxuICAgICAgICBnOiBib3VuZDAxKGcsIDI1NSkgKiAyNTUsXG4gICAgICAgIGI6IGJvdW5kMDEoYiwgMjU1KSAqIDI1NVxuICAgIH07XG59XG5cbi8vIGByZ2JUb0hzbGBcbi8vIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU0wuXG4vLyAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgaCwgcywgbCB9IGluIFswLDFdXG5mdW5jdGlvbiByZ2JUb0hzbChyLCBnLCBiKSB7XG5cbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcblxuICAgIHZhciBtYXggPSBtYXRoTWF4KHIsIGcsIGIpLCBtaW4gPSBtYXRoTWluKHIsIGcsIGIpO1xuICAgIHZhciBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYobWF4ID09IG1pbikge1xuICAgICAgICBoID0gcyA9IDA7IC8vIGFjaHJvbWF0aWNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBkID0gbWF4IC0gbWluO1xuICAgICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICAgIHN3aXRjaChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjogaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZzogaCA9IChiIC0gcikgLyBkICsgMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGI6IGggPSAociAtIGcpIC8gZCArIDQ7IGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaCAvPSA2O1xuICAgIH1cblxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIGw6IGwgfTtcbn1cblxuLy8gYGhzbFRvUmdiYFxuLy8gQ29udmVydHMgYW4gSFNMIGNvbG9yIHZhbHVlIHRvIFJHQi5cbi8vICpBc3N1bWVzOiogaCBpcyBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAzNjBdIGFuZCBzIGFuZCBsIGFyZSBjb250YWluZWQgWzAsIDFdIG9yIFswLCAxMDBdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIHRoZSBzZXQgWzAsIDI1NV1cbmZ1bmN0aW9uIGhzbFRvUmdiKGgsIHMsIGwpIHtcbiAgICB2YXIgciwgZywgYjtcblxuICAgIGggPSBib3VuZDAxKGgsIDM2MCk7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICBsID0gYm91bmQwMShsLCAxMDApO1xuXG4gICAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgICAgIGlmKHQgPCAwKSB0ICs9IDE7XG4gICAgICAgIGlmKHQgPiAxKSB0IC09IDE7XG4gICAgICAgIGlmKHQgPCAxLzYpIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICAgICAgICBpZih0IDwgMS8yKSByZXR1cm4gcTtcbiAgICAgICAgaWYodCA8IDIvMykgcmV0dXJuIHAgKyAocSAtIHApICogKDIvMyAtIHQpICogNjtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgaWYocyA9PT0gMCkge1xuICAgICAgICByID0gZyA9IGIgPSBsOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHZhciBwID0gMiAqIGwgLSBxO1xuICAgICAgICByID0gaHVlMnJnYihwLCBxLCBoICsgMS8zKTtcbiAgICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxLzMpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cblxuLy8gYHJnYlRvSHN2YFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHZhbHVlIHRvIEhTVlxuLy8gKkFzc3VtZXM6KiByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgaCwgcywgdiB9IGluIFswLDFdXG5mdW5jdGlvbiByZ2JUb0hzdihyLCBnLCBiKSB7XG5cbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcblxuICAgIHZhciBtYXggPSBtYXRoTWF4KHIsIGcsIGIpLCBtaW4gPSBtYXRoTWluKHIsIGcsIGIpO1xuICAgIHZhciBoLCBzLCB2ID0gbWF4O1xuXG4gICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuXG4gICAgaWYobWF4ID09IG1pbikge1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBnOiBoID0gKGIgLSByKSAvIGQgKyAyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaCAvPSA2O1xuICAgIH1cbiAgICByZXR1cm4geyBoOiBoLCBzOiBzLCB2OiB2IH07XG59XG5cbi8vIGBoc3ZUb1JnYmBcbi8vIENvbnZlcnRzIGFuIEhTViBjb2xvciB2YWx1ZSB0byBSR0IuXG4vLyAqQXNzdW1lczoqIGggaXMgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMzYwXSBhbmQgcyBhbmQgdiBhcmUgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMTAwXVxuLy8gKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiB0aGUgc2V0IFswLCAyNTVdXG4gZnVuY3Rpb24gaHN2VG9SZ2IoaCwgcywgdikge1xuXG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKSAqIDY7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICB2ID0gYm91bmQwMSh2LCAxMDApO1xuXG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKGgpLFxuICAgICAgICBmID0gaCAtIGksXG4gICAgICAgIHAgPSB2ICogKDEgLSBzKSxcbiAgICAgICAgcSA9IHYgKiAoMSAtIGYgKiBzKSxcbiAgICAgICAgdCA9IHYgKiAoMSAtICgxIC0gZikgKiBzKSxcbiAgICAgICAgbW9kID0gaSAlIDYsXG4gICAgICAgIHIgPSBbdiwgcSwgcCwgcCwgdCwgdl1bbW9kXSxcbiAgICAgICAgZyA9IFt0LCB2LCB2LCBxLCBwLCBwXVttb2RdLFxuICAgICAgICBiID0gW3AsIHAsIHQsIHYsIHYsIHFdW21vZF07XG5cbiAgICByZXR1cm4geyByOiByICogMjU1LCBnOiBnICogMjU1LCBiOiBiICogMjU1IH07XG59XG5cbi8vIGByZ2JUb0hleGBcbi8vIENvbnZlcnRzIGFuIFJHQiBjb2xvciB0byBoZXhcbi8vIEFzc3VtZXMgciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdXG4vLyBSZXR1cm5zIGEgMyBvciA2IGNoYXJhY3RlciBoZXhcbmZ1bmN0aW9uIHJnYlRvSGV4KHIsIGcsIGIsIGFsbG93M0NoYXIpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSlcbiAgICBdO1xuXG4gICAgLy8gUmV0dXJuIGEgMyBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93M0NoYXIgJiYgaGV4WzBdLmNoYXJBdCgwKSA9PSBoZXhbMF0uY2hhckF0KDEpICYmIGhleFsxXS5jaGFyQXQoMCkgPT0gaGV4WzFdLmNoYXJBdCgxKSAmJiBoZXhbMl0uY2hhckF0KDApID09IGhleFsyXS5jaGFyQXQoMSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4LmpvaW4oXCJcIik7XG59XG5cbi8vIGByZ2JhVG9IZXhgXG4vLyBDb252ZXJ0cyBhbiBSR0JBIGNvbG9yIHBsdXMgYWxwaGEgdHJhbnNwYXJlbmN5IHRvIGhleFxuLy8gQXNzdW1lcyByLCBnLCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBhbmRcbi8vIGEgaW4gWzAsIDFdLiBSZXR1cm5zIGEgNCBvciA4IGNoYXJhY3RlciByZ2JhIGhleFxuZnVuY3Rpb24gcmdiYVRvSGV4KHIsIGcsIGIsIGEsIGFsbG93NENoYXIpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSlcbiAgICBdO1xuXG4gICAgLy8gUmV0dXJuIGEgNCBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93NENoYXIgJiYgaGV4WzBdLmNoYXJBdCgwKSA9PSBoZXhbMF0uY2hhckF0KDEpICYmIGhleFsxXS5jaGFyQXQoMCkgPT0gaGV4WzFdLmNoYXJBdCgxKSAmJiBoZXhbMl0uY2hhckF0KDApID09IGhleFsyXS5jaGFyQXQoMSkgJiYgaGV4WzNdLmNoYXJBdCgwKSA9PSBoZXhbM10uY2hhckF0KDEpKSB7XG4gICAgICAgIHJldHVybiBoZXhbMF0uY2hhckF0KDApICsgaGV4WzFdLmNoYXJBdCgwKSArIGhleFsyXS5jaGFyQXQoMCkgKyBoZXhbM10uY2hhckF0KDApO1xuICAgIH1cblxuICAgIHJldHVybiBoZXguam9pbihcIlwiKTtcbn1cblxuLy8gYHJnYmFUb0FyZ2JIZXhgXG4vLyBDb252ZXJ0cyBhbiBSR0JBIGNvbG9yIHRvIGFuIEFSR0IgSGV4OCBzdHJpbmdcbi8vIFJhcmVseSB1c2VkLCBidXQgcmVxdWlyZWQgZm9yIFwidG9GaWx0ZXIoKVwiXG5mdW5jdGlvbiByZ2JhVG9BcmdiSGV4KHIsIGcsIGIsIGEpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSlcbiAgICBdO1xuXG4gICAgcmV0dXJuIGhleC5qb2luKFwiXCIpO1xufVxuXG4vLyBgZXF1YWxzYFxuLy8gQ2FuIGJlIGNhbGxlZCB3aXRoIGFueSB0aW55Y29sb3IgaW5wdXRcbnRpbnljb2xvci5lcXVhbHMgPSBmdW5jdGlvbiAoY29sb3IxLCBjb2xvcjIpIHtcbiAgICBpZiAoIWNvbG9yMSB8fCAhY29sb3IyKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IxKS50b1JnYlN0cmluZygpID09IHRpbnljb2xvcihjb2xvcjIpLnRvUmdiU3RyaW5nKCk7XG59O1xuXG50aW55Y29sb3IucmFuZG9tID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvci5mcm9tUmF0aW8oe1xuICAgICAgICByOiBtYXRoUmFuZG9tKCksXG4gICAgICAgIGc6IG1hdGhSYW5kb20oKSxcbiAgICAgICAgYjogbWF0aFJhbmRvbSgpXG4gICAgfSk7XG59O1xuXG5cbi8vIE1vZGlmaWNhdGlvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRoYW5rcyB0byBsZXNzLmpzIGZvciBzb21lIG9mIHRoZSBiYXNpY3MgaGVyZVxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGhlYWQvbGVzcy5qcy9ibG9iL21hc3Rlci9saWIvbGVzcy9mdW5jdGlvbnMuanM+XG5cbmZ1bmN0aW9uIGRlc2F0dXJhdGUoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLnMgLT0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5zID0gY2xhbXAwMShoc2wucyk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wucyArPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIGdyZXlzY2FsZShjb2xvcikge1xuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IpLmRlc2F0dXJhdGUoMTAwKTtcbn1cblxuZnVuY3Rpb24gbGlnaHRlbiAoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmwgKz0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBicmlnaHRlbihjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIHJnYiA9IHRpbnljb2xvcihjb2xvcikudG9SZ2IoKTtcbiAgICByZ2IuciA9IG1hdGhNYXgoMCwgbWF0aE1pbigyNTUsIHJnYi5yIC0gbWF0aFJvdW5kKDI1NSAqIC0gKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgcmdiLmcgPSBtYXRoTWF4KDAsIG1hdGhNaW4oMjU1LCByZ2IuZyAtIG1hdGhSb3VuZCgyNTUgKiAtIChhbW91bnQgLyAxMDApKSkpO1xuICAgIHJnYi5iID0gbWF0aE1heCgwLCBtYXRoTWluKDI1NSwgcmdiLmIgLSBtYXRoUm91bmQoMjU1ICogLSAoYW1vdW50IC8gMTAwKSkpKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKHJnYik7XG59XG5cbmZ1bmN0aW9uIGRhcmtlbiAoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmwgLT0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG4vLyBTcGluIHRha2VzIGEgcG9zaXRpdmUgb3IgbmVnYXRpdmUgYW1vdW50IHdpdGhpbiBbLTM2MCwgMzYwXSBpbmRpY2F0aW5nIHRoZSBjaGFuZ2Ugb2YgaHVlLlxuLy8gVmFsdWVzIG91dHNpZGUgb2YgdGhpcyByYW5nZSB3aWxsIGJlIHdyYXBwZWQgaW50byB0aGlzIHJhbmdlLlxuZnVuY3Rpb24gc3Bpbihjb2xvciwgYW1vdW50KSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaHVlID0gKGhzbC5oICsgYW1vdW50KSAlIDM2MDtcbiAgICBoc2wuaCA9IGh1ZSA8IDAgPyAzNjAgKyBodWUgOiBodWU7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG4vLyBDb21iaW5hdGlvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVGhhbmtzIHRvIGpRdWVyeSB4Q29sb3IgZm9yIHNvbWUgb2YgdGhlIGlkZWFzIGJlaGluZCB0aGVzZVxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9pbmZ1c2lvbi9qUXVlcnkteGNvbG9yL2Jsb2IvbWFzdGVyL2pxdWVyeS54Y29sb3IuanM+XG5cbmZ1bmN0aW9uIGNvbXBsZW1lbnQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIGhzbC5oID0gKGhzbC5oICsgMTgwKSAlIDM2MDtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIHRyaWFkKGNvbG9yKSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaCA9IGhzbC5oO1xuICAgIHJldHVybiBbXG4gICAgICAgIHRpbnljb2xvcihjb2xvciksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMTIwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDI0MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIHRldHJhZChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIGggPSBoc2wuaDtcbiAgICByZXR1cm4gW1xuICAgICAgICB0aW55Y29sb3IoY29sb3IpLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDkwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDE4MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAyNzApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSlcbiAgICBdO1xufVxuXG5mdW5jdGlvbiBzcGxpdGNvbXBsZW1lbnQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBoID0gaHNsLmg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdGlueWNvbG9yKGNvbG9yKSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyA3MikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDIxNikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubH0pXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gYW5hbG9nb3VzKGNvbG9yLCByZXN1bHRzLCBzbGljZXMpIHtcbiAgICByZXN1bHRzID0gcmVzdWx0cyB8fCA2O1xuICAgIHNsaWNlcyA9IHNsaWNlcyB8fCAzMDtcblxuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIHBhcnQgPSAzNjAgLyBzbGljZXM7XG4gICAgdmFyIHJldCA9IFt0aW55Y29sb3IoY29sb3IpXTtcblxuICAgIGZvciAoaHNsLmggPSAoKGhzbC5oIC0gKHBhcnQgKiByZXN1bHRzID4+IDEpKSArIDcyMCkgJSAzNjA7IC0tcmVzdWx0czsgKSB7XG4gICAgICAgIGhzbC5oID0gKGhzbC5oICsgcGFydCkgJSAzNjA7XG4gICAgICAgIHJldC5wdXNoKHRpbnljb2xvcihoc2wpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gbW9ub2Nocm9tYXRpYyhjb2xvciwgcmVzdWx0cykge1xuICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IDY7XG4gICAgdmFyIGhzdiA9IHRpbnljb2xvcihjb2xvcikudG9Ic3YoKTtcbiAgICB2YXIgaCA9IGhzdi5oLCBzID0gaHN2LnMsIHYgPSBoc3YudjtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgdmFyIG1vZGlmaWNhdGlvbiA9IDEgLyByZXN1bHRzO1xuXG4gICAgd2hpbGUgKHJlc3VsdHMtLSkge1xuICAgICAgICByZXQucHVzaCh0aW55Y29sb3IoeyBoOiBoLCBzOiBzLCB2OiB2fSkpO1xuICAgICAgICB2ID0gKHYgKyBtb2RpZmljYXRpb24pICUgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vLyBVdGlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnRpbnljb2xvci5taXggPSBmdW5jdGlvbihjb2xvcjEsIGNvbG9yMiwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCA1MCk7XG5cbiAgICB2YXIgcmdiMSA9IHRpbnljb2xvcihjb2xvcjEpLnRvUmdiKCk7XG4gICAgdmFyIHJnYjIgPSB0aW55Y29sb3IoY29sb3IyKS50b1JnYigpO1xuXG4gICAgdmFyIHAgPSBhbW91bnQgLyAxMDA7XG5cbiAgICB2YXIgcmdiYSA9IHtcbiAgICAgICAgcjogKChyZ2IyLnIgLSByZ2IxLnIpICogcCkgKyByZ2IxLnIsXG4gICAgICAgIGc6ICgocmdiMi5nIC0gcmdiMS5nKSAqIHApICsgcmdiMS5nLFxuICAgICAgICBiOiAoKHJnYjIuYiAtIHJnYjEuYikgKiBwKSArIHJnYjEuYixcbiAgICAgICAgYTogKChyZ2IyLmEgLSByZ2IxLmEpICogcCkgKyByZ2IxLmFcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRpbnljb2xvcihyZ2JhKTtcbn07XG5cblxuLy8gUmVhZGFiaWxpdHkgRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmIChXQ0FHIFZlcnNpb24gMilcblxuLy8gYGNvbnRyYXN0YFxuLy8gQW5hbHl6ZSB0aGUgMiBjb2xvcnMgYW5kIHJldHVybnMgdGhlIGNvbG9yIGNvbnRyYXN0IGRlZmluZWQgYnkgKFdDQUcgVmVyc2lvbiAyKVxudGlueWNvbG9yLnJlYWRhYmlsaXR5ID0gZnVuY3Rpb24oY29sb3IxLCBjb2xvcjIpIHtcbiAgICB2YXIgYzEgPSB0aW55Y29sb3IoY29sb3IxKTtcbiAgICB2YXIgYzIgPSB0aW55Y29sb3IoY29sb3IyKTtcbiAgICByZXR1cm4gKE1hdGgubWF4KGMxLmdldEx1bWluYW5jZSgpLGMyLmdldEx1bWluYW5jZSgpKSswLjA1KSAvIChNYXRoLm1pbihjMS5nZXRMdW1pbmFuY2UoKSxjMi5nZXRMdW1pbmFuY2UoKSkrMC4wNSk7XG59O1xuXG4vLyBgaXNSZWFkYWJsZWBcbi8vIEVuc3VyZSB0aGF0IGZvcmVncm91bmQgYW5kIGJhY2tncm91bmQgY29sb3IgY29tYmluYXRpb25zIG1lZXQgV0NBRzIgZ3VpZGVsaW5lcy5cbi8vIFRoZSB0aGlyZCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCBPYmplY3QuXG4vLyAgICAgIHRoZSAnbGV2ZWwnIHByb3BlcnR5IHN0YXRlcyAnQUEnIG9yICdBQUEnIC0gaWYgbWlzc2luZyBvciBpbnZhbGlkLCBpdCBkZWZhdWx0cyB0byAnQUEnO1xuLy8gICAgICB0aGUgJ3NpemUnIHByb3BlcnR5IHN0YXRlcyAnbGFyZ2UnIG9yICdzbWFsbCcgLSBpZiBtaXNzaW5nIG9yIGludmFsaWQsIGl0IGRlZmF1bHRzIHRvICdzbWFsbCcuXG4vLyBJZiB0aGUgZW50aXJlIG9iamVjdCBpcyBhYnNlbnQsIGlzUmVhZGFibGUgZGVmYXVsdHMgdG8ge2xldmVsOlwiQUFcIixzaXplOlwic21hbGxcIn0uXG5cbi8vICpFeGFtcGxlKlxuLy8gICAgdGlueWNvbG9yLmlzUmVhZGFibGUoXCIjMDAwXCIsIFwiIzExMVwiKSA9PiBmYWxzZVxuLy8gICAgdGlueWNvbG9yLmlzUmVhZGFibGUoXCIjMDAwXCIsIFwiIzExMVwiLHtsZXZlbDpcIkFBXCIsc2l6ZTpcImxhcmdlXCJ9KSA9PiBmYWxzZVxudGlueWNvbG9yLmlzUmVhZGFibGUgPSBmdW5jdGlvbihjb2xvcjEsIGNvbG9yMiwgd2NhZzIpIHtcbiAgICB2YXIgcmVhZGFiaWxpdHkgPSB0aW55Y29sb3IucmVhZGFiaWxpdHkoY29sb3IxLCBjb2xvcjIpO1xuICAgIHZhciB3Y2FnMlBhcm1zLCBvdXQ7XG5cbiAgICBvdXQgPSBmYWxzZTtcblxuICAgIHdjYWcyUGFybXMgPSB2YWxpZGF0ZVdDQUcyUGFybXMod2NhZzIpO1xuICAgIHN3aXRjaCAod2NhZzJQYXJtcy5sZXZlbCArIHdjYWcyUGFybXMuc2l6ZSkge1xuICAgICAgICBjYXNlIFwiQUFzbWFsbFwiOlxuICAgICAgICBjYXNlIFwiQUFBbGFyZ2VcIjpcbiAgICAgICAgICAgIG91dCA9IHJlYWRhYmlsaXR5ID49IDQuNTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQUFsYXJnZVwiOlxuICAgICAgICAgICAgb3V0ID0gcmVhZGFiaWxpdHkgPj0gMztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQUFBc21hbGxcIjpcbiAgICAgICAgICAgIG91dCA9IHJlYWRhYmlsaXR5ID49IDc7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcblxufTtcblxuLy8gYG1vc3RSZWFkYWJsZWBcbi8vIEdpdmVuIGEgYmFzZSBjb2xvciBhbmQgYSBsaXN0IG9mIHBvc3NpYmxlIGZvcmVncm91bmQgb3IgYmFja2dyb3VuZFxuLy8gY29sb3JzIGZvciB0aGF0IGJhc2UsIHJldHVybnMgdGhlIG1vc3QgcmVhZGFibGUgY29sb3IuXG4vLyBPcHRpb25hbGx5IHJldHVybnMgQmxhY2sgb3IgV2hpdGUgaWYgdGhlIG1vc3QgcmVhZGFibGUgY29sb3IgaXMgdW5yZWFkYWJsZS5cbi8vICpFeGFtcGxlKlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZSh0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiIzEyM1wiLCBbXCIjMTI0XCIsIFwiIzEyNVwiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOmZhbHNlfSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjMTEyMjU1XCJcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUodGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiMxMjNcIiwgW1wiIzEyNFwiLCBcIiMxMjVcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlfSkudG9IZXhTdHJpbmcoKTsgIC8vIFwiI2ZmZmZmZlwiXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiI2E4MDE1YVwiLCBbXCIjZmFmM2YzXCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6dHJ1ZSxsZXZlbDpcIkFBQVwiLHNpemU6XCJsYXJnZVwifSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjZmFmM2YzXCJcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjYTgwMTVhXCIsIFtcIiNmYWYzZjNcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlLGxldmVsOlwiQUFBXCIsc2l6ZTpcInNtYWxsXCJ9KS50b0hleFN0cmluZygpOyAvLyBcIiNmZmZmZmZcIlxudGlueWNvbG9yLm1vc3RSZWFkYWJsZSA9IGZ1bmN0aW9uKGJhc2VDb2xvciwgY29sb3JMaXN0LCBhcmdzKSB7XG4gICAgdmFyIGJlc3RDb2xvciA9IG51bGw7XG4gICAgdmFyIGJlc3RTY29yZSA9IDA7XG4gICAgdmFyIHJlYWRhYmlsaXR5O1xuICAgIHZhciBpbmNsdWRlRmFsbGJhY2tDb2xvcnMsIGxldmVsLCBzaXplIDtcbiAgICBhcmdzID0gYXJncyB8fCB7fTtcbiAgICBpbmNsdWRlRmFsbGJhY2tDb2xvcnMgPSBhcmdzLmluY2x1ZGVGYWxsYmFja0NvbG9ycyA7XG4gICAgbGV2ZWwgPSBhcmdzLmxldmVsO1xuICAgIHNpemUgPSBhcmdzLnNpemU7XG5cbiAgICBmb3IgKHZhciBpPSAwOyBpIDwgY29sb3JMaXN0Lmxlbmd0aCA7IGkrKykge1xuICAgICAgICByZWFkYWJpbGl0eSA9IHRpbnljb2xvci5yZWFkYWJpbGl0eShiYXNlQ29sb3IsIGNvbG9yTGlzdFtpXSk7XG4gICAgICAgIGlmIChyZWFkYWJpbGl0eSA+IGJlc3RTY29yZSkge1xuICAgICAgICAgICAgYmVzdFNjb3JlID0gcmVhZGFiaWxpdHk7XG4gICAgICAgICAgICBiZXN0Q29sb3IgPSB0aW55Y29sb3IoY29sb3JMaXN0W2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aW55Y29sb3IuaXNSZWFkYWJsZShiYXNlQ29sb3IsIGJlc3RDb2xvciwge1wibGV2ZWxcIjpsZXZlbCxcInNpemVcIjpzaXplfSkgfHwgIWluY2x1ZGVGYWxsYmFja0NvbG9ycykge1xuICAgICAgICByZXR1cm4gYmVzdENvbG9yO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXJncy5pbmNsdWRlRmFsbGJhY2tDb2xvcnM9ZmFsc2U7XG4gICAgICAgIHJldHVybiB0aW55Y29sb3IubW9zdFJlYWRhYmxlKGJhc2VDb2xvcixbXCIjZmZmXCIsIFwiIzAwMFwiXSxhcmdzKTtcbiAgICB9XG59O1xuXG5cbi8vIEJpZyBMaXN0IG9mIENvbG9yc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jc3ZnLWNvbG9yPlxudmFyIG5hbWVzID0gdGlueWNvbG9yLm5hbWVzID0ge1xuICAgIGFsaWNlYmx1ZTogXCJmMGY4ZmZcIixcbiAgICBhbnRpcXVld2hpdGU6IFwiZmFlYmQ3XCIsXG4gICAgYXF1YTogXCIwZmZcIixcbiAgICBhcXVhbWFyaW5lOiBcIjdmZmZkNFwiLFxuICAgIGF6dXJlOiBcImYwZmZmZlwiLFxuICAgIGJlaWdlOiBcImY1ZjVkY1wiLFxuICAgIGJpc3F1ZTogXCJmZmU0YzRcIixcbiAgICBibGFjazogXCIwMDBcIixcbiAgICBibGFuY2hlZGFsbW9uZDogXCJmZmViY2RcIixcbiAgICBibHVlOiBcIjAwZlwiLFxuICAgIGJsdWV2aW9sZXQ6IFwiOGEyYmUyXCIsXG4gICAgYnJvd246IFwiYTUyYTJhXCIsXG4gICAgYnVybHl3b29kOiBcImRlYjg4N1wiLFxuICAgIGJ1cm50c2llbm5hOiBcImVhN2U1ZFwiLFxuICAgIGNhZGV0Ymx1ZTogXCI1ZjllYTBcIixcbiAgICBjaGFydHJldXNlOiBcIjdmZmYwMFwiLFxuICAgIGNob2NvbGF0ZTogXCJkMjY5MWVcIixcbiAgICBjb3JhbDogXCJmZjdmNTBcIixcbiAgICBjb3JuZmxvd2VyYmx1ZTogXCI2NDk1ZWRcIixcbiAgICBjb3Juc2lsazogXCJmZmY4ZGNcIixcbiAgICBjcmltc29uOiBcImRjMTQzY1wiLFxuICAgIGN5YW46IFwiMGZmXCIsXG4gICAgZGFya2JsdWU6IFwiMDAwMDhiXCIsXG4gICAgZGFya2N5YW46IFwiMDA4YjhiXCIsXG4gICAgZGFya2dvbGRlbnJvZDogXCJiODg2MGJcIixcbiAgICBkYXJrZ3JheTogXCJhOWE5YTlcIixcbiAgICBkYXJrZ3JlZW46IFwiMDA2NDAwXCIsXG4gICAgZGFya2dyZXk6IFwiYTlhOWE5XCIsXG4gICAgZGFya2toYWtpOiBcImJkYjc2YlwiLFxuICAgIGRhcmttYWdlbnRhOiBcIjhiMDA4YlwiLFxuICAgIGRhcmtvbGl2ZWdyZWVuOiBcIjU1NmIyZlwiLFxuICAgIGRhcmtvcmFuZ2U6IFwiZmY4YzAwXCIsXG4gICAgZGFya29yY2hpZDogXCI5OTMyY2NcIixcbiAgICBkYXJrcmVkOiBcIjhiMDAwMFwiLFxuICAgIGRhcmtzYWxtb246IFwiZTk5NjdhXCIsXG4gICAgZGFya3NlYWdyZWVuOiBcIjhmYmM4ZlwiLFxuICAgIGRhcmtzbGF0ZWJsdWU6IFwiNDgzZDhiXCIsXG4gICAgZGFya3NsYXRlZ3JheTogXCIyZjRmNGZcIixcbiAgICBkYXJrc2xhdGVncmV5OiBcIjJmNGY0ZlwiLFxuICAgIGRhcmt0dXJxdW9pc2U6IFwiMDBjZWQxXCIsXG4gICAgZGFya3Zpb2xldDogXCI5NDAwZDNcIixcbiAgICBkZWVwcGluazogXCJmZjE0OTNcIixcbiAgICBkZWVwc2t5Ymx1ZTogXCIwMGJmZmZcIixcbiAgICBkaW1ncmF5OiBcIjY5Njk2OVwiLFxuICAgIGRpbWdyZXk6IFwiNjk2OTY5XCIsXG4gICAgZG9kZ2VyYmx1ZTogXCIxZTkwZmZcIixcbiAgICBmaXJlYnJpY2s6IFwiYjIyMjIyXCIsXG4gICAgZmxvcmFsd2hpdGU6IFwiZmZmYWYwXCIsXG4gICAgZm9yZXN0Z3JlZW46IFwiMjI4YjIyXCIsXG4gICAgZnVjaHNpYTogXCJmMGZcIixcbiAgICBnYWluc2Jvcm86IFwiZGNkY2RjXCIsXG4gICAgZ2hvc3R3aGl0ZTogXCJmOGY4ZmZcIixcbiAgICBnb2xkOiBcImZmZDcwMFwiLFxuICAgIGdvbGRlbnJvZDogXCJkYWE1MjBcIixcbiAgICBncmF5OiBcIjgwODA4MFwiLFxuICAgIGdyZWVuOiBcIjAwODAwMFwiLFxuICAgIGdyZWVueWVsbG93OiBcImFkZmYyZlwiLFxuICAgIGdyZXk6IFwiODA4MDgwXCIsXG4gICAgaG9uZXlkZXc6IFwiZjBmZmYwXCIsXG4gICAgaG90cGluazogXCJmZjY5YjRcIixcbiAgICBpbmRpYW5yZWQ6IFwiY2Q1YzVjXCIsXG4gICAgaW5kaWdvOiBcIjRiMDA4MlwiLFxuICAgIGl2b3J5OiBcImZmZmZmMFwiLFxuICAgIGtoYWtpOiBcImYwZTY4Y1wiLFxuICAgIGxhdmVuZGVyOiBcImU2ZTZmYVwiLFxuICAgIGxhdmVuZGVyYmx1c2g6IFwiZmZmMGY1XCIsXG4gICAgbGF3bmdyZWVuOiBcIjdjZmMwMFwiLFxuICAgIGxlbW9uY2hpZmZvbjogXCJmZmZhY2RcIixcbiAgICBsaWdodGJsdWU6IFwiYWRkOGU2XCIsXG4gICAgbGlnaHRjb3JhbDogXCJmMDgwODBcIixcbiAgICBsaWdodGN5YW46IFwiZTBmZmZmXCIsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IFwiZmFmYWQyXCIsXG4gICAgbGlnaHRncmF5OiBcImQzZDNkM1wiLFxuICAgIGxpZ2h0Z3JlZW46IFwiOTBlZTkwXCIsXG4gICAgbGlnaHRncmV5OiBcImQzZDNkM1wiLFxuICAgIGxpZ2h0cGluazogXCJmZmI2YzFcIixcbiAgICBsaWdodHNhbG1vbjogXCJmZmEwN2FcIixcbiAgICBsaWdodHNlYWdyZWVuOiBcIjIwYjJhYVwiLFxuICAgIGxpZ2h0c2t5Ymx1ZTogXCI4N2NlZmFcIixcbiAgICBsaWdodHNsYXRlZ3JheTogXCI3ODlcIixcbiAgICBsaWdodHNsYXRlZ3JleTogXCI3ODlcIixcbiAgICBsaWdodHN0ZWVsYmx1ZTogXCJiMGM0ZGVcIixcbiAgICBsaWdodHllbGxvdzogXCJmZmZmZTBcIixcbiAgICBsaW1lOiBcIjBmMFwiLFxuICAgIGxpbWVncmVlbjogXCIzMmNkMzJcIixcbiAgICBsaW5lbjogXCJmYWYwZTZcIixcbiAgICBtYWdlbnRhOiBcImYwZlwiLFxuICAgIG1hcm9vbjogXCI4MDAwMDBcIixcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiBcIjY2Y2RhYVwiLFxuICAgIG1lZGl1bWJsdWU6IFwiMDAwMGNkXCIsXG4gICAgbWVkaXVtb3JjaGlkOiBcImJhNTVkM1wiLFxuICAgIG1lZGl1bXB1cnBsZTogXCI5MzcwZGJcIixcbiAgICBtZWRpdW1zZWFncmVlbjogXCIzY2IzNzFcIixcbiAgICBtZWRpdW1zbGF0ZWJsdWU6IFwiN2I2OGVlXCIsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46IFwiMDBmYTlhXCIsXG4gICAgbWVkaXVtdHVycXVvaXNlOiBcIjQ4ZDFjY1wiLFxuICAgIG1lZGl1bXZpb2xldHJlZDogXCJjNzE1ODVcIixcbiAgICBtaWRuaWdodGJsdWU6IFwiMTkxOTcwXCIsXG4gICAgbWludGNyZWFtOiBcImY1ZmZmYVwiLFxuICAgIG1pc3R5cm9zZTogXCJmZmU0ZTFcIixcbiAgICBtb2NjYXNpbjogXCJmZmU0YjVcIixcbiAgICBuYXZham93aGl0ZTogXCJmZmRlYWRcIixcbiAgICBuYXZ5OiBcIjAwMDA4MFwiLFxuICAgIG9sZGxhY2U6IFwiZmRmNWU2XCIsXG4gICAgb2xpdmU6IFwiODA4MDAwXCIsXG4gICAgb2xpdmVkcmFiOiBcIjZiOGUyM1wiLFxuICAgIG9yYW5nZTogXCJmZmE1MDBcIixcbiAgICBvcmFuZ2VyZWQ6IFwiZmY0NTAwXCIsXG4gICAgb3JjaGlkOiBcImRhNzBkNlwiLFxuICAgIHBhbGVnb2xkZW5yb2Q6IFwiZWVlOGFhXCIsXG4gICAgcGFsZWdyZWVuOiBcIjk4ZmI5OFwiLFxuICAgIHBhbGV0dXJxdW9pc2U6IFwiYWZlZWVlXCIsXG4gICAgcGFsZXZpb2xldHJlZDogXCJkYjcwOTNcIixcbiAgICBwYXBheWF3aGlwOiBcImZmZWZkNVwiLFxuICAgIHBlYWNocHVmZjogXCJmZmRhYjlcIixcbiAgICBwZXJ1OiBcImNkODUzZlwiLFxuICAgIHBpbms6IFwiZmZjMGNiXCIsXG4gICAgcGx1bTogXCJkZGEwZGRcIixcbiAgICBwb3dkZXJibHVlOiBcImIwZTBlNlwiLFxuICAgIHB1cnBsZTogXCI4MDAwODBcIixcbiAgICByZWJlY2NhcHVycGxlOiBcIjY2MzM5OVwiLFxuICAgIHJlZDogXCJmMDBcIixcbiAgICByb3N5YnJvd246IFwiYmM4ZjhmXCIsXG4gICAgcm95YWxibHVlOiBcIjQxNjllMVwiLFxuICAgIHNhZGRsZWJyb3duOiBcIjhiNDUxM1wiLFxuICAgIHNhbG1vbjogXCJmYTgwNzJcIixcbiAgICBzYW5keWJyb3duOiBcImY0YTQ2MFwiLFxuICAgIHNlYWdyZWVuOiBcIjJlOGI1N1wiLFxuICAgIHNlYXNoZWxsOiBcImZmZjVlZVwiLFxuICAgIHNpZW5uYTogXCJhMDUyMmRcIixcbiAgICBzaWx2ZXI6IFwiYzBjMGMwXCIsXG4gICAgc2t5Ymx1ZTogXCI4N2NlZWJcIixcbiAgICBzbGF0ZWJsdWU6IFwiNmE1YWNkXCIsXG4gICAgc2xhdGVncmF5OiBcIjcwODA5MFwiLFxuICAgIHNsYXRlZ3JleTogXCI3MDgwOTBcIixcbiAgICBzbm93OiBcImZmZmFmYVwiLFxuICAgIHNwcmluZ2dyZWVuOiBcIjAwZmY3ZlwiLFxuICAgIHN0ZWVsYmx1ZTogXCI0NjgyYjRcIixcbiAgICB0YW46IFwiZDJiNDhjXCIsXG4gICAgdGVhbDogXCIwMDgwODBcIixcbiAgICB0aGlzdGxlOiBcImQ4YmZkOFwiLFxuICAgIHRvbWF0bzogXCJmZjYzNDdcIixcbiAgICB0dXJxdW9pc2U6IFwiNDBlMGQwXCIsXG4gICAgdmlvbGV0OiBcImVlODJlZVwiLFxuICAgIHdoZWF0OiBcImY1ZGViM1wiLFxuICAgIHdoaXRlOiBcImZmZlwiLFxuICAgIHdoaXRlc21va2U6IFwiZjVmNWY1XCIsXG4gICAgeWVsbG93OiBcImZmMFwiLFxuICAgIHllbGxvd2dyZWVuOiBcIjlhY2QzMlwiXG59O1xuXG4vLyBNYWtlIGl0IGVhc3kgdG8gYWNjZXNzIGNvbG9ycyB2aWEgYGhleE5hbWVzW2hleF1gXG52YXIgaGV4TmFtZXMgPSB0aW55Y29sb3IuaGV4TmFtZXMgPSBmbGlwKG5hbWVzKTtcblxuXG4vLyBVdGlsaXRpZXNcbi8vIC0tLS0tLS0tLVxuXG4vLyBgeyAnbmFtZTEnOiAndmFsMScgfWAgYmVjb21lcyBgeyAndmFsMSc6ICduYW1lMScgfWBcbmZ1bmN0aW9uIGZsaXAobykge1xuICAgIHZhciBmbGlwcGVkID0geyB9O1xuICAgIGZvciAodmFyIGkgaW4gbykge1xuICAgICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgZmxpcHBlZFtvW2ldXSA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZsaXBwZWQ7XG59XG5cbi8vIFJldHVybiBhIHZhbGlkIGFscGhhIHZhbHVlIFswLDFdIHdpdGggYWxsIGludmFsaWQgdmFsdWVzIGJlaW5nIHNldCB0byAxXG5mdW5jdGlvbiBib3VuZEFscGhhKGEpIHtcbiAgICBhID0gcGFyc2VGbG9hdChhKTtcblxuICAgIGlmIChpc05hTihhKSB8fCBhIDwgMCB8fCBhID4gMSkge1xuICAgICAgICBhID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbn1cblxuLy8gVGFrZSBpbnB1dCBmcm9tIFswLCBuXSBhbmQgcmV0dXJuIGl0IGFzIFswLCAxXVxuZnVuY3Rpb24gYm91bmQwMShuLCBtYXgpIHtcbiAgICBpZiAoaXNPbmVQb2ludFplcm8obikpIHsgbiA9IFwiMTAwJVwiOyB9XG5cbiAgICB2YXIgcHJvY2Vzc1BlcmNlbnQgPSBpc1BlcmNlbnRhZ2Uobik7XG4gICAgbiA9IG1hdGhNaW4obWF4LCBtYXRoTWF4KDAsIHBhcnNlRmxvYXQobikpKTtcblxuICAgIC8vIEF1dG9tYXRpY2FsbHkgY29udmVydCBwZXJjZW50YWdlIGludG8gbnVtYmVyXG4gICAgaWYgKHByb2Nlc3NQZXJjZW50KSB7XG4gICAgICAgIG4gPSBwYXJzZUludChuICogbWF4LCAxMCkgLyAxMDA7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yc1xuICAgIGlmICgoTWF0aC5hYnMobiAtIG1heCkgPCAwLjAwMDAwMSkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBpbnRvIFswLCAxXSByYW5nZSBpZiBpdCBpc24ndCBhbHJlYWR5XG4gICAgcmV0dXJuIChuICUgbWF4KSAvIHBhcnNlRmxvYXQobWF4KTtcbn1cblxuLy8gRm9yY2UgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXG5mdW5jdGlvbiBjbGFtcDAxKHZhbCkge1xuICAgIHJldHVybiBtYXRoTWluKDEsIG1hdGhNYXgoMCwgdmFsKSk7XG59XG5cbi8vIFBhcnNlIGEgYmFzZS0xNiBoZXggdmFsdWUgaW50byBhIGJhc2UtMTAgaW50ZWdlclxuZnVuY3Rpb24gcGFyc2VJbnRGcm9tSGV4KHZhbCkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWwsIDE2KTtcbn1cblxuLy8gTmVlZCB0byBoYW5kbGUgMS4wIGFzIDEwMCUsIHNpbmNlIG9uY2UgaXQgaXMgYSBudW1iZXIsIHRoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiBpdCBhbmQgMVxuLy8gPGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzQyMjA3Mi9qYXZhc2NyaXB0LWhvdy10by1kZXRlY3QtbnVtYmVyLWFzLWEtZGVjaW1hbC1pbmNsdWRpbmctMS0wPlxuZnVuY3Rpb24gaXNPbmVQb2ludFplcm8obikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PSBcInN0cmluZ1wiICYmIG4uaW5kZXhPZignLicpICE9IC0xICYmIHBhcnNlRmxvYXQobikgPT09IDE7XG59XG5cbi8vIENoZWNrIHRvIHNlZSBpZiBzdHJpbmcgcGFzc2VkIGluIGlzIGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gaXNQZXJjZW50YWdlKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09IFwic3RyaW5nXCIgJiYgbi5pbmRleE9mKCclJykgIT0gLTE7XG59XG5cbi8vIEZvcmNlIGEgaGV4IHZhbHVlIHRvIGhhdmUgMiBjaGFyYWN0ZXJzXG5mdW5jdGlvbiBwYWQyKGMpIHtcbiAgICByZXR1cm4gYy5sZW5ndGggPT0gMSA/ICcwJyArIGMgOiAnJyArIGM7XG59XG5cbi8vIFJlcGxhY2UgYSBkZWNpbWFsIHdpdGggaXQncyBwZXJjZW50YWdlIHZhbHVlXG5mdW5jdGlvbiBjb252ZXJ0VG9QZXJjZW50YWdlKG4pIHtcbiAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgIG4gPSAobiAqIDEwMCkgKyBcIiVcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gbjtcbn1cblxuLy8gQ29udmVydHMgYSBkZWNpbWFsIHRvIGEgaGV4IHZhbHVlXG5mdW5jdGlvbiBjb252ZXJ0RGVjaW1hbFRvSGV4KGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGQpICogMjU1KS50b1N0cmluZygxNik7XG59XG4vLyBDb252ZXJ0cyBhIGhleCB2YWx1ZSB0byBhIGRlY2ltYWxcbmZ1bmN0aW9uIGNvbnZlcnRIZXhUb0RlY2ltYWwoaCkge1xuICAgIHJldHVybiAocGFyc2VJbnRGcm9tSGV4KGgpIC8gMjU1KTtcbn1cblxudmFyIG1hdGNoZXJzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNpbnRlZ2Vycz5cbiAgICB2YXIgQ1NTX0lOVEVHRVIgPSBcIlstXFxcXCtdP1xcXFxkKyU/XCI7XG5cbiAgICAvLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI251bWJlci12YWx1ZT5cbiAgICB2YXIgQ1NTX05VTUJFUiA9IFwiWy1cXFxcK10/XFxcXGQqXFxcXC5cXFxcZCslP1wiO1xuXG4gICAgLy8gQWxsb3cgcG9zaXRpdmUvbmVnYXRpdmUgaW50ZWdlci9udW1iZXIuICBEb24ndCBjYXB0dXJlIHRoZSBlaXRoZXIvb3IsIGp1c3QgdGhlIGVudGlyZSBvdXRjb21lLlxuICAgIHZhciBDU1NfVU5JVCA9IFwiKD86XCIgKyBDU1NfTlVNQkVSICsgXCIpfCg/OlwiICsgQ1NTX0lOVEVHRVIgKyBcIilcIjtcblxuICAgIC8vIEFjdHVhbCBtYXRjaGluZy5cbiAgICAvLyBQYXJlbnRoZXNlcyBhbmQgY29tbWFzIGFyZSBvcHRpb25hbCwgYnV0IG5vdCByZXF1aXJlZC5cbiAgICAvLyBXaGl0ZXNwYWNlIGNhbiB0YWtlIHRoZSBwbGFjZSBvZiBjb21tYXMgb3Igb3BlbmluZyBwYXJlblxuICAgIHZhciBQRVJNSVNTSVZFX01BVENIMyA9IFwiW1xcXFxzfFxcXFwoXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVxcXFxzKlxcXFwpP1wiO1xuICAgIHZhciBQRVJNSVNTSVZFX01BVENINCA9IFwiW1xcXFxzfFxcXFwoXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVxcXFxzKlxcXFwpP1wiO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgQ1NTX1VOSVQ6IG5ldyBSZWdFeHAoQ1NTX1VOSVQpLFxuICAgICAgICByZ2I6IG5ldyBSZWdFeHAoXCJyZ2JcIiArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICAgICAgcmdiYTogbmV3IFJlZ0V4cChcInJnYmFcIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICAgICAgaHNsOiBuZXcgUmVnRXhwKFwiaHNsXCIgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgICAgIGhzbGE6IG5ldyBSZWdFeHAoXCJoc2xhXCIgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgICAgIGhzdjogbmV3IFJlZ0V4cChcImhzdlwiICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgICAgICBoc3ZhOiBuZXcgUmVnRXhwKFwiaHN2YVwiICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgICAgICBoZXgzOiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8sXG4gICAgICAgIGhleDY6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxcbiAgICAgICAgaGV4NDogL14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxcbiAgICAgICAgaGV4ODogL14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkL1xuICAgIH07XG59KSgpO1xuXG4vLyBgaXNWYWxpZENTU1VuaXRgXG4vLyBUYWtlIGluIGEgc2luZ2xlIHN0cmluZyAvIG51bWJlciBhbmQgY2hlY2sgdG8gc2VlIGlmIGl0IGxvb2tzIGxpa2UgYSBDU1MgdW5pdFxuLy8gKHNlZSBgbWF0Y2hlcnNgIGFib3ZlIGZvciBkZWZpbml0aW9uKS5cbmZ1bmN0aW9uIGlzVmFsaWRDU1NVbml0KGNvbG9yKSB7XG4gICAgcmV0dXJuICEhbWF0Y2hlcnMuQ1NTX1VOSVQuZXhlYyhjb2xvcik7XG59XG5cbi8vIGBzdHJpbmdJbnB1dFRvT2JqZWN0YFxuLy8gUGVybWlzc2l2ZSBzdHJpbmcgcGFyc2luZy4gIFRha2UgaW4gYSBudW1iZXIgb2YgZm9ybWF0cywgYW5kIG91dHB1dCBhbiBvYmplY3Rcbi8vIGJhc2VkIG9uIGRldGVjdGVkIGZvcm1hdC4gIFJldHVybnMgYHsgciwgZywgYiB9YCBvciBgeyBoLCBzLCBsIH1gIG9yIGB7IGgsIHMsIHZ9YFxuZnVuY3Rpb24gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcikge1xuXG4gICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKHRyaW1MZWZ0LCcnKS5yZXBsYWNlKHRyaW1SaWdodCwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIG5hbWVkID0gZmFsc2U7XG4gICAgaWYgKG5hbWVzW2NvbG9yXSkge1xuICAgICAgICBjb2xvciA9IG5hbWVzW2NvbG9yXTtcbiAgICAgICAgbmFtZWQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2xvciA9PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAsIGZvcm1hdDogXCJuYW1lXCIgfTtcbiAgICB9XG5cbiAgICAvLyBUcnkgdG8gbWF0Y2ggc3RyaW5nIGlucHV0IHVzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gICAgLy8gS2VlcCBtb3N0IG9mIHRoZSBudW1iZXIgYm91bmRpbmcgb3V0IG9mIHRoaXMgZnVuY3Rpb24gLSBkb24ndCB3b3JyeSBhYm91dCBbMCwxXSBvciBbMCwxMDBdIG9yIFswLDM2MF1cbiAgICAvLyBKdXN0IHJldHVybiBhbiBvYmplY3QgYW5kIGxldCB0aGUgY29udmVyc2lvbiBmdW5jdGlvbnMgaGFuZGxlIHRoYXQuXG4gICAgLy8gVGhpcyB3YXkgdGhlIHJlc3VsdCB3aWxsIGJlIHRoZSBzYW1lIHdoZXRoZXIgdGhlIHRpbnljb2xvciBpcyBpbml0aWFsaXplZCB3aXRoIHN0cmluZyBvciBvYmplY3QuXG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5yZ2IuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLnJnYmEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc2wuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzbGEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc3YuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzdmEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg4LmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLFxuICAgICAgICAgICAgYTogY29udmVydEhleFRvRGVjaW1hbChtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleDhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4Ni5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhleDQuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0gKyAnJyArIG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSArICcnICsgbWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdICsgJycgKyBtYXRjaFszXSksXG4gICAgICAgICAgICBhOiBjb252ZXJ0SGV4VG9EZWNpbWFsKG1hdGNoWzRdICsgJycgKyBtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleDhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4My5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSArICcnICsgbWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdICsgJycgKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10gKyAnJyArIG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4XCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlV0NBRzJQYXJtcyhwYXJtcykge1xuICAgIC8vIHJldHVybiB2YWxpZCBXQ0FHMiBwYXJtcyBmb3IgaXNSZWFkYWJsZS5cbiAgICAvLyBJZiBpbnB1dCBwYXJtcyBhcmUgaW52YWxpZCwgcmV0dXJuIHtcImxldmVsXCI6XCJBQVwiLCBcInNpemVcIjpcInNtYWxsXCJ9XG4gICAgdmFyIGxldmVsLCBzaXplO1xuICAgIHBhcm1zID0gcGFybXMgfHwge1wibGV2ZWxcIjpcIkFBXCIsIFwic2l6ZVwiOlwic21hbGxcIn07XG4gICAgbGV2ZWwgPSAocGFybXMubGV2ZWwgfHwgXCJBQVwiKS50b1VwcGVyQ2FzZSgpO1xuICAgIHNpemUgPSAocGFybXMuc2l6ZSB8fCBcInNtYWxsXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxldmVsICE9PSBcIkFBXCIgJiYgbGV2ZWwgIT09IFwiQUFBXCIpIHtcbiAgICAgICAgbGV2ZWwgPSBcIkFBXCI7XG4gICAgfVxuICAgIGlmIChzaXplICE9PSBcInNtYWxsXCIgJiYgc2l6ZSAhPT0gXCJsYXJnZVwiKSB7XG4gICAgICAgIHNpemUgPSBcInNtYWxsXCI7XG4gICAgfVxuICAgIHJldHVybiB7XCJsZXZlbFwiOmxldmVsLCBcInNpemVcIjpzaXplfTtcbn1cblxuLy8gTm9kZTogRXhwb3J0IGZ1bmN0aW9uXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gdGlueWNvbG9yO1xufVxuLy8gQU1EL3JlcXVpcmVqczogRGVmaW5lIHRoZSBtb2R1bGVcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7cmV0dXJuIHRpbnljb2xvcjt9KTtcbn1cbi8vIEJyb3dzZXI6IEV4cG9zZSB0byB3aW5kb3dcbmVsc2Uge1xuICAgIHdpbmRvdy50aW55Y29sb3IgPSB0aW55Y29sb3I7XG59XG5cbn0pKE1hdGgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/tinycolor2/tinycolor.js\n");

/***/ })

})