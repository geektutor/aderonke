webpackHotUpdate("aderonke",{

/***/ "./node_modules/framer-motion/dist/es/events/use-dom-event.js":
/*!********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/events/use-dom-event.js ***!
  \********************************************************************/
/*! exports provided: addDomEvent, useDomEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addDomEvent\", function() { return addDomEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useDomEvent\", function() { return useDomEvent; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nfunction addDomEvent(target,eventName,handler,options){target.addEventListener(eventName,handler,options);return function(){return target.removeEventListener(eventName,handler,options);};}/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */function useDomEvent(ref,eventName,handler,options){Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function(){var element=ref.current;if(handler&&element){return addDomEvent(element,eventName,handler,options);}},[ref,eventName,handler,options]);}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy91c2UtZG9tLWV2ZW50LmpzPzg5Y2MiXSwibmFtZXMiOlsiYWRkRG9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJoYW5kbGVyIiwib3B0aW9ucyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXNlRG9tRXZlbnQiLCJyZWYiLCJ1c2VFZmZlY3QiLCJlbGVtZW50IiwiY3VycmVudCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBLFFBQVNBLFlBQVQsQ0FBcUJDLE1BQXJCLENBQTZCQyxTQUE3QixDQUF3Q0MsT0FBeEMsQ0FBaURDLE9BQWpELENBQTBELENBQ3RESCxNQUFNLENBQUNJLGdCQUFQLENBQXdCSCxTQUF4QixDQUFtQ0MsT0FBbkMsQ0FBNENDLE9BQTVDLEVBQ0EsTUFBTyxXQUFZLENBQUUsTUFBT0gsT0FBTSxDQUFDSyxtQkFBUCxDQUEyQkosU0FBM0IsQ0FBc0NDLE9BQXRDLENBQStDQyxPQUEvQyxDQUFQLENBQWlFLENBQXRGLENBQ0gsQ0FDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTRyxZQUFULENBQXFCQyxHQUFyQixDQUEwQk4sU0FBMUIsQ0FBcUNDLE9BQXJDLENBQThDQyxPQUE5QyxDQUF1RCxDQUNuREssdURBQVMsQ0FBQyxVQUFZLENBQ2xCLEdBQUlDLFFBQU8sQ0FBR0YsR0FBRyxDQUFDRyxPQUFsQixDQUNBLEdBQUlSLE9BQU8sRUFBSU8sT0FBZixDQUF3QixDQUNwQixNQUFPVixZQUFXLENBQUNVLE9BQUQsQ0FBVVIsU0FBVixDQUFxQkMsT0FBckIsQ0FBOEJDLE9BQTlCLENBQWxCLENBQ0gsQ0FDSixDQUxRLENBS04sQ0FBQ0ksR0FBRCxDQUFNTixTQUFOLENBQWlCQyxPQUFqQixDQUEwQkMsT0FBMUIsQ0FMTSxDQUFULENBTUgiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL2V2ZW50cy91c2UtZG9tLWV2ZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBhZGREb21FdmVudCh0YXJnZXQsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7IH07XG59XG4vKipcbiAqIEF0dGFjaGVzIGFuIGV2ZW50IGxpc3RlbmVyIGRpcmVjdGx5IHRvIHRoZSBwcm92aWRlZCBET00gZWxlbWVudC5cbiAqXG4gKiBCeXBhc3NpbmcgUmVhY3QncyBldmVudCBzeXN0ZW0gY2FuIGJlIGRlc2lyYWJsZSwgZm9yIGluc3RhbmNlIHdoZW4gYXR0YWNoaW5nIG5vbi1wYXNzaXZlXG4gKiBldmVudCBoYW5kbGVycy5cbiAqXG4gKiBgYGBqc3hcbiAqIGNvbnN0IHJlZiA9IHVzZVJlZihudWxsKVxuICpcbiAqIHVzZURvbUV2ZW50KHJlZiwgJ3doZWVsJywgb25XaGVlbCwgeyBwYXNzaXZlOiBmYWxzZSB9KVxuICpcbiAqIHJldHVybiA8ZGl2IHJlZj17cmVmfSAvPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHJlZiAtIFJlYWN0LlJlZk9iamVjdCB0aGF0J3MgYmVlbiBwcm92aWRlZCB0byB0aGUgZWxlbWVudCB5b3Ugd2FudCB0byBiaW5kIHRoZSBsaXN0ZW5lciB0by5cbiAqIEBwYXJhbSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBldmVudCB5b3Ugd2FudCBsaXN0ZW4gZm9yLlxuICogQHBhcmFtIGhhbmRsZXIgLSBGdW5jdGlvbiB0byBmaXJlIHdoZW4gcmVjZWl2aW5nIHRoZSBldmVudC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBwYXNzIHRvIGBFdmVudC5hZGRFdmVudExpc3RlbmVyYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHVzZURvbUV2ZW50KHJlZiwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSByZWYuY3VycmVudDtcbiAgICAgICAgaWYgKGhhbmRsZXIgJiYgZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFkZERvbUV2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LCBbcmVmLCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnNdKTtcbn1cblxuZXhwb3J0IHsgYWRkRG9tRXZlbnQsIHVzZURvbUV2ZW50IH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/events/use-dom-event.js\n");

/***/ }),

/***/ "./node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js ***!
  \**********************************************************************************/
/*! exports provided: setCurrentViewportBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setCurrentViewportBox\", function() { return setCurrentViewportBox; });\n/* harmony import */ var _motion_features_layout_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../motion/features/layout/utils.js */ \"./node_modules/framer-motion/dist/es/motion/features/layout/utils.js\");\n/* harmony import */ var _utils_each_axis_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/each-axis.js */ \"./node_modules/framer-motion/dist/es/utils/each-axis.js\");\nfunction setCurrentViewportBox(visualElement){var projectionParent=visualElement.getProjectionParent();if(!projectionParent){visualElement.rebaseProjectionTarget();return;}var relativeOffset=Object(_motion_features_layout_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"calcRelativeOffset\"])(projectionParent.getLayoutState().layout,visualElement.getLayoutState().layout);Object(_utils_each_axis_js__WEBPACK_IMPORTED_MODULE_1__[\"eachAxis\"])(function(axis){visualElement.setProjectionTargetAxis(axis,relativeOffset[axis].min,relativeOffset[axis].max,true);});}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci9kb20vcHJvamVjdGlvbi9yZWxhdGl2ZS1zZXQuanM/MDkwMSJdLCJuYW1lcyI6WyJzZXRDdXJyZW50Vmlld3BvcnRCb3giLCJ2aXN1YWxFbGVtZW50IiwicHJvamVjdGlvblBhcmVudCIsImdldFByb2plY3Rpb25QYXJlbnQiLCJyZWJhc2VQcm9qZWN0aW9uVGFyZ2V0IiwicmVsYXRpdmVPZmZzZXQiLCJjYWxjUmVsYXRpdmVPZmZzZXQiLCJnZXRMYXlvdXRTdGF0ZSIsImxheW91dCIsImVhY2hBeGlzIiwiYXhpcyIsInNldFByb2plY3Rpb25UYXJnZXRBeGlzIiwibWluIiwibWF4Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBLFFBQVNBLHNCQUFULENBQStCQyxhQUEvQixDQUE4QyxDQUMxQyxHQUFJQyxpQkFBZ0IsQ0FBR0QsYUFBYSxDQUFDRSxtQkFBZCxFQUF2QixDQUNBLEdBQUksQ0FBQ0QsZ0JBQUwsQ0FBdUIsQ0FDbkJELGFBQWEsQ0FBQ0csc0JBQWQsR0FDQSxPQUNILENBQ0QsR0FBSUMsZUFBYyxDQUFHQywyRkFBa0IsQ0FBQ0osZ0JBQWdCLENBQUNLLGNBQWpCLEdBQWtDQyxNQUFuQyxDQUEyQ1AsYUFBYSxDQUFDTSxjQUFkLEdBQStCQyxNQUExRSxDQUF2QyxDQUNBQyxvRUFBUSxDQUFDLFNBQVVDLElBQVYsQ0FBZ0IsQ0FDckJULGFBQWEsQ0FBQ1UsdUJBQWQsQ0FBc0NELElBQXRDLENBQTRDTCxjQUFjLENBQUNLLElBQUQsQ0FBZCxDQUFxQkUsR0FBakUsQ0FBc0VQLGNBQWMsQ0FBQ0ssSUFBRCxDQUFkLENBQXFCRyxHQUEzRixDQUFnRyxJQUFoRyxFQUNILENBRk8sQ0FBUixDQUdIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvZG9tL3Byb2plY3Rpb24vcmVsYXRpdmUtc2V0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FsY1JlbGF0aXZlT2Zmc2V0IH0gZnJvbSAnLi4vLi4vLi4vbW90aW9uL2ZlYXR1cmVzL2xheW91dC91dGlscy5qcyc7XG5pbXBvcnQgeyBlYWNoQXhpcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2VhY2gtYXhpcy5qcyc7XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRWaWV3cG9ydEJveCh2aXN1YWxFbGVtZW50KSB7XG4gICAgdmFyIHByb2plY3Rpb25QYXJlbnQgPSB2aXN1YWxFbGVtZW50LmdldFByb2plY3Rpb25QYXJlbnQoKTtcbiAgICBpZiAoIXByb2plY3Rpb25QYXJlbnQpIHtcbiAgICAgICAgdmlzdWFsRWxlbWVudC5yZWJhc2VQcm9qZWN0aW9uVGFyZ2V0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gY2FsY1JlbGF0aXZlT2Zmc2V0KHByb2plY3Rpb25QYXJlbnQuZ2V0TGF5b3V0U3RhdGUoKS5sYXlvdXQsIHZpc3VhbEVsZW1lbnQuZ2V0TGF5b3V0U3RhdGUoKS5sYXlvdXQpO1xuICAgIGVhY2hBeGlzKGZ1bmN0aW9uIChheGlzKSB7XG4gICAgICAgIHZpc3VhbEVsZW1lbnQuc2V0UHJvamVjdGlvblRhcmdldEF4aXMoYXhpcywgcmVsYXRpdmVPZmZzZXRbYXhpc10ubWluLCByZWxhdGl2ZU9mZnNldFtheGlzXS5tYXgsIHRydWUpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyBzZXRDdXJyZW50Vmlld3BvcnRCb3ggfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js\n");

/***/ }),

/***/ "./node_modules/framer-motion/dist/es/render/index.js":
/*!************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/index.js ***!
  \************************************************************/
/*! exports provided: visualElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"visualElement\", function() { return visualElement; });\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"./node_modules/framer-motion/node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! framesync */ \"./node_modules/framesync/dist/es/index.js\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! popmotion */ \"./node_modules/popmotion/dist/es/index.js\");\n/* harmony import */ var _components_AnimateSharedLayout_types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/AnimateSharedLayout/types.js */ \"./node_modules/framer-motion/dist/es/components/AnimateSharedLayout/types.js\");\n/* harmony import */ var _utils_each_axis_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/each-axis.js */ \"./node_modules/framer-motion/dist/es/utils/each-axis.js\");\n/* harmony import */ var _utils_geometry_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/geometry/index.js */ \"./node_modules/framer-motion/dist/es/utils/geometry/index.js\");\n/* harmony import */ var _utils_geometry_delta_apply_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/geometry/delta-apply.js */ \"./node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js\");\n/* harmony import */ var _utils_geometry_delta_calc_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/geometry/delta-calc.js */ \"./node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js\");\n/* harmony import */ var _value_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../value/index.js */ \"./node_modules/framer-motion/dist/es/value/index.js\");\n/* harmony import */ var _value_utils_is_motion_value_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../value/utils/is-motion-value.js */ \"./node_modules/framer-motion/dist/es/value/utils/is-motion-value.js\");\n/* harmony import */ var _html_utils_build_projection_transform_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./html/utils/build-projection-transform.js */ \"./node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js\");\n/* harmony import */ var _utils_animation_state_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/animation-state.js */ \"./node_modules/framer-motion/dist/es/render/utils/animation-state.js\");\n/* harmony import */ var _utils_lifecycles_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/lifecycles.js */ \"./node_modules/framer-motion/dist/es/render/utils/lifecycles.js\");\n/* harmony import */ var _utils_motion_values_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/motion-values.js */ \"./node_modules/framer-motion/dist/es/render/utils/motion-values.js\");\n/* harmony import */ var _utils_projection_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/projection.js */ \"./node_modules/framer-motion/dist/es/render/utils/projection.js\");\n/* harmony import */ var _utils_state_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/state.js */ \"./node_modules/framer-motion/dist/es/render/utils/state.js\");\n/* harmony import */ var _utils_flat_tree_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/flat-tree.js */ \"./node_modules/framer-motion/dist/es/render/utils/flat-tree.js\");\n/* harmony import */ var _utils_variants_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/variants.js */ \"./node_modules/framer-motion/dist/es/render/utils/variants.js\");\n/* harmony import */ var _dom_projection_relative_set_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dom/projection/relative-set.js */ \"./node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js\");\n/* harmony import */ var _utils_is_draggable_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/is-draggable.js */ \"./node_modules/framer-motion/dist/es/render/utils/is-draggable.js\");\nvar visualElement=function visualElement(_a){var _b=_a.treeType,treeType=_b===void 0?\"\":_b,build=_a.build,getBaseTarget=_a.getBaseTarget,makeTargetAnimatable=_a.makeTargetAnimatable,measureViewportBox=_a.measureViewportBox,renderInstance=_a.render,readValueFromInstance=_a.readValueFromInstance,resetTransform=_a.resetTransform,restoreTransform=_a.restoreTransform,removeValueFromRenderState=_a.removeValueFromRenderState,sortNodePosition=_a.sortNodePosition,scrapeMotionValuesFromProps=_a.scrapeMotionValuesFromProps;return function(_a,options){var parent=_a.parent,props=_a.props,presenceId=_a.presenceId,blockInitialAnimation=_a.blockInitialAnimation,visualState=_a.visualState;if(options===void 0){options={};}var latestValues=visualState.latestValues,renderState=visualState.renderState;/**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */var instance;/**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */var lifecycles=Object(_utils_lifecycles_js__WEBPACK_IMPORTED_MODULE_14__[\"createLifecycles\"])();/**\n         *\n         */var projection=Object(_utils_state_js__WEBPACK_IMPORTED_MODULE_17__[\"createProjectionState\"])();/**\n         * A reference to the nearest projecting parent. This is either\n         * undefined if we haven't looked for the nearest projecting parent,\n         * false if there is no parent performing layout projection, or a reference\n         * to the projecting parent.\n         */var projectionParent;/**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */var leadProjection=projection;var leadLatestValues=latestValues;var unsubscribeFromLeadVisualElement;/**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */var layoutState=Object(_utils_state_js__WEBPACK_IMPORTED_MODULE_17__[\"createLayoutState\"])();/**\n         *\n         */var crossfader;/**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */var hasViewportBoxUpdated=false;/**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */var values=new Map();/**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */var valueSubscriptions=new Map();/**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */var prevMotionValues={};/**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */var projectionTargetProgress;/**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */var baseTarget=Object(tslib__WEBPACK_IMPORTED_MODULE_2__[\"__assign\"])({},latestValues);// Internal methods ========================\n/**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */var removeFromVariantTree;/**\n         *\n         */function render(){if(!instance)return;if(element.isProjectionReady()){/**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */Object(_utils_geometry_delta_apply_js__WEBPACK_IMPORTED_MODULE_8__[\"applyBoxTransforms\"])(leadProjection.targetFinal,leadProjection.target,leadLatestValues);/**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */Object(_utils_geometry_delta_calc_js__WEBPACK_IMPORTED_MODULE_9__[\"updateBoxDelta\"])(layoutState.deltaFinal,layoutState.layoutCorrected,leadProjection.targetFinal,latestValues);}triggerBuild();renderInstance(instance,renderState);}function triggerBuild(){var valuesToRender=latestValues;if(crossfader&&crossfader.isActive()){var crossfadedValues=crossfader.getCrossfadeState(element);if(crossfadedValues)valuesToRender=crossfadedValues;}build(element,renderState,valuesToRender,leadProjection,layoutState,options,props);}function update(){lifecycles.notifyUpdate(latestValues);}function updateLayoutProjection(){if(!element.isProjectionReady())return;var delta=layoutState.delta,treeScale=layoutState.treeScale;var prevTreeScaleX=treeScale.x;var prevTreeScaleY=treeScale.y;var prevDeltaTransform=layoutState.deltaTransform;Object(_utils_projection_js__WEBPACK_IMPORTED_MODULE_16__[\"updateLayoutDeltas\"])(layoutState,leadProjection,element.path,latestValues);hasViewportBoxUpdated&&element.notifyViewportBoxUpdate(leadProjection.target,delta);hasViewportBoxUpdated=false;var deltaTransform=Object(_html_utils_build_projection_transform_js__WEBPACK_IMPORTED_MODULE_12__[\"buildLayoutProjectionTransform\"])(delta,treeScale);if(deltaTransform!==prevDeltaTransform||// Also compare calculated treeScale, for values that rely on this only for scale correction\nprevTreeScaleX!==treeScale.x||prevTreeScaleY!==treeScale.y){element.scheduleRender();}layoutState.deltaTransform=deltaTransform;}function updateTreeLayoutProjection(){element.layoutTree.forEach(fireUpdateLayoutProjection);}/**\n         *\n         */function bindToMotionValue(key,value){var removeOnChange=value.onChange(function(latestValue){latestValues[key]=latestValue;props.onUpdate&&framesync__WEBPACK_IMPORTED_MODULE_3__[\"default\"].update(update,false,true);});var removeOnRenderRequest=value.onRenderRequest(element.scheduleRender);valueSubscriptions.set(key,function(){removeOnChange();removeOnRenderRequest();});}/**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */var initialMotionValues=scrapeMotionValuesFromProps(props);for(var key in initialMotionValues){var value=initialMotionValues[key];if(latestValues[key]!==undefined&&Object(_value_utils_is_motion_value_js__WEBPACK_IMPORTED_MODULE_11__[\"isMotionValue\"])(value)){value.set(latestValues[key],false);}}/**\n         * Determine what role this visual element should take in the variant tree.\n         */var isControllingVariants=Object(_utils_variants_js__WEBPACK_IMPORTED_MODULE_19__[\"checkIfControllingVariants\"])(props);var isVariantNode=Object(_utils_variants_js__WEBPACK_IMPORTED_MODULE_19__[\"checkIfVariantNode\"])(props);var element=Object(tslib__WEBPACK_IMPORTED_MODULE_2__[\"__assign\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_2__[\"__assign\"])({treeType:treeType,/**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */current:null,/**\n             * The depth of this visual element within the visual element tree.\n             */depth:parent?parent.depth+1:0,parent:parent,children:new Set(),/**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */path:parent?Object(tslib__WEBPACK_IMPORTED_MODULE_2__[\"__spreadArray\"])(Object(tslib__WEBPACK_IMPORTED_MODULE_2__[\"__spreadArray\"])([],Object(tslib__WEBPACK_IMPORTED_MODULE_2__[\"__read\"])(parent.path)),[parent]):[],layoutTree:parent?parent.layoutTree:new _utils_flat_tree_js__WEBPACK_IMPORTED_MODULE_18__[\"FlatTree\"](),/**\n             *\n             */presenceId:presenceId,projection:projection,/**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */variantChildren:isVariantNode?new Set():undefined,/**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */isVisible:undefined,/**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */manuallyAnimateOnMount:Boolean(parent===null||parent===void 0?void 0:parent.isMounted()),/**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */blockInitialAnimation:blockInitialAnimation,/**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */isMounted:function(){return Boolean(instance);},mount:function(newInstance){instance=element.current=newInstance;element.pointTo(element);if(isVariantNode&&parent&&!isControllingVariants){removeFromVariantTree=parent===null||parent===void 0?void 0:parent.addVariantChild(element);}parent===null||parent===void 0?void 0:parent.children.add(element);},/**\n             *\n             */unmount:function(){framesync__WEBPACK_IMPORTED_MODULE_3__[\"cancelSync\"].update(update);framesync__WEBPACK_IMPORTED_MODULE_3__[\"cancelSync\"].render(render);framesync__WEBPACK_IMPORTED_MODULE_3__[\"cancelSync\"].preRender(element.updateLayoutProjection);valueSubscriptions.forEach(function(remove){return remove();});element.stopLayoutAnimation();element.layoutTree.remove(element);removeFromVariantTree===null||removeFromVariantTree===void 0?void 0:removeFromVariantTree();parent===null||parent===void 0?void 0:parent.children.delete(element);unsubscribeFromLeadVisualElement===null||unsubscribeFromLeadVisualElement===void 0?void 0:unsubscribeFromLeadVisualElement();lifecycles.clearAllListeners();},/**\n             * Add a child visual element to our set of children.\n             */addVariantChild:function(child){var _a;var closestVariantNode=element.getClosestVariantNode();if(closestVariantNode){(_a=closestVariantNode.variantChildren)===null||_a===void 0?void 0:_a.add(child);return function(){return closestVariantNode.variantChildren.delete(child);};}},sortNodePosition:function(other){/**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */if(!sortNodePosition||treeType!==other.treeType)return 0;return sortNodePosition(element.getInstance(),other.getInstance());},/**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */getClosestVariantNode:function(){return isVariantNode?element:parent===null||parent===void 0?void 0:parent.getClosestVariantNode();},/**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */scheduleUpdateLayoutProjection:parent?parent.scheduleUpdateLayoutProjection:function(){return framesync__WEBPACK_IMPORTED_MODULE_3__[\"default\"].preRender(element.updateTreeLayoutProjection,false,true);},/**\n             * Expose the latest layoutId prop.\n             */getLayoutId:function(){return props.layoutId;},/**\n             * Returns the current instance.\n             */getInstance:function(){return instance;},/**\n             * Get/set the latest static values.\n             */getStaticValue:function(key){return latestValues[key];},setStaticValue:function(key,value){return latestValues[key]=value;},/**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */getLatestValues:function(){return latestValues;},/**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */setVisibility:function(visibility){if(element.isVisible===visibility)return;element.isVisible=visibility;element.scheduleRender();},/**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */makeTargetAnimatable:function(target,canMutate){if(canMutate===void 0){canMutate=true;}return makeTargetAnimatable(element,target,props,canMutate);},// Motion values ========================\n/**\n             * Add a motion value and bind it to this visual element.\n             */addValue:function(key,value){// Remove existing value if it exists\nif(element.hasValue(key))element.removeValue(key);values.set(key,value);latestValues[key]=value.get();bindToMotionValue(key,value);},/**\n             * Remove a motion value and unbind any active subscriptions.\n             */removeValue:function(key){var _a;values.delete(key);(_a=valueSubscriptions.get(key))===null||_a===void 0?void 0:_a();valueSubscriptions.delete(key);delete latestValues[key];removeValueFromRenderState(key,renderState);},/**\n             * Check whether we have a motion value for this key\n             */hasValue:function(key){return values.has(key);},/**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */getValue:function(key,defaultValue){var value=values.get(key);if(value===undefined&&defaultValue!==undefined){value=Object(_value_index_js__WEBPACK_IMPORTED_MODULE_10__[\"motionValue\"])(defaultValue);element.addValue(key,value);}return value;},/**\n             * Iterate over our motion values.\n             */forEachValue:function(callback){return values.forEach(callback);},/**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */readValue:function(key){var _a;return(_a=latestValues[key])!==null&&_a!==void 0?_a:readValueFromInstance(instance,key,options);},/**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */setBaseTarget:function(key,value){baseTarget[key]=value;},/**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */getBaseTarget:function(key){if(getBaseTarget){var target=getBaseTarget(props,key);if(target!==undefined&&!Object(_value_utils_is_motion_value_js__WEBPACK_IMPORTED_MODULE_11__[\"isMotionValue\"])(target))return target;}return baseTarget[key];}},lifecycles),{/**\n             * Build the renderer state based on the latest visual state.\n             */build:function(){triggerBuild();return renderState;},/**\n             * Schedule a render on the next animation frame.\n             */scheduleRender:function(){framesync__WEBPACK_IMPORTED_MODULE_3__[\"default\"].render(render,false,true);},/**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */syncRender:render,/**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */setProps:function(newProps){props=newProps;lifecycles.updatePropListeners(newProps);prevMotionValues=Object(_utils_motion_values_js__WEBPACK_IMPORTED_MODULE_15__[\"updateMotionValuesFromProps\"])(element,scrapeMotionValuesFromProps(props),prevMotionValues);},getProps:function(){return props;},// Variants ==============================\n/**\n             * Returns the variant definition with a given name.\n             */getVariant:function(name){var _a;return(_a=props.variants)===null||_a===void 0?void 0:_a[name];},/**\n             * Returns the defined default transition on this component.\n             */getDefaultTransition:function(){return props.transition;},/**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */getVariantContext:function(startAtParent){if(startAtParent===void 0){startAtParent=false;}if(startAtParent)return parent===null||parent===void 0?void 0:parent.getVariantContext();if(!isControllingVariants){var context_1=(parent===null||parent===void 0?void 0:parent.getVariantContext())||{};if(props.initial!==undefined){context_1.initial=props.initial;}return context_1;}var context={};for(var i=0;i<numVariantProps;i++){var name_1=variantProps[i];var prop=props[name_1];if(Object(_utils_variants_js__WEBPACK_IMPORTED_MODULE_19__[\"isVariantLabel\"])(prop)||prop===false){context[name_1]=prop;}}return context;},// Layout projection ==============================\n/**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */enableLayoutProjection:function(){projection.isEnabled=true;element.layoutTree.add(element);},/**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */lockProjectionTarget:function(){projection.isTargetLocked=true;},unlockProjectionTarget:function(){element.stopLayoutAnimation();projection.isTargetLocked=false;},getLayoutState:function(){return layoutState;},setCrossfader:function(newCrossfader){crossfader=newCrossfader;},isProjectionReady:function(){return projection.isEnabled&&projection.isHydrated&&layoutState.isHydrated;},/**\n             * Start a layout animation on a given axis.\n             */startLayoutAnimation:function(axis,transition,isRelative){if(isRelative===void 0){isRelative=false;}var progress=element.getProjectionAnimationProgress()[axis];var _a=isRelative?projection.relativeTarget[axis]:projection.target[axis],min=_a.min,max=_a.max;var length=max-min;progress.clearListeners();progress.set(min);progress.set(min);// Set twice to hard-reset velocity\nprogress.onChange(function(v){element.setProjectionTargetAxis(axis,v,v+length,isRelative);});return element.animateMotionValue(axis,progress,0,transition);},/**\n             * Stop layout animations.\n             */stopLayoutAnimation:function(){Object(_utils_each_axis_js__WEBPACK_IMPORTED_MODULE_6__[\"eachAxis\"])(function(axis){return element.getProjectionAnimationProgress()[axis].stop();});},/**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */measureViewportBox:function(withTransform){if(withTransform===void 0){withTransform=true;}var viewportBox=measureViewportBox(instance,options);if(!withTransform)Object(_utils_geometry_delta_apply_js__WEBPACK_IMPORTED_MODULE_8__[\"removeBoxTransforms\"])(viewportBox,latestValues);return viewportBox;},/**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */getProjectionAnimationProgress:function(){projectionTargetProgress||(projectionTargetProgress={x:Object(_value_index_js__WEBPACK_IMPORTED_MODULE_10__[\"motionValue\"])(0),y:Object(_value_index_js__WEBPACK_IMPORTED_MODULE_10__[\"motionValue\"])(0)});return projectionTargetProgress;},/**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */setProjectionTargetAxis:function(axis,min,max,isRelative){if(isRelative===void 0){isRelative=false;}var target;if(isRelative){if(!projection.relativeTarget){projection.relativeTarget=Object(_utils_geometry_index_js__WEBPACK_IMPORTED_MODULE_7__[\"axisBox\"])();}target=projection.relativeTarget[axis];}else{projection.relativeTarget=undefined;target=projection.target[axis];}projection.isHydrated=true;target.min=min;target.max=max;// Flag that we want to fire the onViewportBoxUpdate event handler\nhasViewportBoxUpdated=true;lifecycles.notifySetAxisTarget();},/**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */rebaseProjectionTarget:function(force,box){if(box===void 0){box=layoutState.layout;}var _a=element.getProjectionAnimationProgress(),x=_a.x,y=_a.y;var shouldRebase=!projection.relativeTarget&&!projection.isTargetLocked&&!x.isAnimating()&&!y.isAnimating();if(force||shouldRebase){Object(_utils_each_axis_js__WEBPACK_IMPORTED_MODULE_6__[\"eachAxis\"])(function(axis){var _a=box[axis],min=_a.min,max=_a.max;element.setProjectionTargetAxis(axis,min,max);});}},/**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */notifyLayoutReady:function(config){Object(_dom_projection_relative_set_js__WEBPACK_IMPORTED_MODULE_20__[\"setCurrentViewportBox\"])(element);element.notifyLayoutUpdate(layoutState.layout,element.prevViewportBox||layoutState.layout,config);},/**\n             * Temporarily reset the transform of the instance.\n             */resetTransform:function(){return resetTransform(element,instance,props);},restoreTransform:function(){return restoreTransform(instance,renderState);},updateLayoutProjection:updateLayoutProjection,updateTreeLayoutProjection:function(){element.layoutTree.forEach(fireResolveRelativeTargetBox);/**\n                 * Schedule the projection updates at the end of the current preRender\n                 * step. This will ensure that all layout trees will first resolve\n                 * relative projection boxes into viewport boxes, and *then*\n                 * update projections.\n                 */framesync__WEBPACK_IMPORTED_MODULE_3__[\"default\"].preRender(updateTreeLayoutProjection,false,true);// sync.postRender(() => element.scheduleUpdateLayoutProjection())\n},getProjectionParent:function(){if(projectionParent===undefined){var foundParent=false;// Search backwards through the tree path\nfor(var i=element.path.length-1;i>=0;i--){var ancestor=element.path[i];if(ancestor.projection.isEnabled){foundParent=ancestor;break;}}projectionParent=foundParent;}return projectionParent;},resolveRelativeTargetBox:function(){var relativeParent=element.getProjectionParent();if(!projection.relativeTarget||!relativeParent)return;Object(_utils_geometry_delta_calc_js__WEBPACK_IMPORTED_MODULE_9__[\"calcRelativeBox\"])(projection,relativeParent.projection);if(Object(_utils_is_draggable_js__WEBPACK_IMPORTED_MODULE_21__[\"isDraggable\"])(relativeParent)){var target=projection.target;Object(_utils_geometry_delta_apply_js__WEBPACK_IMPORTED_MODULE_8__[\"applyBoxTransforms\"])(target,target,relativeParent.getLatestValues());}},shouldResetTransform:function(){return Boolean(props._layoutResetTransform);},/**\n             *\n             */pointTo:function(newLead){leadProjection=newLead.projection;leadLatestValues=newLead.getLatestValues();/**\n                 * Subscribe to lead component's layout animations\n                 */unsubscribeFromLeadVisualElement===null||unsubscribeFromLeadVisualElement===void 0?void 0:unsubscribeFromLeadVisualElement();unsubscribeFromLeadVisualElement=Object(popmotion__WEBPACK_IMPORTED_MODULE_4__[\"pipe\"])(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection),newLead.onLayoutAnimationComplete(function(){var _a;if(element.isPresent){element.presence=_components_AnimateSharedLayout_types_js__WEBPACK_IMPORTED_MODULE_5__[\"Presence\"].Present;}else{(_a=element.layoutSafeToRemove)===null||_a===void 0?void 0:_a.call(element);}}));},// TODO: Clean this up\nisPresent:true,presence:_components_AnimateSharedLayout_types_js__WEBPACK_IMPORTED_MODULE_5__[\"Presence\"].Entering});return element;};};function fireResolveRelativeTargetBox(child){child.resolveRelativeTargetBox();}function fireUpdateLayoutProjection(child){child.updateLayoutProjection();}var variantProps=Object(tslib__WEBPACK_IMPORTED_MODULE_2__[\"__spreadArray\"])([\"initial\"],Object(tslib__WEBPACK_IMPORTED_MODULE_2__[\"__read\"])(_utils_animation_state_js__WEBPACK_IMPORTED_MODULE_13__[\"variantPriorityOrder\"]));var numVariantProps=variantProps.length;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/render/index.js\n");

/***/ }),

/***/ "./node_modules/framer-motion/dist/es/render/utils/lifecycles.js":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/lifecycles.js ***!
  \***********************************************************************/
/*! exports provided: createLifecycles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createLifecycles\", function() { return createLifecycles; });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/framer-motion/node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _utils_subscription_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/subscription-manager.js */ \"./node_modules/framer-motion/dist/es/utils/subscription-manager.js\");\nvar names=[\"LayoutMeasure\",\"BeforeLayoutMeasure\",\"LayoutUpdate\",\"ViewportBoxUpdate\",\"Update\",\"Render\",\"AnimationComplete\",\"LayoutAnimationComplete\",\"AnimationStart\",\"SetAxisTarget\",\"Unmount\"];function createLifecycles(){var managers=names.map(function(){return new _utils_subscription_manager_js__WEBPACK_IMPORTED_MODULE_1__[\"SubscriptionManager\"]();});var propSubscriptions={};var lifecycles={clearAllListeners:function(){return managers.forEach(function(manager){return manager.clear();});},updatePropListeners:function(props){return names.forEach(function(name){var _a;(_a=propSubscriptions[name])===null||_a===void 0?void 0:_a.call(propSubscriptions);var on=\"on\"+name;var propListener=props[on];if(propListener){propSubscriptions[name]=lifecycles[on](propListener);}});}};managers.forEach(function(manager,i){lifecycles[\"on\"+names[i]]=function(handler){return manager.add(handler);};lifecycles[\"notify\"+names[i]]=function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}return manager.notify.apply(manager,Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__spreadArray\"])([],Object(tslib__WEBPACK_IMPORTED_MODULE_0__[\"__read\"])(args)));};});return lifecycles;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9saWZlY3ljbGVzLmpzP2JkZGQiXSwibmFtZXMiOlsibmFtZXMiLCJjcmVhdGVMaWZlY3ljbGVzIiwibWFuYWdlcnMiLCJtYXAiLCJTdWJzY3JpcHRpb25NYW5hZ2VyIiwicHJvcFN1YnNjcmlwdGlvbnMiLCJsaWZlY3ljbGVzIiwiY2xlYXJBbGxMaXN0ZW5lcnMiLCJmb3JFYWNoIiwibWFuYWdlciIsImNsZWFyIiwidXBkYXRlUHJvcExpc3RlbmVycyIsInByb3BzIiwibmFtZSIsIl9hIiwiY2FsbCIsIm9uIiwicHJvcExpc3RlbmVyIiwiaSIsImhhbmRsZXIiLCJhZGQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJub3RpZnkiLCJhcHBseSIsIl9fc3ByZWFkQXJyYXkiLCJfX3JlYWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0EsR0FBSUEsTUFBSyxDQUFHLENBQ1IsZUFEUSxDQUVSLHFCQUZRLENBR1IsY0FIUSxDQUlSLG1CQUpRLENBS1IsUUFMUSxDQU1SLFFBTlEsQ0FPUixtQkFQUSxDQVFSLHlCQVJRLENBU1IsZ0JBVFEsQ0FVUixlQVZRLENBV1IsU0FYUSxDQUFaLENBYUEsUUFBU0MsaUJBQVQsRUFBNEIsQ0FDeEIsR0FBSUMsU0FBUSxDQUFHRixLQUFLLENBQUNHLEdBQU4sQ0FBVSxVQUFZLENBQUUsTUFBTyxJQUFJQyxtRkFBSixFQUFQLENBQW1DLENBQTNELENBQWYsQ0FDQSxHQUFJQyxrQkFBaUIsQ0FBRyxFQUF4QixDQUNBLEdBQUlDLFdBQVUsQ0FBRyxDQUNiQyxpQkFBaUIsQ0FBRSxVQUFZLENBQUUsTUFBT0wsU0FBUSxDQUFDTSxPQUFULENBQWlCLFNBQVVDLE9BQVYsQ0FBbUIsQ0FBRSxNQUFPQSxRQUFPLENBQUNDLEtBQVIsRUFBUCxDQUF5QixDQUEvRCxDQUFQLENBQTBFLENBRDlGLENBRWJDLG1CQUFtQixDQUFFLFNBQVVDLEtBQVYsQ0FBaUIsQ0FDbEMsTUFBT1osTUFBSyxDQUFDUSxPQUFOLENBQWMsU0FBVUssSUFBVixDQUFnQixDQUNqQyxHQUFJQyxHQUFKLENBQ0EsQ0FBQ0EsRUFBRSxDQUFHVCxpQkFBaUIsQ0FBQ1EsSUFBRCxDQUF2QixJQUFtQyxJQUFuQyxFQUEyQ0MsRUFBRSxHQUFLLElBQUssRUFBdkQsQ0FBMkQsSUFBSyxFQUFoRSxDQUFvRUEsRUFBRSxDQUFDQyxJQUFILENBQVFWLGlCQUFSLENBQXBFLENBQ0EsR0FBSVcsR0FBRSxDQUFHLEtBQU9ILElBQWhCLENBQ0EsR0FBSUksYUFBWSxDQUFHTCxLQUFLLENBQUNJLEVBQUQsQ0FBeEIsQ0FDQSxHQUFJQyxZQUFKLENBQWtCLENBQ2RaLGlCQUFpQixDQUFDUSxJQUFELENBQWpCLENBQTBCUCxVQUFVLENBQUNVLEVBQUQsQ0FBVixDQUFlQyxZQUFmLENBQTFCLENBQ0gsQ0FDSixDQVJNLENBQVAsQ0FTSCxDQVpZLENBQWpCLENBY0FmLFFBQVEsQ0FBQ00sT0FBVCxDQUFpQixTQUFVQyxPQUFWLENBQW1CUyxDQUFuQixDQUFzQixDQUNuQ1osVUFBVSxDQUFDLEtBQU9OLEtBQUssQ0FBQ2tCLENBQUQsQ0FBYixDQUFWLENBQThCLFNBQVVDLE9BQVYsQ0FBbUIsQ0FBRSxNQUFPVixRQUFPLENBQUNXLEdBQVIsQ0FBWUQsT0FBWixDQUFQLENBQThCLENBQWpGLENBQ0FiLFVBQVUsQ0FBQyxTQUFXTixLQUFLLENBQUNrQixDQUFELENBQWpCLENBQVYsQ0FBa0MsVUFBWSxDQUMxQyxHQUFJRyxLQUFJLENBQUcsRUFBWCxDQUNBLElBQUssR0FBSUMsR0FBRSxDQUFHLENBQWQsQ0FBaUJBLEVBQUUsQ0FBR0MsU0FBUyxDQUFDQyxNQUFoQyxDQUF3Q0YsRUFBRSxFQUExQyxDQUE4QyxDQUMxQ0QsSUFBSSxDQUFDQyxFQUFELENBQUosQ0FBV0MsU0FBUyxDQUFDRCxFQUFELENBQXBCLENBQ0gsQ0FDRCxNQUFPYixRQUFPLENBQUNnQixNQUFSLENBQWVDLEtBQWYsQ0FBcUJqQixPQUFyQixDQUE4QmtCLDJEQUFhLENBQUMsRUFBRCxDQUFLQyxvREFBTSxDQUFDUCxJQUFELENBQVgsQ0FBM0MsQ0FBUCxDQUNILENBTkQsQ0FPSCxDQVRELEVBVUEsTUFBT2YsV0FBUCxDQUNIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZyYW1lci1tb3Rpb24vZGlzdC9lcy9yZW5kZXIvdXRpbHMvbGlmZWN5Y2xlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fc3ByZWFkQXJyYXksIF9fcmVhZCB9IGZyb20gJ3RzbGliJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICcuLi8uLi91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5qcyc7XG5cbnZhciBuYW1lcyA9IFtcbiAgICBcIkxheW91dE1lYXN1cmVcIixcbiAgICBcIkJlZm9yZUxheW91dE1lYXN1cmVcIixcbiAgICBcIkxheW91dFVwZGF0ZVwiLFxuICAgIFwiVmlld3BvcnRCb3hVcGRhdGVcIixcbiAgICBcIlVwZGF0ZVwiLFxuICAgIFwiUmVuZGVyXCIsXG4gICAgXCJBbmltYXRpb25Db21wbGV0ZVwiLFxuICAgIFwiTGF5b3V0QW5pbWF0aW9uQ29tcGxldGVcIixcbiAgICBcIkFuaW1hdGlvblN0YXJ0XCIsXG4gICAgXCJTZXRBeGlzVGFyZ2V0XCIsXG4gICAgXCJVbm1vdW50XCIsXG5dO1xuZnVuY3Rpb24gY3JlYXRlTGlmZWN5Y2xlcygpIHtcbiAgICB2YXIgbWFuYWdlcnMgPSBuYW1lcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKTsgfSk7XG4gICAgdmFyIHByb3BTdWJzY3JpcHRpb25zID0ge307XG4gICAgdmFyIGxpZmVjeWNsZXMgPSB7XG4gICAgICAgIGNsZWFyQWxsTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYW5hZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uIChtYW5hZ2VyKSB7IHJldHVybiBtYW5hZ2VyLmNsZWFyKCk7IH0pOyB9LFxuICAgICAgICB1cGRhdGVQcm9wTGlzdGVuZXJzOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIChfYSA9IHByb3BTdWJzY3JpcHRpb25zW25hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChwcm9wU3Vic2NyaXB0aW9ucyk7XG4gICAgICAgICAgICAgICAgdmFyIG9uID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcExpc3RlbmVyID0gcHJvcHNbb25dO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wTGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcFN1YnNjcmlwdGlvbnNbbmFtZV0gPSBsaWZlY3ljbGVzW29uXShwcm9wTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgbWFuYWdlcnMuZm9yRWFjaChmdW5jdGlvbiAobWFuYWdlciwgaSkge1xuICAgICAgICBsaWZlY3ljbGVzW1wib25cIiArIG5hbWVzW2ldXSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7IHJldHVybiBtYW5hZ2VyLmFkZChoYW5kbGVyKTsgfTtcbiAgICAgICAgbGlmZWN5Y2xlc1tcIm5vdGlmeVwiICsgbmFtZXNbaV1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hbmFnZXIubm90aWZ5LmFwcGx5KG1hbmFnZXIsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBsaWZlY3ljbGVzO1xufVxuXG5leHBvcnQgeyBjcmVhdGVMaWZlY3ljbGVzIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/render/utils/lifecycles.js\n");

/***/ }),

/***/ "./node_modules/framer-motion/dist/es/render/utils/motion-values.js":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/motion-values.js ***!
  \**************************************************************************/
/*! exports provided: updateMotionValuesFromProps */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateMotionValuesFromProps\", function() { return updateMotionValuesFromProps; });\n/* harmony import */ var _value_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../value/index.js */ \"./node_modules/framer-motion/dist/es/value/index.js\");\n/* harmony import */ var _value_utils_is_motion_value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../value/utils/is-motion-value.js */ \"./node_modules/framer-motion/dist/es/value/utils/is-motion-value.js\");\nfunction updateMotionValuesFromProps(element,next,prev){var _a;for(var key in next){var nextValue=next[key];var prevValue=prev[key];if(Object(_value_utils_is_motion_value_js__WEBPACK_IMPORTED_MODULE_1__[\"isMotionValue\"])(nextValue)){/**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */element.addValue(key,nextValue);}else if(Object(_value_utils_is_motion_value_js__WEBPACK_IMPORTED_MODULE_1__[\"isMotionValue\"])(prevValue)){/**\n             * If we're swapping to a new motion value, create a new motion value\n             * from that\n             */element.addValue(key,Object(_value_index_js__WEBPACK_IMPORTED_MODULE_0__[\"motionValue\"])(nextValue));}else if(prevValue!==nextValue){/**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */if(element.hasValue(key)){var existingValue=element.getValue(key);// TODO: Only update values that aren't being animated or even looked at\n!existingValue.hasAnimated&&existingValue.set(nextValue);}else{element.addValue(key,Object(_value_index_js__WEBPACK_IMPORTED_MODULE_0__[\"motionValue\"])((_a=element.getStaticValue(key))!==null&&_a!==void 0?_a:nextValue));}}}// Handle removed values\nfor(var key in prev){if(next[key]===undefined)element.removeValue(key);}return next;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9tb3Rpb24tdmFsdWVzLmpzP2MwYzgiXSwibmFtZXMiOlsidXBkYXRlTW90aW9uVmFsdWVzRnJvbVByb3BzIiwiZWxlbWVudCIsIm5leHQiLCJwcmV2IiwiX2EiLCJrZXkiLCJuZXh0VmFsdWUiLCJwcmV2VmFsdWUiLCJpc01vdGlvblZhbHVlIiwiYWRkVmFsdWUiLCJtb3Rpb25WYWx1ZSIsImhhc1ZhbHVlIiwiZXhpc3RpbmdWYWx1ZSIsImdldFZhbHVlIiwiaGFzQW5pbWF0ZWQiLCJzZXQiLCJnZXRTdGF0aWNWYWx1ZSIsInVuZGVmaW5lZCIsInJlbW92ZVZhbHVlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBLFFBQVNBLDRCQUFULENBQXFDQyxPQUFyQyxDQUE4Q0MsSUFBOUMsQ0FBb0RDLElBQXBELENBQTBELENBQ3RELEdBQUlDLEdBQUosQ0FDQSxJQUFLLEdBQUlDLElBQVQsR0FBZ0JILEtBQWhCLENBQXNCLENBQ2xCLEdBQUlJLFVBQVMsQ0FBR0osSUFBSSxDQUFDRyxHQUFELENBQXBCLENBQ0EsR0FBSUUsVUFBUyxDQUFHSixJQUFJLENBQUNFLEdBQUQsQ0FBcEIsQ0FDQSxHQUFJRyxxRkFBYSxDQUFDRixTQUFELENBQWpCLENBQThCLENBQzFCO0FBQ1o7QUFDQTtBQUNBLGVBQ1lMLE9BQU8sQ0FBQ1EsUUFBUixDQUFpQkosR0FBakIsQ0FBc0JDLFNBQXRCLEVBQ0gsQ0FORCxJQU9LLElBQUlFLHFGQUFhLENBQUNELFNBQUQsQ0FBakIsQ0FBOEIsQ0FDL0I7QUFDWjtBQUNBO0FBQ0EsZUFDWU4sT0FBTyxDQUFDUSxRQUFSLENBQWlCSixHQUFqQixDQUFzQkssbUVBQVcsQ0FBQ0osU0FBRCxDQUFqQyxFQUNILENBTkksSUFPQSxJQUFJQyxTQUFTLEdBQUtELFNBQWxCLENBQTZCLENBQzlCO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsZUFDWSxHQUFJTCxPQUFPLENBQUNVLFFBQVIsQ0FBaUJOLEdBQWpCLENBQUosQ0FBMkIsQ0FDdkIsR0FBSU8sY0FBYSxDQUFHWCxPQUFPLENBQUNZLFFBQVIsQ0FBaUJSLEdBQWpCLENBQXBCLENBQ0E7QUFDQSxDQUFDTyxhQUFhLENBQUNFLFdBQWYsRUFBOEJGLGFBQWEsQ0FBQ0csR0FBZCxDQUFrQlQsU0FBbEIsQ0FBOUIsQ0FDSCxDQUpELElBS0ssQ0FDREwsT0FBTyxDQUFDUSxRQUFSLENBQWlCSixHQUFqQixDQUFzQkssbUVBQVcsQ0FBQyxDQUFDTixFQUFFLENBQUdILE9BQU8sQ0FBQ2UsY0FBUixDQUF1QlgsR0FBdkIsQ0FBTixJQUF1QyxJQUF2QyxFQUErQ0QsRUFBRSxHQUFLLElBQUssRUFBM0QsQ0FBK0RBLEVBQS9ELENBQW9FRSxTQUFyRSxDQUFqQyxFQUNILENBQ0osQ0FDSixDQUNEO0FBQ0EsSUFBSyxHQUFJRCxJQUFULEdBQWdCRixLQUFoQixDQUFzQixDQUNsQixHQUFJRCxJQUFJLENBQUNHLEdBQUQsQ0FBSixHQUFjWSxTQUFsQixDQUNJaEIsT0FBTyxDQUFDaUIsV0FBUixDQUFvQmIsR0FBcEIsRUFDUCxDQUNELE1BQU9ILEtBQVAsQ0FDSCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvcmVuZGVyL3V0aWxzL21vdGlvbi12YWx1ZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtb3Rpb25WYWx1ZSB9IGZyb20gJy4uLy4uL3ZhbHVlL2luZGV4LmpzJztcbmltcG9ydCB7IGlzTW90aW9uVmFsdWUgfSBmcm9tICcuLi8uLi92YWx1ZS91dGlscy9pcy1tb3Rpb24tdmFsdWUuanMnO1xuXG5mdW5jdGlvbiB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMoZWxlbWVudCwgbmV4dCwgcHJldikge1xuICAgIHZhciBfYTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV4dCkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gbmV4dFtrZXldO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gcHJldltrZXldO1xuICAgICAgICBpZiAoaXNNb3Rpb25WYWx1ZShuZXh0VmFsdWUpKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYSBtb3Rpb24gdmFsdWUgZm91bmQgaW4gcHJvcHMgb3Igc3R5bGUsIHdlIHdhbnQgdG8gYWRkIGl0XG4gICAgICAgICAgICAgKiB0byBvdXIgdmlzdWFsIGVsZW1lbnQncyBtb3Rpb24gdmFsdWUgbWFwLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgbmV4dFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc01vdGlvblZhbHVlKHByZXZWYWx1ZSkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgd2UncmUgc3dhcHBpbmcgdG8gYSBuZXcgbW90aW9uIHZhbHVlLCBjcmVhdGUgYSBuZXcgbW90aW9uIHZhbHVlXG4gICAgICAgICAgICAgKiBmcm9tIHRoYXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZWxlbWVudC5hZGRWYWx1ZShrZXksIG1vdGlvblZhbHVlKG5leHRWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByZXZWYWx1ZSAhPT0gbmV4dFZhbHVlKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoaXMgaXMgYSBmbGF0IHZhbHVlIHRoYXQgaGFzIGNoYW5nZWQsIHVwZGF0ZSB0aGUgbW90aW9uIHZhbHVlXG4gICAgICAgICAgICAgKiBvciBjcmVhdGUgb25lIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG9ubHkgd2FudCB0byBkbyB0aGlzIGlmIHdlJ3JlXG4gICAgICAgICAgICAgKiBub3QgaGFuZGxpbmcgdGhlIHZhbHVlIHdpdGggb3VyIGFuaW1hdGlvbiBzdGF0ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzVmFsdWUoa2V5KSkge1xuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ1ZhbHVlID0gZWxlbWVudC5nZXRWYWx1ZShrZXkpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IE9ubHkgdXBkYXRlIHZhbHVlcyB0aGF0IGFyZW4ndCBiZWluZyBhbmltYXRlZCBvciBldmVuIGxvb2tlZCBhdFxuICAgICAgICAgICAgICAgICFleGlzdGluZ1ZhbHVlLmhhc0FuaW1hdGVkICYmIGV4aXN0aW5nVmFsdWUuc2V0KG5leHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZFZhbHVlKGtleSwgbW90aW9uVmFsdWUoKF9hID0gZWxlbWVudC5nZXRTdGF0aWNWYWx1ZShrZXkpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXh0VmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBIYW5kbGUgcmVtb3ZlZCB2YWx1ZXNcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJldikge1xuICAgICAgICBpZiAobmV4dFtrZXldID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZVZhbHVlKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0O1xufVxuXG5leHBvcnQgeyB1cGRhdGVNb3Rpb25WYWx1ZXNGcm9tUHJvcHMgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/render/utils/motion-values.js\n");

/***/ }),

/***/ "./node_modules/framer-motion/dist/es/render/utils/projection.js":
/*!***********************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/render/utils/projection.js ***!
  \***********************************************************************/
/*! exports provided: updateLayoutDeltas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateLayoutDeltas\", function() { return updateLayoutDeltas; });\n/* harmony import */ var _utils_geometry_delta_apply_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/geometry/delta-apply.js */ \"./node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js\");\n/* harmony import */ var _utils_geometry_delta_calc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/geometry/delta-calc.js */ \"./node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js\");\nfunction updateLayoutDeltas(_a,_b,treePath,transformOrigin){var delta=_a.delta,layout=_a.layout,layoutCorrected=_a.layoutCorrected,treeScale=_a.treeScale;var target=_b.target;/**\n     * Reset the corrected box with the latest values from box, as we're then going\n     * to perform mutative operations on it.\n     */Object(_utils_geometry_delta_apply_js__WEBPACK_IMPORTED_MODULE_0__[\"resetBox\"])(layoutCorrected,layout);/**\n     * Apply all the parent deltas to this box to produce the corrected box. This\n     * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n     */Object(_utils_geometry_delta_apply_js__WEBPACK_IMPORTED_MODULE_0__[\"applyTreeDeltas\"])(layoutCorrected,treeScale,treePath);/**\n     * Update the delta between the corrected box and the target box before user-set transforms were applied.\n     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n     * for our layout reprojection, but still allow them to be scaled correctly by the user.\n     * It might be that to simplify this we may want to accept that user-set scale is also corrected\n     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n     * to allow people to choose whether these styles are corrected based on just the\n     * layout reprojection or the final bounding box.\n     */Object(_utils_geometry_delta_calc_js__WEBPACK_IMPORTED_MODULE_1__[\"updateBoxDelta\"])(delta,layoutCorrected,target,transformOrigin);}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9wcm9qZWN0aW9uLmpzP2RlY2UiXSwibmFtZXMiOlsidXBkYXRlTGF5b3V0RGVsdGFzIiwiX2EiLCJfYiIsInRyZWVQYXRoIiwidHJhbnNmb3JtT3JpZ2luIiwiZGVsdGEiLCJsYXlvdXQiLCJsYXlvdXRDb3JyZWN0ZWQiLCJ0cmVlU2NhbGUiLCJ0YXJnZXQiLCJyZXNldEJveCIsImFwcGx5VHJlZURlbHRhcyIsInVwZGF0ZUJveERlbHRhIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBLFFBQVNBLG1CQUFULENBQTRCQyxFQUE1QixDQUFnQ0MsRUFBaEMsQ0FBb0NDLFFBQXBDLENBQThDQyxlQUE5QyxDQUErRCxDQUMzRCxHQUFJQyxNQUFLLENBQUdKLEVBQUUsQ0FBQ0ksS0FBZixDQUFzQkMsTUFBTSxDQUFHTCxFQUFFLENBQUNLLE1BQWxDLENBQTBDQyxlQUFlLENBQUdOLEVBQUUsQ0FBQ00sZUFBL0QsQ0FBZ0ZDLFNBQVMsQ0FBR1AsRUFBRSxDQUFDTyxTQUEvRixDQUNBLEdBQUlDLE9BQU0sQ0FBR1AsRUFBRSxDQUFDTyxNQUFoQixDQUNBO0FBQ0o7QUFDQTtBQUNBLE9BQ0lDLCtFQUFRLENBQUNILGVBQUQsQ0FBa0JELE1BQWxCLENBQVIsQ0FDQTtBQUNKO0FBQ0E7QUFDQSxPQUNJSyxzRkFBZSxDQUFDSixlQUFELENBQWtCQyxTQUFsQixDQUE2QkwsUUFBN0IsQ0FBZixDQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUNJUyxvRkFBYyxDQUFDUCxLQUFELENBQVFFLGVBQVIsQ0FBeUJFLE1BQXpCLENBQWlDTCxlQUFqQyxDQUFkLENBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3JlbmRlci91dGlscy9wcm9qZWN0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVzZXRCb3gsIGFwcGx5VHJlZURlbHRhcyB9IGZyb20gJy4uLy4uL3V0aWxzL2dlb21ldHJ5L2RlbHRhLWFwcGx5LmpzJztcbmltcG9ydCB7IHVwZGF0ZUJveERlbHRhIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2VvbWV0cnkvZGVsdGEtY2FsYy5qcyc7XG5cbmZ1bmN0aW9uIHVwZGF0ZUxheW91dERlbHRhcyhfYSwgX2IsIHRyZWVQYXRoLCB0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgICB2YXIgZGVsdGEgPSBfYS5kZWx0YSwgbGF5b3V0ID0gX2EubGF5b3V0LCBsYXlvdXRDb3JyZWN0ZWQgPSBfYS5sYXlvdXRDb3JyZWN0ZWQsIHRyZWVTY2FsZSA9IF9hLnRyZWVTY2FsZTtcbiAgICB2YXIgdGFyZ2V0ID0gX2IudGFyZ2V0O1xuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBjb3JyZWN0ZWQgYm94IHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSBib3gsIGFzIHdlJ3JlIHRoZW4gZ29pbmdcbiAgICAgKiB0byBwZXJmb3JtIG11dGF0aXZlIG9wZXJhdGlvbnMgb24gaXQuXG4gICAgICovXG4gICAgcmVzZXRCb3gobGF5b3V0Q29ycmVjdGVkLCBsYXlvdXQpO1xuICAgIC8qKlxuICAgICAqIEFwcGx5IGFsbCB0aGUgcGFyZW50IGRlbHRhcyB0byB0aGlzIGJveCB0byBwcm9kdWNlIHRoZSBjb3JyZWN0ZWQgYm94LiBUaGlzXG4gICAgICogaXMgdGhlIGxheW91dCBib3gsIGFzIGl0IHdpbGwgYXBwZWFyIG9uIHNjcmVlbiBhcyBhIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtcyBvZiBpdHMgcGFyZW50cy5cbiAgICAgKi9cbiAgICBhcHBseVRyZWVEZWx0YXMobGF5b3V0Q29ycmVjdGVkLCB0cmVlU2NhbGUsIHRyZWVQYXRoKTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGRlbHRhIGJldHdlZW4gdGhlIGNvcnJlY3RlZCBib3ggYW5kIHRoZSB0YXJnZXQgYm94IGJlZm9yZSB1c2VyLXNldCB0cmFuc2Zvcm1zIHdlcmUgYXBwbGllZC5cbiAgICAgKiBUaGlzIHdpbGwgYWxsb3cgdXMgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0ZWQgYm9yZGVyUmFkaXVzIGFuZCBib3hTaGFkb3cgdG8gY29tcGVuc2F0ZVxuICAgICAqIGZvciBvdXIgbGF5b3V0IHJlcHJvamVjdGlvbiwgYnV0IHN0aWxsIGFsbG93IHRoZW0gdG8gYmUgc2NhbGVkIGNvcnJlY3RseSBieSB0aGUgdXNlci5cbiAgICAgKiBJdCBtaWdodCBiZSB0aGF0IHRvIHNpbXBsaWZ5IHRoaXMgd2UgbWF5IHdhbnQgdG8gYWNjZXB0IHRoYXQgdXNlci1zZXQgc2NhbGUgaXMgYWxzbyBjb3JyZWN0ZWRcbiAgICAgKiBhbmQgd2Ugd291bGRuJ3QgaGF2ZSB0byBrZWVwIGFuZCBjYWxjIGJvdGggZGVsdGFzLCBPUiB3ZSBjb3VsZCBzdXBwb3J0IGEgdXNlciBzZXR0aW5nXG4gICAgICogdG8gYWxsb3cgcGVvcGxlIHRvIGNob29zZSB3aGV0aGVyIHRoZXNlIHN0eWxlcyBhcmUgY29ycmVjdGVkIGJhc2VkIG9uIGp1c3QgdGhlXG4gICAgICogbGF5b3V0IHJlcHJvamVjdGlvbiBvciB0aGUgZmluYWwgYm91bmRpbmcgYm94LlxuICAgICAqL1xuICAgIHVwZGF0ZUJveERlbHRhKGRlbHRhLCBsYXlvdXRDb3JyZWN0ZWQsIHRhcmdldCwgdHJhbnNmb3JtT3JpZ2luKTtcbn1cblxuZXhwb3J0IHsgdXBkYXRlTGF5b3V0RGVsdGFzIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/render/utils/projection.js\n");

/***/ }),

/***/ "./node_modules/framer-motion/dist/es/utils/subscription-manager.js":
/*!**************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/utils/subscription-manager.js ***!
  \**************************************************************************/
/*! exports provided: SubscriptionManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubscriptionManager\", function() { return SubscriptionManager; });\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array.js */ \"./node_modules/framer-motion/dist/es/utils/array.js\");\nvar SubscriptionManager=function(){function SubscriptionManager(){this.subscriptions=[];}SubscriptionManager.prototype.add=function(handler){var _this=this;Object(_array_js__WEBPACK_IMPORTED_MODULE_0__[\"addUniqueItem\"])(this.subscriptions,handler);return function(){return Object(_array_js__WEBPACK_IMPORTED_MODULE_0__[\"removeItem\"])(_this.subscriptions,handler);};};SubscriptionManager.prototype.notify=function(a,b,c){var numSubscriptions=this.subscriptions.length;if(!numSubscriptions)return;if(numSubscriptions===1){/**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */this.subscriptions[0](a,b,c);}else{for(var i=0;i<numSubscriptions;i++){/**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */var handler=this.subscriptions[i];handler&&handler(a,b,c);}}};SubscriptionManager.prototype.getSize=function(){return this.subscriptions.length;};SubscriptionManager.prototype.clear=function(){this.subscriptions.length=0;};return SubscriptionManager;}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3V0aWxzL3N1YnNjcmlwdGlvbi1tYW5hZ2VyLmpzPzlhNzEiXSwibmFtZXMiOlsiU3Vic2NyaXB0aW9uTWFuYWdlciIsInN1YnNjcmlwdGlvbnMiLCJwcm90b3R5cGUiLCJhZGQiLCJoYW5kbGVyIiwiX3RoaXMiLCJhZGRVbmlxdWVJdGVtIiwicmVtb3ZlSXRlbSIsIm5vdGlmeSIsImEiLCJiIiwiYyIsIm51bVN1YnNjcmlwdGlvbnMiLCJsZW5ndGgiLCJpIiwiZ2V0U2l6ZSIsImNsZWFyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFFQSxHQUFJQSxvQkFBbUIsQ0FBa0IsVUFBWSxDQUNqRCxRQUFTQSxvQkFBVCxFQUErQixDQUMzQixLQUFLQyxhQUFMLENBQXFCLEVBQXJCLENBQ0gsQ0FDREQsbUJBQW1CLENBQUNFLFNBQXBCLENBQThCQyxHQUE5QixDQUFvQyxTQUFVQyxPQUFWLENBQW1CLENBQ25ELEdBQUlDLE1BQUssQ0FBRyxJQUFaLENBQ0FDLCtEQUFhLENBQUMsS0FBS0wsYUFBTixDQUFxQkcsT0FBckIsQ0FBYixDQUNBLE1BQU8sV0FBWSxDQUFFLE1BQU9HLDZEQUFVLENBQUNGLEtBQUssQ0FBQ0osYUFBUCxDQUFzQkcsT0FBdEIsQ0FBakIsQ0FBa0QsQ0FBdkUsQ0FDSCxDQUpELENBS0FKLG1CQUFtQixDQUFDRSxTQUFwQixDQUE4Qk0sTUFBOUIsQ0FBdUMsU0FBVUMsQ0FBVixDQUFhQyxDQUFiLENBQWdCQyxDQUFoQixDQUFtQixDQUN0RCxHQUFJQyxpQkFBZ0IsQ0FBRyxLQUFLWCxhQUFMLENBQW1CWSxNQUExQyxDQUNBLEdBQUksQ0FBQ0QsZ0JBQUwsQ0FDSSxPQUNKLEdBQUlBLGdCQUFnQixHQUFLLENBQXpCLENBQTRCLENBQ3hCO0FBQ1o7QUFDQSxlQUNZLEtBQUtYLGFBQUwsQ0FBbUIsQ0FBbkIsRUFBc0JRLENBQXRCLENBQXlCQyxDQUF6QixDQUE0QkMsQ0FBNUIsRUFDSCxDQUxELElBTUssQ0FDRCxJQUFLLEdBQUlHLEVBQUMsQ0FBRyxDQUFiLENBQWdCQSxDQUFDLENBQUdGLGdCQUFwQixDQUFzQ0UsQ0FBQyxFQUF2QyxDQUEyQyxDQUN2QztBQUNoQjtBQUNBO0FBQ0EsbUJBQ2dCLEdBQUlWLFFBQU8sQ0FBRyxLQUFLSCxhQUFMLENBQW1CYSxDQUFuQixDQUFkLENBQ0FWLE9BQU8sRUFBSUEsT0FBTyxDQUFDSyxDQUFELENBQUlDLENBQUosQ0FBT0MsQ0FBUCxDQUFsQixDQUNILENBQ0osQ0FDSixDQXBCRCxDQXFCQVgsbUJBQW1CLENBQUNFLFNBQXBCLENBQThCYSxPQUE5QixDQUF3QyxVQUFZLENBQ2hELE1BQU8sTUFBS2QsYUFBTCxDQUFtQlksTUFBMUIsQ0FDSCxDQUZELENBR0FiLG1CQUFtQixDQUFDRSxTQUFwQixDQUE4QmMsS0FBOUIsQ0FBc0MsVUFBWSxDQUM5QyxLQUFLZixhQUFMLENBQW1CWSxNQUFuQixDQUE0QixDQUE1QixDQUNILENBRkQsQ0FHQSxNQUFPYixvQkFBUCxDQUNILENBckN3QyxFQUF6QyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9mcmFtZXItbW90aW9uL2Rpc3QvZXMvdXRpbHMvc3Vic2NyaXB0aW9uLW1hbmFnZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRVbmlxdWVJdGVtLCByZW1vdmVJdGVtIH0gZnJvbSAnLi9hcnJheS5qcyc7XG5cbnZhciBTdWJzY3JpcHRpb25NYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbk1hbmFnZXIoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgIH1cbiAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBhZGRVbmlxdWVJdGVtKHRoaXMuc3Vic2NyaXB0aW9ucywgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmVJdGVtKF90aGlzLnN1YnNjcmlwdGlvbnMsIGhhbmRsZXIpOyB9O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uTWFuYWdlci5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgdmFyIG51bVN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICBpZiAoIW51bVN1YnNjcmlwdGlvbnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChudW1TdWJzY3JpcHRpb25zID09PSAxKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIHRoZXJlJ3Mgb25seSBhIHNpbmdsZSBoYW5kbGVyIHdlIGNhbiBqdXN0IGNhbGwgaXQgd2l0aG91dCBpbnZva2luZyBhIGxvb3AuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1swXShhLCBiLCBjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtU3Vic2NyaXB0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ2hlY2sgd2hldGhlciB0aGUgaGFuZGxlciBleGlzdHMgYmVmb3JlIGZpcmluZyBhcyBpdCdzIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICogdGhlIHN1YnNjcmlwdGlvbnMgd2VyZSBtb2RpZmllZCBkdXJpbmcgdGhpcyBsb29wIHJ1bm5pbmcuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLnN1YnNjcmlwdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgaGFuZGxlciAmJiBoYW5kbGVyKGEsIGIsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb25NYW5hZ2VyLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbk1hbmFnZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpcHRpb25NYW5hZ2VyO1xufSgpKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/utils/subscription-manager.js\n");

/***/ }),

/***/ "./node_modules/framer-motion/dist/es/value/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/index.js ***!
  \***********************************************************/
/*! exports provided: MotionValue, motionValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MotionValue\", function() { return MotionValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"motionValue\", function() { return motionValue; });\n/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.promise.js */ \"./node_modules/core-js/modules/es.promise.js\");\n/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! framesync */ \"./node_modules/framesync/dist/es/index.js\");\n/* harmony import */ var popmotion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! popmotion */ \"./node_modules/popmotion/dist/es/index.js\");\n/* harmony import */ var _utils_subscription_manager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/subscription-manager.js */ \"./node_modules/framer-motion/dist/es/utils/subscription-manager.js\");\nvar isFloat=function isFloat(value){return!isNaN(parseFloat(value));};/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */var MotionValue=function(){/**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */function MotionValue(init){var _this=this;/**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */this.timeDelta=0;/**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */this.lastUpdated=0;/**\n         * Functions to notify when the `MotionValue` updates.\n         *\n         * @internal\n         */this.updateSubscribers=new _utils_subscription_manager_js__WEBPACK_IMPORTED_MODULE_3__[\"SubscriptionManager\"]();/**\n         * Functions to notify when the velocity updates.\n         *\n         * @internal\n         */this.velocityUpdateSubscribers=new _utils_subscription_manager_js__WEBPACK_IMPORTED_MODULE_3__[\"SubscriptionManager\"]();/**\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n         *\n         * @internal\n         */this.renderSubscribers=new _utils_subscription_manager_js__WEBPACK_IMPORTED_MODULE_3__[\"SubscriptionManager\"]();/**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */this.canTrackVelocity=false;this.updateAndNotify=function(v,render){if(render===void 0){render=true;}_this.prev=_this.current;_this.current=v;// Update timestamp\nvar _a=Object(framesync__WEBPACK_IMPORTED_MODULE_1__[\"getFrameData\"])(),delta=_a.delta,timestamp=_a.timestamp;if(_this.lastUpdated!==timestamp){_this.timeDelta=delta;_this.lastUpdated=timestamp;framesync__WEBPACK_IMPORTED_MODULE_1__[\"default\"].postRender(_this.scheduleVelocityCheck);}// Update update subscribers\nif(_this.prev!==_this.current){_this.updateSubscribers.notify(_this.current);}// Update velocity subscribers\nif(_this.velocityUpdateSubscribers.getSize()){_this.velocityUpdateSubscribers.notify(_this.getVelocity());}// Update render subscribers\nif(render){_this.renderSubscribers.notify(_this.current);}};/**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */this.scheduleVelocityCheck=function(){return framesync__WEBPACK_IMPORTED_MODULE_1__[\"default\"].postRender(_this.velocityCheck);};/**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */this.velocityCheck=function(_a){var timestamp=_a.timestamp;if(timestamp!==_this.lastUpdated){_this.prev=_this.current;_this.velocityUpdateSubscribers.notify(_this.getVelocity());}};this.hasAnimated=false;this.prev=this.current=init;this.canTrackVelocity=isFloat(this.current);}/**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * @library\n     *\n     * ```jsx\n     * function MyComponent() {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <Frame x={x} />\n     * }\n     * ```\n     *\n     * @motion\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @internalremarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @public\n     */MotionValue.prototype.onChange=function(subscription){return this.updateSubscribers.add(subscription);};MotionValue.prototype.clearListeners=function(){this.updateSubscribers.clear();};/**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */MotionValue.prototype.onRenderRequest=function(subscription){// Render immediately\nsubscription(this.get());return this.renderSubscribers.add(subscription);};/**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */MotionValue.prototype.attach=function(passiveEffect){this.passiveEffect=passiveEffect;};/**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */MotionValue.prototype.set=function(v,render){if(render===void 0){render=true;}if(!render||!this.passiveEffect){this.updateAndNotify(v,render);}else{this.passiveEffect(v,this.updateAndNotify);}};/**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */MotionValue.prototype.get=function(){return this.current;};/**\n     * @public\n     */MotionValue.prototype.getPrevious=function(){return this.prev;};/**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */MotionValue.prototype.getVelocity=function(){// This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\nreturn this.canTrackVelocity?// These casts could be avoided if parseFloat would be typed better\nObject(popmotion__WEBPACK_IMPORTED_MODULE_2__[\"velocityPerSecond\"])(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0;};/**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */MotionValue.prototype.start=function(animation){var _this=this;this.stop();return new Promise(function(resolve){_this.hasAnimated=true;_this.stopAnimation=animation(resolve);}).then(function(){return _this.clearAnimation();});};/**\n     * Stop the currently active animation.\n     *\n     * @public\n     */MotionValue.prototype.stop=function(){if(this.stopAnimation)this.stopAnimation();this.clearAnimation();};/**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */MotionValue.prototype.isAnimating=function(){return!!this.stopAnimation;};MotionValue.prototype.clearAnimation=function(){this.stopAnimation=null;};/**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */MotionValue.prototype.destroy=function(){this.updateSubscribers.clear();this.renderSubscribers.clear();this.stop();};return MotionValue;}();/**\n * @internal\n */function motionValue(init){return new MotionValue(init);}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL2luZGV4LmpzPzIxZDIiXSwibmFtZXMiOlsiaXNGbG9hdCIsInZhbHVlIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiTW90aW9uVmFsdWUiLCJpbml0IiwiX3RoaXMiLCJ0aW1lRGVsdGEiLCJsYXN0VXBkYXRlZCIsInVwZGF0ZVN1YnNjcmliZXJzIiwiU3Vic2NyaXB0aW9uTWFuYWdlciIsInZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMiLCJyZW5kZXJTdWJzY3JpYmVycyIsImNhblRyYWNrVmVsb2NpdHkiLCJ1cGRhdGVBbmROb3RpZnkiLCJ2IiwicmVuZGVyIiwicHJldiIsImN1cnJlbnQiLCJfYSIsImdldEZyYW1lRGF0YSIsImRlbHRhIiwidGltZXN0YW1wIiwic3luYyIsInBvc3RSZW5kZXIiLCJzY2hlZHVsZVZlbG9jaXR5Q2hlY2siLCJub3RpZnkiLCJnZXRTaXplIiwiZ2V0VmVsb2NpdHkiLCJ2ZWxvY2l0eUNoZWNrIiwiaGFzQW5pbWF0ZWQiLCJwcm90b3R5cGUiLCJvbkNoYW5nZSIsInN1YnNjcmlwdGlvbiIsImFkZCIsImNsZWFyTGlzdGVuZXJzIiwiY2xlYXIiLCJvblJlbmRlclJlcXVlc3QiLCJnZXQiLCJhdHRhY2giLCJwYXNzaXZlRWZmZWN0Iiwic2V0IiwiZ2V0UHJldmlvdXMiLCJ2ZWxvY2l0eVBlclNlY29uZCIsInN0YXJ0IiwiYW5pbWF0aW9uIiwic3RvcCIsIlByb21pc2UiLCJyZXNvbHZlIiwic3RvcEFuaW1hdGlvbiIsInRoZW4iLCJjbGVhckFuaW1hdGlvbiIsImlzQW5pbWF0aW5nIiwiZGVzdHJveSIsIm1vdGlvblZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUlBLEdBQUlBLFFBQU8sQ0FBRyxRQUFWQSxRQUFVLENBQVVDLEtBQVYsQ0FBaUIsQ0FDM0IsTUFBTyxDQUFDQyxLQUFLLENBQUNDLFVBQVUsQ0FBQ0YsS0FBRCxD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T0FDSTdDLFdBQVcsQ0FBQzJCLFNBQVosQ0FBc0JzQixPQUF0QixDQUFnQyxVQUFZLENBQ3hDLEtBQUs1QyxpQkFBTCxDQUF1QjJCLEtBQXZCLEdBQ0EsS0FBS3hCLGlCQUFMLENBQXVCd0IsS0FBdkIsR0FDQSxLQUFLVSxJQUFMLEdBQ0gsQ0FKRCxDQUtBLE1BQU8xQyxZQUFQLENBQ0gsQ0E5VGdDLEVBQWpDLENBK1RBO0FBQ0E7QUFDQSxHQUNBLFFBQVNrRCxZQUFULENBQXFCakQsSUFBckIsQ0FBMkIsQ0FDdkIsTUFBTyxJQUFJRCxZQUFKLENBQWdCQyxJQUFoQixDQUFQLENBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN5bmMsIHsgZ2V0RnJhbWVEYXRhIH0gZnJvbSAnZnJhbWVzeW5jJztcbmltcG9ydCB7IHZlbG9jaXR5UGVyU2Vjb25kIH0gZnJvbSAncG9wbW90aW9uJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICcuLi91dGlscy9zdWJzY3JpcHRpb24tbWFuYWdlci5qcyc7XG5cbnZhciBpc0Zsb2F0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG59O1xuLyoqXG4gKiBgTW90aW9uVmFsdWVgIGlzIHVzZWQgdG8gdHJhY2sgdGhlIHN0YXRlIGFuZCB2ZWxvY2l0eSBvZiBtb3Rpb24gdmFsdWVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIE1vdGlvblZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBpbml0IC0gVGhlIGluaXRpYXRpbmcgdmFsdWVcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAgICpcbiAgICAgKiAtICBgdHJhbnNmb3JtZXJgOiBBIGZ1bmN0aW9uIHRvIHRyYW5zZm9ybSBpbmNvbWluZyB2YWx1ZXMgd2l0aC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1vdGlvblZhbHVlKGluaXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIER1cmF0aW9uLCBpbiBtaWxsaXNlY29uZHMsIHNpbmNlIGxhc3QgdXBkYXRpbmcgZnJhbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50aW1lRGVsdGEgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGltZXN0YW1wIG9mIHRoZSBsYXN0IHRpbWUgdGhpcyBgTW90aW9uVmFsdWVgIHdhcyB1cGRhdGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGFzdFVwZGF0ZWQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRnVuY3Rpb25zIHRvIG5vdGlmeSB3aGVuIHRoZSBgTW90aW9uVmFsdWVgIHVwZGF0ZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51cGRhdGVTdWJzY3JpYmVycyA9IG5ldyBTdWJzY3JpcHRpb25NYW5hZ2VyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGdW5jdGlvbnMgdG8gbm90aWZ5IHdoZW4gdGhlIHZlbG9jaXR5IHVwZGF0ZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzID0gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZ1bmN0aW9ucyB0byBub3RpZnkgd2hlbiB0aGUgYE1vdGlvblZhbHVlYCB1cGRhdGVzIGFuZCBgcmVuZGVyYCBpcyBzZXQgdG8gYHRydWVgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVuZGVyU3Vic2NyaWJlcnMgPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVHJhY2tzIHdoZXRoZXIgdGhpcyB2YWx1ZSBjYW4gb3V0cHV0IGEgdmVsb2NpdHkuIEN1cnJlbnRseSB0aGlzIGlzIG9ubHkgdHJ1ZVxuICAgICAgICAgKiBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpY2FsLCBidXQgd2UgbWlnaHQgYmUgYWJsZSB0byB3aWRlbiB0aGUgc2NvcGUgaGVyZSBhbmQgc3VwcG9ydFxuICAgICAgICAgKiBvdGhlciB2YWx1ZSB0eXBlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNhblRyYWNrVmVsb2NpdHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51cGRhdGVBbmROb3RpZnkgPSBmdW5jdGlvbiAodiwgcmVuZGVyKSB7XG4gICAgICAgICAgICBpZiAocmVuZGVyID09PSB2b2lkIDApIHsgcmVuZGVyID0gdHJ1ZTsgfVxuICAgICAgICAgICAgX3RoaXMucHJldiA9IF90aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aW1lc3RhbXBcbiAgICAgICAgICAgIHZhciBfYSA9IGdldEZyYW1lRGF0YSgpLCBkZWx0YSA9IF9hLmRlbHRhLCB0aW1lc3RhbXAgPSBfYS50aW1lc3RhbXA7XG4gICAgICAgICAgICBpZiAoX3RoaXMubGFzdFVwZGF0ZWQgIT09IHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnRpbWVEZWx0YSA9IGRlbHRhO1xuICAgICAgICAgICAgICAgIF90aGlzLmxhc3RVcGRhdGVkID0gdGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIHN5bmMucG9zdFJlbmRlcihfdGhpcy5zY2hlZHVsZVZlbG9jaXR5Q2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHVwZGF0ZSBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKF90aGlzLnByZXYgIT09IF90aGlzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVTdWJzY3JpYmVycy5ub3RpZnkoX3RoaXMuY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgdmVsb2NpdHkgc3Vic2NyaWJlcnNcbiAgICAgICAgICAgIGlmIChfdGhpcy52ZWxvY2l0eVVwZGF0ZVN1YnNjcmliZXJzLmdldFNpemUoKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnZlbG9jaXR5VXBkYXRlU3Vic2NyaWJlcnMubm90aWZ5KF90aGlzLmdldFZlbG9jaXR5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVXBkYXRlIHJlbmRlciBzdWJzY3JpYmVyc1xuICAgICAgICAgICAgaWYgKHJlbmRlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlclN1YnNjcmliZXJzLm5vdGlmeShfdGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNjaGVkdWxlIGEgdmVsb2NpdHkgY2hlY2sgZm9yIHRoZSBuZXh0IGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2NoZWR1bGVWZWxvY2l0eUNoZWNrID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gc3luYy5wb3N0UmVuZGVyKF90aGlzLnZlbG9jaXR5Q2hlY2spOyB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyBgcHJldmAgd2l0aCBgY3VycmVudGAgaWYgdGhlIHZhbHVlIGhhc24ndCBiZWVuIHVwZGF0ZWQgdGhpcyBmcmFtZS5cbiAgICAgICAgICogVGhpcyBlbnN1cmVzIHZlbG9jaXR5IGNhbGN1bGF0aW9ucyByZXR1cm4gYDBgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIGFuIGluc3RhbmNlZCBhbmQgYm91bmQgZnVuY3Rpb24gdG8gcHJldmVudCBnZW5lcmF0aW5nIGEgbmV3XG4gICAgICAgICAqIGZ1bmN0aW9uIG9uY2UgcGVyIGZyYW1lLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmVsb2NpdHlDaGVjayA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIHRpbWVzdGFtcCA9IF9hLnRpbWVzdGFtcDtcbiAgICAgICAgICAgIGlmICh0aW1lc3RhbXAgIT09IF90aGlzLmxhc3RVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJldiA9IF90aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgX3RoaXMudmVsb2NpdHlVcGRhdGVTdWJzY3JpYmVycy5ub3RpZnkoX3RoaXMuZ2V0VmVsb2NpdHkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFzQW5pbWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmV2ID0gdGhpcy5jdXJyZW50ID0gaW5pdDtcbiAgICAgICAgdGhpcy5jYW5UcmFja1ZlbG9jaXR5ID0gaXNGbG9hdCh0aGlzLmN1cnJlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIG5vdGlmaWVkIHdoZW4gdGhlIGBNb3Rpb25WYWx1ZWAgaXMgdXBkYXRlZC5cbiAgICAgKlxuICAgICAqIEl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIFdoZW4gY2FsbGluZyBgb25DaGFuZ2VgIGluc2lkZSBhIFJlYWN0IGNvbXBvbmVudCwgaXQgc2hvdWxkIGJlIHdyYXBwZWQgd2l0aCB0aGVcbiAgICAgKiBgdXNlRWZmZWN0YCBob29rLiBBcyBpdCByZXR1cm5zIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uLCB0aGlzIHNob3VsZCBiZSByZXR1cm5lZFxuICAgICAqIGZyb20gdGhlIGB1c2VFZmZlY3RgIGZ1bmN0aW9uIHRvIGVuc3VyZSB5b3UgZG9uJ3QgYWRkIGR1cGxpY2F0ZSBzdWJzY3JpYmVycy4uXG4gICAgICpcbiAgICAgKiBAbGlicmFyeVxuICAgICAqXG4gICAgICogYGBganN4XG4gICAgICogZnVuY3Rpb24gTXlDb21wb25lbnQoKSB7XG4gICAgICogICBjb25zdCB4ID0gdXNlTW90aW9uVmFsdWUoMClcbiAgICAgKiAgIGNvbnN0IHkgPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICAgICAqICAgY29uc3Qgb3BhY2l0eSA9IHVzZU1vdGlvblZhbHVlKDEpXG4gICAgICpcbiAgICAgKiAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICogICAgIGZ1bmN0aW9uIHVwZGF0ZU9wYWNpdHkoKSB7XG4gICAgICogICAgICAgY29uc3QgbWF4WFkgPSBNYXRoLm1heCh4LmdldCgpLCB5LmdldCgpKVxuICAgICAqICAgICAgIGNvbnN0IG5ld09wYWNpdHkgPSB0cmFuc2Zvcm0obWF4WFksIFswLCAxMDBdLCBbMSwgMF0pXG4gICAgICogICAgICAgb3BhY2l0eS5zZXQobmV3T3BhY2l0eSlcbiAgICAgKiAgICAgfVxuICAgICAqXG4gICAgICogICAgIGNvbnN0IHVuc3Vic2NyaWJlWCA9IHgub25DaGFuZ2UodXBkYXRlT3BhY2l0eSlcbiAgICAgKiAgICAgY29uc3QgdW5zdWJzY3JpYmVZID0geS5vbkNoYW5nZSh1cGRhdGVPcGFjaXR5KVxuICAgICAqXG4gICAgICogICAgIHJldHVybiAoKSA9PiB7XG4gICAgICogICAgICAgdW5zdWJzY3JpYmVYKClcbiAgICAgKiAgICAgICB1bnN1YnNjcmliZVkoKVxuICAgICAqICAgICB9XG4gICAgICogICB9LCBbXSlcbiAgICAgKlxuICAgICAqICAgcmV0dXJuIDxGcmFtZSB4PXt4fSAvPlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtb3Rpb25cbiAgICAgKlxuICAgICAqIGBgYGpzeFxuICAgICAqIGV4cG9ydCBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IHtcbiAgICAgKiAgIGNvbnN0IHggPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICAgICAqICAgY29uc3QgeSA9IHVzZU1vdGlvblZhbHVlKDApXG4gICAgICogICBjb25zdCBvcGFjaXR5ID0gdXNlTW90aW9uVmFsdWUoMSlcbiAgICAgKlxuICAgICAqICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgKiAgICAgZnVuY3Rpb24gdXBkYXRlT3BhY2l0eSgpIHtcbiAgICAgKiAgICAgICBjb25zdCBtYXhYWSA9IE1hdGgubWF4KHguZ2V0KCksIHkuZ2V0KCkpXG4gICAgICogICAgICAgY29uc3QgbmV3T3BhY2l0eSA9IHRyYW5zZm9ybShtYXhYWSwgWzAsIDEwMF0sIFsxLCAwXSlcbiAgICAgKiAgICAgICBvcGFjaXR5LnNldChuZXdPcGFjaXR5KVxuICAgICAqICAgICB9XG4gICAgICpcbiAgICAgKiAgICAgY29uc3QgdW5zdWJzY3JpYmVYID0geC5vbkNoYW5nZSh1cGRhdGVPcGFjaXR5KVxuICAgICAqICAgICBjb25zdCB1bnN1YnNjcmliZVkgPSB5Lm9uQ2hhbmdlKHVwZGF0ZU9wYWNpdHkpXG4gICAgICpcbiAgICAgKiAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgKiAgICAgICB1bnN1YnNjcmliZVgoKVxuICAgICAqICAgICAgIHVuc3Vic2NyaWJlWSgpXG4gICAgICogICAgIH1cbiAgICAgKiAgIH0sIFtdKVxuICAgICAqXG4gICAgICogICByZXR1cm4gPG1vdGlvbi5kaXYgc3R5bGU9e3sgeCB9fSAvPlxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbHJlbWFya3NcbiAgICAgKlxuICAgICAqIFdlIGNvdWxkIGxvb2sgaW50byBhIGB1c2VPbkNoYW5nZWAgaG9vayBpZiB0aGUgYWJvdmUgbGlmZWN5Y2xlIG1hbmFnZW1lbnQgcHJvdmVzIGNvbmZ1c2luZy5cbiAgICAgKlxuICAgICAqIGBgYGpzeFxuICAgICAqIHVzZU9uQ2hhbmdlKHgsICgpID0+IHt9KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHN1YnNjcmliZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIGxhdGVzdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB3aWxsIGNhbmNlbCB0aGlzIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUub25DaGFuZ2UgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVN1YnNjcmliZXJzLmFkZChzdWJzY3JpcHRpb24pO1xuICAgIH07XG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmNsZWFyTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIG5vdGlmaWVkIHdoZW4gdGhlIGBNb3Rpb25WYWx1ZWAgcmVxdWVzdHMgYSByZW5kZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3Vic2NyaWJlciAtIEEgZnVuY3Rpb24gdGhhdCdzIHByb3ZpZGVkIHRoZSBsYXRlc3QgdmFsdWUuXG4gICAgICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhpcyBzdWJzY3JpcHRpb24uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUub25SZW5kZXJSZXF1ZXN0ID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAvLyBSZW5kZXIgaW1tZWRpYXRlbHlcbiAgICAgICAgc3Vic2NyaXB0aW9uKHRoaXMuZ2V0KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJTdWJzY3JpYmVycy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIGEgcGFzc2l2ZSBlZmZlY3QgdG8gdGhlIGBNb3Rpb25WYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gKHBhc3NpdmVFZmZlY3QpIHtcbiAgICAgICAgdGhpcy5wYXNzaXZlRWZmZWN0ID0gcGFzc2l2ZUVmZmVjdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBgTW90aW9uVmFsdWVgLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKlxuICAgICAqIGBgYGpzeFxuICAgICAqIGNvbnN0IHggPSB1c2VNb3Rpb25WYWx1ZSgwKVxuICAgICAqIHguc2V0KDEwKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxhdGVzdCAtIExhdGVzdCB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHJlbmRlciAtIFdoZXRoZXIgdG8gbm90aWZ5IHJlbmRlciBzdWJzY3JpYmVycy4gRGVmYXVsdHMgdG8gYHRydWVgXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uICh2LCByZW5kZXIpIHtcbiAgICAgICAgaWYgKHJlbmRlciA9PT0gdm9pZCAwKSB7IHJlbmRlciA9IHRydWU7IH1cbiAgICAgICAgaWYgKCFyZW5kZXIgfHwgIXRoaXMucGFzc2l2ZUVmZmVjdCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVBbmROb3RpZnkodiwgcmVuZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFzc2l2ZUVmZmVjdCh2LCB0aGlzLnVwZGF0ZUFuZE5vdGlmeSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxhdGVzdCBzdGF0ZSBvZiBgTW90aW9uVmFsdWVgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyAtIFRoZSBsYXRlc3Qgc3RhdGUgb2YgYE1vdGlvblZhbHVlYFxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmdldFByZXZpb3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGF0ZXN0IHZlbG9jaXR5IG9mIGBNb3Rpb25WYWx1ZWBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIC0gVGhlIGxhdGVzdCB2ZWxvY2l0eSBvZiBgTW90aW9uVmFsdWVgLiBSZXR1cm5zIGAwYCBpZiB0aGUgc3RhdGUgaXMgbm9uLW51bWVyaWNhbC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuZ2V0VmVsb2NpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoaXMgY291bGQgYmUgaXNGbG9hdCh0aGlzLnByZXYpICYmIGlzRmxvYXQodGhpcy5jdXJyZW50KSwgYnV0IHRoYXQgd291bGQgYmUgd2FzdGVmdWxcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuVHJhY2tWZWxvY2l0eVxuICAgICAgICAgICAgPyAvLyBUaGVzZSBjYXN0cyBjb3VsZCBiZSBhdm9pZGVkIGlmIHBhcnNlRmxvYXQgd291bGQgYmUgdHlwZWQgYmV0dGVyXG4gICAgICAgICAgICAgICAgdmVsb2NpdHlQZXJTZWNvbmQocGFyc2VGbG9hdCh0aGlzLmN1cnJlbnQpIC1cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh0aGlzLnByZXYpLCB0aGlzLnRpbWVEZWx0YSlcbiAgICAgICAgICAgIDogMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBhbmltYXRpb24gdG8gY29udHJvbCB0aGlzIGBNb3Rpb25WYWx1ZWAuIE9ubHkgb25lXG4gICAgICogYW5pbWF0aW9uIGNhbiBkcml2ZSBhIGBNb3Rpb25WYWx1ZWAgYXQgb25lIHRpbWUuXG4gICAgICpcbiAgICAgKiBgYGBqc3hcbiAgICAgKiB2YWx1ZS5zdGFydCgpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW5pbWF0aW9uIC0gQSBmdW5jdGlvbiB0aGF0IHN0YXJ0cyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIF90aGlzLmhhc0FuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLnN0b3BBbmltYXRpb24gPSBhbmltYXRpb24ocmVzb2x2ZSk7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY2xlYXJBbmltYXRpb24oKTsgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBjdXJyZW50bHkgYWN0aXZlIGFuaW1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcEFuaW1hdGlvbilcbiAgICAgICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuICAgICAgICB0aGlzLmNsZWFyQW5pbWF0aW9uKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHZhbHVlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgTW90aW9uVmFsdWUucHJvdG90eXBlLmlzQW5pbWF0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnN0b3BBbmltYXRpb247XG4gICAgfTtcbiAgICBNb3Rpb25WYWx1ZS5wcm90b3R5cGUuY2xlYXJBbmltYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbiA9IG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZXN0cm95IGFuZCBjbGVhbiB1cCBzdWJzY3JpYmVycyB0byB0aGlzIGBNb3Rpb25WYWx1ZWAuXG4gICAgICpcbiAgICAgKiBUaGUgYE1vdGlvblZhbHVlYCBob29rcyBsaWtlIGB1c2VNb3Rpb25WYWx1ZWAgYW5kIGB1c2VUcmFuc2Zvcm1gIGF1dG9tYXRpY2FsbHlcbiAgICAgKiBoYW5kbGUgdGhlIGxpZmVjeWNsZSBvZiB0aGUgcmV0dXJuZWQgYE1vdGlvblZhbHVlYCwgc28gdGhpcyBtZXRob2QgaXMgb25seSBuZWNlc3NhcnkgaWYgeW91J3ZlIG1hbnVhbGx5XG4gICAgICogY3JlYXRlZCBhIGBNb3Rpb25WYWx1ZWAgdmlhIHRoZSBgbW90aW9uVmFsdWVgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIE1vdGlvblZhbHVlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMucmVuZGVyU3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTW90aW9uVmFsdWU7XG59KCkpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gbW90aW9uVmFsdWUoaW5pdCkge1xuICAgIHJldHVybiBuZXcgTW90aW9uVmFsdWUoaW5pdCk7XG59XG5cbmV4cG9ydCB7IE1vdGlvblZhbHVlLCBtb3Rpb25WYWx1ZSB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/value/index.js\n");

/***/ }),

/***/ "./node_modules/framer-motion/dist/es/value/use-combine-values.js":
/*!************************************************************************!*\
  !*** ./node_modules/framer-motion/dist/es/value/use-combine-values.js ***!
  \************************************************************************/
/*! exports provided: useCombineMotionValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useCombineMotionValues\", function() { return useCombineMotionValues; });\n/* harmony import */ var _use_motion_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./use-motion-value.js */ \"./node_modules/framer-motion/dist/es/value/use-motion-value.js\");\n/* harmony import */ var _use_on_change_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use-on-change.js */ \"./node_modules/framer-motion/dist/es/value/use-on-change.js\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! framesync */ \"./node_modules/framesync/dist/es/index.js\");\nfunction useCombineMotionValues(values,combineValues){/**\n     * Initialise the returned motion value. This remains the same between renders.\n     */var value=Object(_use_motion_value_js__WEBPACK_IMPORTED_MODULE_0__[\"useMotionValue\"])(combineValues());/**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */var updateValue=function updateValue(){return value.set(combineValues());};/**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */updateValue();/**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */Object(_use_on_change_js__WEBPACK_IMPORTED_MODULE_1__[\"useMultiOnChange\"])(values,function(){return framesync__WEBPACK_IMPORTED_MODULE_2__[\"default\"].update(updateValue,false,true);});return value;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS1jb21iaW5lLXZhbHVlcy5qcz9hMzI4Il0sIm5hbWVzIjpbInVzZUNvbWJpbmVNb3Rpb25WYWx1ZXMiLCJ2YWx1ZXMiLCJjb21iaW5lVmFsdWVzIiwidmFsdWUiLCJ1c2VNb3Rpb25WYWx1ZSIsInVwZGF0ZVZhbHVlIiwic2V0IiwidXNlTXVsdGlPbkNoYW5nZSIsInN5bmMiLCJ1cGRhdGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJQSxRQUFTQSx1QkFBVCxDQUFnQ0MsTUFBaEMsQ0FBd0NDLGFBQXhDLENBQXVELENBQ25EO0FBQ0o7QUFDQSxPQUNJLEdBQUlDLE1BQUssQ0FBR0MsMkVBQWMsQ0FBQ0YsYUFBYSxFQUFkLENBQTFCLENBQ0E7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQ0ksR0FBSUcsWUFBVyxDQUFHLFFBQWRBLFlBQWMsRUFBWSxDQUFFLE1BQU9GLE1BQUssQ0FBQ0csR0FBTixDQUFVSixhQUFhLEVBQXZCLENBQVAsQ0FBb0MsQ0FBcEUsQ0FDQTtBQUNKO0FBQ0E7QUFDQSxPQUNJRyxXQUFXLEdBQ1g7QUFDSjtBQUNBO0FBQ0EsT0FDSUUsMEVBQWdCLENBQUNOLE1BQUQsQ0FBUyxVQUFZLENBQUUsTUFBT08sa0RBQUksQ0FBQ0MsTUFBTCxDQUFZSixXQUFaLENBQXlCLEtBQXpCLENBQWdDLElBQWhDLENBQVAsQ0FBK0MsQ0FBdEUsQ0FBaEIsQ0FDQSxNQUFPRixNQUFQLENBQ0giLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnJhbWVyLW1vdGlvbi9kaXN0L2VzL3ZhbHVlL3VzZS1jb21iaW5lLXZhbHVlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1vdGlvblZhbHVlIH0gZnJvbSAnLi91c2UtbW90aW9uLXZhbHVlLmpzJztcbmltcG9ydCB7IHVzZU11bHRpT25DaGFuZ2UgfSBmcm9tICcuL3VzZS1vbi1jaGFuZ2UuanMnO1xuaW1wb3J0IHN5bmMgZnJvbSAnZnJhbWVzeW5jJztcblxuZnVuY3Rpb24gdXNlQ29tYmluZU1vdGlvblZhbHVlcyh2YWx1ZXMsIGNvbWJpbmVWYWx1ZXMpIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXNlIHRoZSByZXR1cm5lZCBtb3Rpb24gdmFsdWUuIFRoaXMgcmVtYWlucyB0aGUgc2FtZSBiZXR3ZWVuIHJlbmRlcnMuXG4gICAgICovXG4gICAgdmFyIHZhbHVlID0gdXNlTW90aW9uVmFsdWUoY29tYmluZVZhbHVlcygpKTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHdpbGwgdXBkYXRlIHRoZSB0ZW1wbGF0ZSBtb3Rpb24gdmFsdWUgd2l0aCB0aGUgbGF0ZXN0IHZhbHVlcy5cbiAgICAgKiBUaGlzIGlzIHByZS1ib3VuZCBzbyB3aGVuZXZlciBhIG1vdGlvbiB2YWx1ZSB1cGRhdGVzIGl0IGNhbiBzY2hlZHVsZSBpdHNcbiAgICAgKiBleGVjdXRpb24gaW4gRnJhbWVzeW5jLiBJZiBpdCdzIGFscmVhZHkgYmVlbiBzY2hlZHVsZWQgaXQgd29uJ3QgYmUgZmlyZWQgdHdpY2VcbiAgICAgKiBpbiBhIHNpbmdsZSBmcmFtZS5cbiAgICAgKi9cbiAgICB2YXIgdXBkYXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZS5zZXQoY29tYmluZVZhbHVlcygpKTsgfTtcbiAgICAvKipcbiAgICAgKiBTeW5jaHJvbm91c2x5IHVwZGF0ZSB0aGUgbW90aW9uIHZhbHVlIHdpdGggdGhlIGxhdGVzdCB2YWx1ZXMgZHVyaW5nIHRoZSByZW5kZXIuXG4gICAgICogVGhpcyBlbnN1cmVzIHRoYXQgd2l0aGluIGEgUmVhY3QgcmVuZGVyLCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIERPTSBhcmUgdXAtdG8tZGF0ZS5cbiAgICAgKi9cbiAgICB1cGRhdGVWYWx1ZSgpO1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBhbGwgbW90aW9uIHZhbHVlcyBmb3VuZCB3aXRoaW4gdGhlIHRlbXBsYXRlLiBXaGVuZXZlciBhbnkgb2YgdGhlbSBjaGFuZ2UsXG4gICAgICogc2NoZWR1bGUgYW4gdXBkYXRlLlxuICAgICAqL1xuICAgIHVzZU11bHRpT25DaGFuZ2UodmFsdWVzLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzeW5jLnVwZGF0ZSh1cGRhdGVWYWx1ZSwgZmFsc2UsIHRydWUpOyB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCB7IHVzZUNvbWJpbmVNb3Rpb25WYWx1ZXMgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/framer-motion/dist/es/value/use-combine-values.js\n");

/***/ })

})